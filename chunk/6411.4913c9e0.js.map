{"version":3,"file":"chunk/6411.4913c9e0.js","mappings":"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","sources":["webpack://@snx-v3/liquidity/../../node_modules/viem/_esm/errors/address.js","webpack://@snx-v3/liquidity/../../node_modules/viem/_esm/errors/base.js","webpack://@snx-v3/liquidity/../../node_modules/viem/_esm/errors/utils.js","webpack://@snx-v3/liquidity/../../node_modules/viem/_esm/errors/data.js","webpack://@snx-v3/liquidity/../../node_modules/viem/_esm/errors/encoding.js","webpack://@snx-v3/liquidity/../../node_modules/viem/_esm/utils/lru.js","webpack://@snx-v3/liquidity/../../node_modules/viem/_esm/utils/address/getAddress.js","webpack://@snx-v3/liquidity/../../node_modules/viem/_esm/utils/address/isAddress.js","webpack://@snx-v3/liquidity/../../node_modules/viem/_esm/utils/data/concat.js","webpack://@snx-v3/liquidity/../../node_modules/viem/_esm/utils/data/isHex.js","webpack://@snx-v3/liquidity/../../node_modules/viem/_esm/utils/data/pad.js","webpack://@snx-v3/liquidity/../../node_modules/viem/_esm/utils/data/size.js","webpack://@snx-v3/liquidity/../../node_modules/viem/_esm/utils/data/slice.js","webpack://@snx-v3/liquidity/../../node_modules/viem/_esm/utils/encoding/fromHex.js","webpack://@snx-v3/liquidity/../../node_modules/viem/_esm/utils/encoding/toBytes.js","webpack://@snx-v3/liquidity/../../node_modules/viem/_esm/utils/encoding/toHex.js","webpack://@snx-v3/liquidity/../../node_modules/viem/node_modules/@noble/hashes/esm/_u64.js","webpack://@snx-v3/liquidity/../../node_modules/viem/node_modules/@noble/hashes/esm/sha3.js","webpack://@snx-v3/liquidity/../../node_modules/viem/_esm/utils/hash/keccak256.js","webpack://@snx-v3/liquidity/../../node_modules/viem/node_modules/@noble/hashes/esm/_assert.js","webpack://@snx-v3/liquidity/../../node_modules/viem/node_modules/@noble/hashes/esm/utils.js"],"sourcesContent":["import { BaseError } from './base.js';\nexport class InvalidAddressError extends BaseError {\n    constructor({ address }) {\n        super(`Address \"${address}\" is invalid.`, {\n            metaMessages: [\n                '- Address must be a hex value of 20 bytes (40 hex characters).',\n                '- Address must match its checksum counterpart.',\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidAddressError'\n        });\n    }\n}\n//# sourceMappingURL=address.js.map","import { getVersion } from './utils.js';\nexport class BaseError extends Error {\n    constructor(shortMessage, args = {}) {\n        super();\n        Object.defineProperty(this, \"details\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"docsPath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metaMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"shortMessage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'ViemError'\n        });\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: getVersion()\n        });\n        const details = args.cause instanceof BaseError\n            ? args.cause.details\n            : args.cause?.message\n                ? args.cause.message\n                : args.details;\n        const docsPath = args.cause instanceof BaseError\n            ? args.cause.docsPath || args.docsPath\n            : args.docsPath;\n        this.message = [\n            shortMessage || 'An error occurred.',\n            '',\n            ...(args.metaMessages ? [...args.metaMessages, ''] : []),\n            ...(docsPath\n                ? [\n                    `Docs: ${args.docsBaseUrl ?? 'https://viem.sh'}${docsPath}${args.docsSlug ? `#${args.docsSlug}` : ''}`,\n                ]\n                : []),\n            ...(details ? [`Details: ${details}`] : []),\n            `Version: ${this.version}`,\n        ].join('\\n');\n        if (args.cause)\n            this.cause = args.cause;\n        this.details = details;\n        this.docsPath = docsPath;\n        this.metaMessages = args.metaMessages;\n        this.shortMessage = shortMessage;\n    }\n    walk(fn) {\n        return walk(this, fn);\n    }\n}\nfunction walk(err, fn) {\n    if (fn?.(err))\n        return err;\n    if (err && typeof err === 'object' && 'cause' in err)\n        return walk(err.cause, fn);\n    return fn ? null : err;\n}\n//# sourceMappingURL=base.js.map","import { version } from './version.js';\nexport const getContractAddress = (address) => address;\nexport const getUrl = (url) => url;\nexport const getVersion = () => `viem@${version}`;\n//# sourceMappingURL=utils.js.map","import { BaseError } from './base.js';\nexport class SliceOffsetOutOfBoundsError extends BaseError {\n    constructor({ offset, position, size, }) {\n        super(`Slice ${position === 'start' ? 'starting' : 'ending'} at offset \"${offset}\" is out-of-bounds (size: ${size}).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'SliceOffsetOutOfBoundsError'\n        });\n    }\n}\nexport class SizeExceedsPaddingSizeError extends BaseError {\n    constructor({ size, targetSize, type, }) {\n        super(`${type.charAt(0).toUpperCase()}${type\n            .slice(1)\n            .toLowerCase()} size (${size}) exceeds padding size (${targetSize}).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'SizeExceedsPaddingSizeError'\n        });\n    }\n}\nexport class InvalidBytesLengthError extends BaseError {\n    constructor({ size, targetSize, type, }) {\n        super(`${type.charAt(0).toUpperCase()}${type\n            .slice(1)\n            .toLowerCase()} is expected to be ${targetSize} ${type} long, but is ${size} ${type} long.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidBytesLengthError'\n        });\n    }\n}\n//# sourceMappingURL=data.js.map","import { BaseError } from './base.js';\nexport class IntegerOutOfRangeError extends BaseError {\n    constructor({ max, min, signed, size, value, }) {\n        super(`Number \"${value}\" is not in safe ${size ? `${size * 8}-bit ${signed ? 'signed' : 'unsigned'} ` : ''}integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'IntegerOutOfRangeError'\n        });\n    }\n}\nexport class InvalidBytesBooleanError extends BaseError {\n    constructor(bytes) {\n        super(`Bytes value \"${bytes}\" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidBytesBooleanError'\n        });\n    }\n}\nexport class InvalidHexBooleanError extends BaseError {\n    constructor(hex) {\n        super(`Hex value \"${hex}\" is not a valid boolean. The hex value must be \"0x0\" (false) or \"0x1\" (true).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidHexBooleanError'\n        });\n    }\n}\nexport class InvalidHexValueError extends BaseError {\n    constructor(value) {\n        super(`Hex value \"${value}\" is an odd length (${value.length}). It must be an even length.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidHexValueError'\n        });\n    }\n}\nexport class SizeOverflowError extends BaseError {\n    constructor({ givenSize, maxSize }) {\n        super(`Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'SizeOverflowError'\n        });\n    }\n}\n//# sourceMappingURL=encoding.js.map","/**\n * Map with a LRU (Least recently used) policy.\n *\n * @link https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\n */\nexport class LruMap extends Map {\n    constructor(size) {\n        super();\n        Object.defineProperty(this, \"maxSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxSize = size;\n    }\n    set(key, value) {\n        super.set(key, value);\n        if (this.maxSize && this.size > this.maxSize)\n            this.delete(this.keys().next().value);\n        return this;\n    }\n}\n//# sourceMappingURL=lru.js.map","import { InvalidAddressError } from '../../errors/address.js';\nimport { stringToBytes, } from '../encoding/toBytes.js';\nimport { keccak256 } from '../hash/keccak256.js';\nimport { LruMap } from '../lru.js';\nimport { isAddress } from './isAddress.js';\nconst checksumAddressCache = /*#__PURE__*/ new LruMap(8192);\nexport function checksumAddress(address_, \n/**\n * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\n * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\n * that relies on EIP-55 checksum encoding (checksum without chainId).\n *\n * It is highly recommended to not use this feature unless you\n * know what you are doing.\n *\n * See more: https://github.com/ethereum/EIPs/issues/1121\n */\nchainId) {\n    if (checksumAddressCache.has(`${address_}.${chainId}`))\n        return checksumAddressCache.get(`${address_}.${chainId}`);\n    const hexAddress = chainId\n        ? `${chainId}${address_.toLowerCase()}`\n        : address_.substring(2).toLowerCase();\n    const hash = keccak256(stringToBytes(hexAddress), 'bytes');\n    const address = (chainId ? hexAddress.substring(`${chainId}0x`.length) : hexAddress).split('');\n    for (let i = 0; i < 40; i += 2) {\n        if (hash[i >> 1] >> 4 >= 8 && address[i]) {\n            address[i] = address[i].toUpperCase();\n        }\n        if ((hash[i >> 1] & 0x0f) >= 8 && address[i + 1]) {\n            address[i + 1] = address[i + 1].toUpperCase();\n        }\n    }\n    const result = `0x${address.join('')}`;\n    checksumAddressCache.set(`${address_}.${chainId}`, result);\n    return result;\n}\nexport function getAddress(address, \n/**\n * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\n * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\n * that relies on EIP-55 checksum encoding (checksum without chainId).\n *\n * It is highly recommended to not use this feature unless you\n * know what you are doing.\n *\n * See more: https://github.com/ethereum/EIPs/issues/1121\n */\nchainId) {\n    if (!isAddress(address, { strict: false }))\n        throw new InvalidAddressError({ address });\n    return checksumAddress(address, chainId);\n}\n//# sourceMappingURL=getAddress.js.map","import { LruMap } from '../lru.js';\nimport { checksumAddress } from './getAddress.js';\nconst addressRegex = /^0x[a-fA-F0-9]{40}$/;\n/** @internal */\nexport const isAddressCache = /*#__PURE__*/ new LruMap(8192);\nexport function isAddress(address, options) {\n    const { strict = true } = options ?? {};\n    const cacheKey = `${address}.${strict}`;\n    if (isAddressCache.has(cacheKey))\n        return isAddressCache.get(cacheKey);\n    const result = (() => {\n        if (!addressRegex.test(address))\n            return false;\n        if (address.toLowerCase() === address)\n            return true;\n        if (strict)\n            return checksumAddress(address) === address;\n        return true;\n    })();\n    isAddressCache.set(cacheKey, result);\n    return result;\n}\n//# sourceMappingURL=isAddress.js.map","export function concat(values) {\n    if (typeof values[0] === 'string')\n        return concatHex(values);\n    return concatBytes(values);\n}\nexport function concatBytes(values) {\n    let length = 0;\n    for (const arr of values) {\n        length += arr.length;\n    }\n    const result = new Uint8Array(length);\n    let offset = 0;\n    for (const arr of values) {\n        result.set(arr, offset);\n        offset += arr.length;\n    }\n    return result;\n}\nexport function concatHex(values) {\n    return `0x${values.reduce((acc, x) => acc + x.replace('0x', ''), '')}`;\n}\n//# sourceMappingURL=concat.js.map","export function isHex(value, { strict = true } = {}) {\n    if (!value)\n        return false;\n    if (typeof value !== 'string')\n        return false;\n    return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith('0x');\n}\n//# sourceMappingURL=isHex.js.map","import { SizeExceedsPaddingSizeError, } from '../../errors/data.js';\nexport function pad(hexOrBytes, { dir, size = 32 } = {}) {\n    if (typeof hexOrBytes === 'string')\n        return padHex(hexOrBytes, { dir, size });\n    return padBytes(hexOrBytes, { dir, size });\n}\nexport function padHex(hex_, { dir, size = 32 } = {}) {\n    if (size === null)\n        return hex_;\n    const hex = hex_.replace('0x', '');\n    if (hex.length > size * 2)\n        throw new SizeExceedsPaddingSizeError({\n            size: Math.ceil(hex.length / 2),\n            targetSize: size,\n            type: 'hex',\n        });\n    return `0x${hex[dir === 'right' ? 'padEnd' : 'padStart'](size * 2, '0')}`;\n}\nexport function padBytes(bytes, { dir, size = 32 } = {}) {\n    if (size === null)\n        return bytes;\n    if (bytes.length > size)\n        throw new SizeExceedsPaddingSizeError({\n            size: bytes.length,\n            targetSize: size,\n            type: 'bytes',\n        });\n    const paddedBytes = new Uint8Array(size);\n    for (let i = 0; i < size; i++) {\n        const padEnd = dir === 'right';\n        paddedBytes[padEnd ? i : size - i - 1] =\n            bytes[padEnd ? i : bytes.length - i - 1];\n    }\n    return paddedBytes;\n}\n//# sourceMappingURL=pad.js.map","import { isHex } from './isHex.js';\n/**\n * @description Retrieves the size of the value (in bytes).\n *\n * @param value The value (hex or byte array) to retrieve the size of.\n * @returns The size of the value (in bytes).\n */\nexport function size(value) {\n    if (isHex(value, { strict: false }))\n        return Math.ceil((value.length - 2) / 2);\n    return value.length;\n}\n//# sourceMappingURL=size.js.map","import { SliceOffsetOutOfBoundsError, } from '../../errors/data.js';\nimport { isHex } from './isHex.js';\nimport { size } from './size.js';\n/**\n * @description Returns a section of the hex or byte array given a start/end bytes offset.\n *\n * @param value The hex or byte array to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function slice(value, start, end, { strict } = {}) {\n    if (isHex(value, { strict: false }))\n        return sliceHex(value, start, end, {\n            strict,\n        });\n    return sliceBytes(value, start, end, {\n        strict,\n    });\n}\nfunction assertStartOffset(value, start) {\n    if (typeof start === 'number' && start > 0 && start > size(value) - 1)\n        throw new SliceOffsetOutOfBoundsError({\n            offset: start,\n            position: 'start',\n            size: size(value),\n        });\n}\nfunction assertEndOffset(value, start, end) {\n    if (typeof start === 'number' &&\n        typeof end === 'number' &&\n        size(value) !== end - start) {\n        throw new SliceOffsetOutOfBoundsError({\n            offset: end,\n            position: 'end',\n            size: size(value),\n        });\n    }\n}\n/**\n * @description Returns a section of the byte array given a start/end bytes offset.\n *\n * @param value The byte array to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function sliceBytes(value_, start, end, { strict } = {}) {\n    assertStartOffset(value_, start);\n    const value = value_.slice(start, end);\n    if (strict)\n        assertEndOffset(value, start, end);\n    return value;\n}\n/**\n * @description Returns a section of the hex value given a start/end bytes offset.\n *\n * @param value The hex value to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function sliceHex(value_, start, end, { strict } = {}) {\n    assertStartOffset(value_, start);\n    const value = `0x${value_\n        .replace('0x', '')\n        .slice((start ?? 0) * 2, (end ?? value_.length) * 2)}`;\n    if (strict)\n        assertEndOffset(value, start, end);\n    return value;\n}\n//# sourceMappingURL=slice.js.map","import { InvalidHexBooleanError, SizeOverflowError, } from '../../errors/encoding.js';\nimport { size as size_ } from '../data/size.js';\nimport { trim } from '../data/trim.js';\nimport { hexToBytes } from './toBytes.js';\nexport function assertSize(hexOrBytes, { size }) {\n    if (size_(hexOrBytes) > size)\n        throw new SizeOverflowError({\n            givenSize: size_(hexOrBytes),\n            maxSize: size,\n        });\n}\n/**\n * Decodes a hex string into a string, number, bigint, boolean, or byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex\n * - Example: https://viem.sh/docs/utilities/fromHex#usage\n *\n * @param hex Hex string to decode.\n * @param toOrOpts Type to convert to or options.\n * @returns Decoded value.\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x1a4', 'number')\n * // 420\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c6421', 'string')\n * // 'Hello world'\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *   size: 32,\n *   to: 'string'\n * })\n * // 'Hello world'\n */\nexport function fromHex(hex, toOrOpts) {\n    const opts = typeof toOrOpts === 'string' ? { to: toOrOpts } : toOrOpts;\n    const to = opts.to;\n    if (to === 'number')\n        return hexToNumber(hex, opts);\n    if (to === 'bigint')\n        return hexToBigInt(hex, opts);\n    if (to === 'string')\n        return hexToString(hex, opts);\n    if (to === 'boolean')\n        return hexToBool(hex, opts);\n    return hexToBytes(hex, opts);\n}\n/**\n * Decodes a hex value into a bigint.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobigint\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns BigInt value.\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x1a4', { signed: true })\n * // 420n\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420n\n */\nexport function hexToBigInt(hex, opts = {}) {\n    const { signed } = opts;\n    if (opts.size)\n        assertSize(hex, { size: opts.size });\n    const value = BigInt(hex);\n    if (!signed)\n        return value;\n    const size = (hex.length - 2) / 2;\n    const max = (1n << (BigInt(size) * 8n - 1n)) - 1n;\n    if (value <= max)\n        return value;\n    return value - BigInt(`0x${'f'.padStart(size * 2, 'f')}`) - 1n;\n}\n/**\n * Decodes a hex value into a boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobool\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Boolean value.\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x01')\n * // true\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x0000000000000000000000000000000000000000000000000000000000000001', { size: 32 })\n * // true\n */\nexport function hexToBool(hex_, opts = {}) {\n    let hex = hex_;\n    if (opts.size) {\n        assertSize(hex, { size: opts.size });\n        hex = trim(hex);\n    }\n    if (trim(hex) === '0x00')\n        return false;\n    if (trim(hex) === '0x01')\n        return true;\n    throw new InvalidHexBooleanError(hex);\n}\n/**\n * Decodes a hex string into a number.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextonumber\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Number value.\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToNumber('0x1a4')\n * // 420\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420\n */\nexport function hexToNumber(hex, opts = {}) {\n    return Number(hexToBigInt(hex, opts));\n}\n/**\n * Decodes a hex value into a UTF-8 string.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextostring\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns String value.\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c6421')\n * // 'Hello world!'\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *  size: 32,\n * })\n * // 'Hello world'\n */\nexport function hexToString(hex, opts = {}) {\n    let bytes = hexToBytes(hex);\n    if (opts.size) {\n        assertSize(bytes, { size: opts.size });\n        bytes = trim(bytes, { dir: 'right' });\n    }\n    return new TextDecoder().decode(bytes);\n}\n//# sourceMappingURL=fromHex.js.map","import { BaseError } from '../../errors/base.js';\nimport { isHex } from '../data/isHex.js';\nimport { pad } from '../data/pad.js';\nimport { assertSize } from './fromHex.js';\nimport { numberToHex, } from './toHex.js';\nconst encoder = /*#__PURE__*/ new TextEncoder();\n/**\n * Encodes a UTF-8 string, hex value, bigint, number or boolean to a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes\n * - Example: https://viem.sh/docs/utilities/toBytes#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes('Hello world')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nexport function toBytes(value, opts = {}) {\n    if (typeof value === 'number' || typeof value === 'bigint')\n        return numberToBytes(value, opts);\n    if (typeof value === 'boolean')\n        return boolToBytes(value, opts);\n    if (isHex(value))\n        return hexToBytes(value, opts);\n    return stringToBytes(value, opts);\n}\n/**\n * Encodes a boolean into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#booltobytes\n *\n * @param value Boolean value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true)\n * // Uint8Array([1])\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true, { size: 32 })\n * // Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\n */\nexport function boolToBytes(value, opts = {}) {\n    const bytes = new Uint8Array(1);\n    bytes[0] = Number(value);\n    if (typeof opts.size === 'number') {\n        assertSize(bytes, { size: opts.size });\n        return pad(bytes, { size: opts.size });\n    }\n    return bytes;\n}\n// We use very optimized technique to convert hex string to byte array\nconst charCodeMap = {\n    zero: 48,\n    nine: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102,\n};\nfunction charCodeToBase16(char) {\n    if (char >= charCodeMap.zero && char <= charCodeMap.nine)\n        return char - charCodeMap.zero;\n    if (char >= charCodeMap.A && char <= charCodeMap.F)\n        return char - (charCodeMap.A - 10);\n    if (char >= charCodeMap.a && char <= charCodeMap.f)\n        return char - (charCodeMap.a - 10);\n    return undefined;\n}\n/**\n * Encodes a hex string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#hextobytes\n *\n * @param hex Hex string to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nexport function hexToBytes(hex_, opts = {}) {\n    let hex = hex_;\n    if (opts.size) {\n        assertSize(hex, { size: opts.size });\n        hex = pad(hex, { dir: 'right', size: opts.size });\n    }\n    let hexString = hex.slice(2);\n    if (hexString.length % 2)\n        hexString = `0${hexString}`;\n    const length = hexString.length / 2;\n    const bytes = new Uint8Array(length);\n    for (let index = 0, j = 0; index < length; index++) {\n        const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j++));\n        const nibbleRight = charCodeToBase16(hexString.charCodeAt(j++));\n        if (nibbleLeft === undefined || nibbleRight === undefined) {\n            throw new BaseError(`Invalid byte sequence (\"${hexString[j - 2]}${hexString[j - 1]}\" in \"${hexString}\").`);\n        }\n        bytes[index] = nibbleLeft * 16 + nibbleRight;\n    }\n    return bytes;\n}\n/**\n * Encodes a number into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#numbertobytes\n *\n * @param value Number to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nexport function numberToBytes(value, opts) {\n    const hex = numberToHex(value, opts);\n    return hexToBytes(hex);\n}\n/**\n * Encodes a UTF-8 string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#stringtobytes\n *\n * @param value String to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33])\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nexport function stringToBytes(value, opts = {}) {\n    const bytes = encoder.encode(value);\n    if (typeof opts.size === 'number') {\n        assertSize(bytes, { size: opts.size });\n        return pad(bytes, { dir: 'right', size: opts.size });\n    }\n    return bytes;\n}\n//# sourceMappingURL=toBytes.js.map","import { IntegerOutOfRangeError, } from '../../errors/encoding.js';\nimport { pad } from '../data/pad.js';\nimport { assertSize } from './fromHex.js';\nconst hexes = /*#__PURE__*/ Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));\n/**\n * Encodes a string, number, bigint, or ByteArray into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex\n * - Example: https://viem.sh/docs/utilities/toHex#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world')\n * // '0x48656c6c6f20776f726c6421'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex(420)\n * // '0x1a4'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world', { size: 32 })\n * // '0x48656c6c6f20776f726c64210000000000000000000000000000000000000000'\n */\nexport function toHex(value, opts = {}) {\n    if (typeof value === 'number' || typeof value === 'bigint')\n        return numberToHex(value, opts);\n    if (typeof value === 'string') {\n        return stringToHex(value, opts);\n    }\n    if (typeof value === 'boolean')\n        return boolToHex(value, opts);\n    return bytesToHex(value, opts);\n}\n/**\n * Encodes a boolean into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#booltohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true)\n * // '0x1'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(false)\n * // '0x0'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true, { size: 32 })\n * // '0x0000000000000000000000000000000000000000000000000000000000000001'\n */\nexport function boolToHex(value, opts = {}) {\n    const hex = `0x${Number(value)}`;\n    if (typeof opts.size === 'number') {\n        assertSize(hex, { size: opts.size });\n        return pad(hex, { size: opts.size });\n    }\n    return hex;\n}\n/**\n * Encodes a bytes array into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#bytestohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]), { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */\nexport function bytesToHex(value, opts = {}) {\n    let string = '';\n    for (let i = 0; i < value.length; i++) {\n        string += hexes[value[i]];\n    }\n    const hex = `0x${string}`;\n    if (typeof opts.size === 'number') {\n        assertSize(hex, { size: opts.size });\n        return pad(hex, { dir: 'right', size: opts.size });\n    }\n    return hex;\n}\n/**\n * Encodes a number or bigint into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#numbertohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420)\n * // '0x1a4'\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420, { size: 32 })\n * // '0x00000000000000000000000000000000000000000000000000000000000001a4'\n */\nexport function numberToHex(value_, opts = {}) {\n    const { signed, size } = opts;\n    const value = BigInt(value_);\n    let maxValue;\n    if (size) {\n        if (signed)\n            maxValue = (1n << (BigInt(size) * 8n - 1n)) - 1n;\n        else\n            maxValue = 2n ** (BigInt(size) * 8n) - 1n;\n    }\n    else if (typeof value_ === 'number') {\n        maxValue = BigInt(Number.MAX_SAFE_INTEGER);\n    }\n    const minValue = typeof maxValue === 'bigint' && signed ? -maxValue - 1n : 0;\n    if ((maxValue && value > maxValue) || value < minValue) {\n        const suffix = typeof value_ === 'bigint' ? 'n' : '';\n        throw new IntegerOutOfRangeError({\n            max: maxValue ? `${maxValue}${suffix}` : undefined,\n            min: `${minValue}${suffix}`,\n            signed,\n            size,\n            value: `${value_}${suffix}`,\n        });\n    }\n    const hex = `0x${(signed && value < 0\n        ? (1n << BigInt(size * 8)) + BigInt(value)\n        : value).toString(16)}`;\n    if (size)\n        return pad(hex, { size });\n    return hex;\n}\nconst encoder = /*#__PURE__*/ new TextEncoder();\n/**\n * Encodes a UTF-8 string into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#stringtohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!')\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!', { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */\nexport function stringToHex(value_, opts = {}) {\n    const value = encoder.encode(value_);\n    return bytesToHex(value, opts);\n}\n//# sourceMappingURL=toHex.js.map","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapXOFConstructorWithOpts, } from './utils.js';\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        exists(this, false);\n        bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map","import { keccak_256 } from '@noble/hashes/sha3';\nimport { isHex } from '../data/isHex.js';\nimport { toBytes } from '../encoding/toBytes.js';\nimport { toHex } from '../encoding/toHex.js';\nexport function keccak256(value, to_) {\n    const to = to_ || 'hex';\n    const bytes = keccak_256(isHex(value, { strict: false }) ? toBytes(value) : value);\n    if (to === 'bytes')\n        return bytes;\n    return toHex(bytes);\n}\n//# sourceMappingURL=keccak256.js.map","function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nconst u8a = (a) => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!u8a(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map"],"names":["InvalidAddressError","constructor","address","super","metaMessages","Object","defineProperty","this","enumerable","configurable","writable","value","BaseError","Error","shortMessage","args","details","cause","message","docsPath","docsBaseUrl","docsSlug","version","join","walk","fn","err","SliceOffsetOutOfBoundsError","offset","position","size","SizeExceedsPaddingSizeError","targetSize","type","charAt","toUpperCase","slice","toLowerCase","IntegerOutOfRangeError","max","min","signed","SizeOverflowError","givenSize","maxSize","LruMap","Map","set","key","delete","keys","next","checksumAddressCache","checksumAddress","address_","chainId","has","get","hexAddress","substring","hash","keccak256","length","split","i","result","addressRegex","isAddressCache","options","strict","cacheKey","test","concat","values","concatHex","arr","Uint8Array","concatBytes","reduce","acc","x","replace","isHex","startsWith","pad","hexOrBytes","dir","padHex","bytes","paddedBytes","padEnd","padBytes","hex_","hex","Math","ceil","start","end","value_","assertStartOffset","assertEndOffset","sliceHex","sliceBytes","assertSize","hexToBigInt","opts","BigInt","padStart","hexToNumber","Number","encoder","TextEncoder","toBytes","hexToBytes","numberToBytes","boolToBytes","stringToBytes","charCodeMap","zero","nine","A","F","a","f","charCodeToBase16","char","hexString","index","j","nibbleLeft","charCodeAt","nibbleRight","undefined","encode","hexes","Array","from","_v","toString","toHex","numberToHex","stringToHex","boolToHex","bytesToHex","string","maxValue","MAX_SAFE_INTEGER","minValue","suffix","U32_MASK64","_32n","fromBig","n","le","h","l","lst","Ah","Uint32Array","Al","rotlSH","s","rotlSL","rotlBH","rotlBL","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","_1n","_2n","_7n","_256n","_0x71n","round","R","y","push","t","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","blockLen","outputLen","enableXOF","rounds","pos","posOut","finished","destroyed","state","state32","keccak","B","idx1","idx0","B0","B1","Th","Tl","curH","curL","shift","PI","fill","keccakP","update","data","len","take","finish","writeInto","out","bufferOut","subarray","xofInto","xof","digestInto","destroy","digest","_cloneInto","to","gen","keccak_256","to_","number","isSafeInteger","b","lengths","includes","exists","instance","checkFinished","output","u8a","u32","buffer","byteOffset","floor","byteLength","createView","DataView","rotr","word","str","utf8ToBytes","Hash","clone","wrapConstructor","hashCons","hashC","msg","tmp","create"],"sourceRoot":""}