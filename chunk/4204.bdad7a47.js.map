{"version":3,"file":"chunk/4204.bdad7a47.js","mappings":"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","sources":["webpack://@snx-v3/liquidity/../components/ContractError/ContractError.tsx","webpack://@snx-v3/liquidity/../lib/useWrapEth/useWrapEth.ts","webpack://@snx-v3/liquidity/../components/DepositModal/DepositMachine.ts","webpack://@snx-v3/liquidity/../components/DepositModal/DepositModal.tsx","webpack://@snx-v3/liquidity/../lib/useDeposit/useDeposit.tsx","webpack://@snx-v3/liquidity/../lib/useDepositBaseAndromeda/useDepositBaseAndromeda.tsx","webpack://@snx-v3/liquidity/../components/DepositModal/index.ts","webpack://@snx-v3/liquidity/../components/Multistep/StepIcon.tsx","webpack://@snx-v3/liquidity/../components/Multistep/statusColor.ts","webpack://@snx-v3/liquidity/../components/Multistep/Step.tsx","webpack://@snx-v3/liquidity/../components/Multistep/Multistep.tsx","webpack://@snx-v3/liquidity/../lib/useContractErrorParser/useContractErrorParser.ts"],"sourcesContent":["import React from 'react';\nimport { Button, Collapse, Text } from '@chakra-ui/react';\nimport format from 'date-fns/format';\nimport { ContractErrorType } from '@snx-v3/useContractErrorParser';\n\nconst defaultOpen = window?.localStorage?.CONTRACT_ERROR_OPEN === 'true';\n\nexport function ContractError({ contractError }: { contractError: ContractErrorType }) {\n  const [isOpen, setIsOpen] = React.useState(defaultOpen);\n\n  return (\n    <>\n      {!isOpen ? (\n        <Button\n          variant=\"link\"\n          onClick={() => setIsOpen(true)}\n          color=\"inherit\"\n          fontWeight=\"normal\"\n          fontStyle=\"italic\"\n        >\n          details...\n        </Button>\n      ) : null}\n      <Collapse in={isOpen} animateOpacity>\n        <Text fontStyle=\"italic\" fontSize=\"0.8em\">\n          {contractError.name}\n        </Text>\n        <Text whiteSpace=\"pre\" fontSize=\"0.8em\" fontStyle=\"italic\" pl=\"0.5em\">\n          {Object.entries(contractError.args)\n            .map(\n              ([key, val]) =>\n                `${key}: ${val instanceof Date ? format(val, 'yyyy-MM-dd HH:mm:ss') : val}`\n            )\n            .join('\\n')}\n        </Text>\n      </Collapse>\n    </>\n  );\n}\n","import { useSigner } from '@snx-v3/useBlockchain';\nimport { useCollateralType } from '@snx-v3/useCollateralTypes';\nimport { useEthBalance } from '@snx-v3/useEthBalance';\nimport { useTokenBalance } from '@snx-v3/useTokenBalance';\nimport { Contract } from 'ethers';\nimport { useMutation } from '@tanstack/react-query';\nimport Wei from '@synthetixio/wei';\nimport { useCallback } from 'react';\n\nconst minimalWETHABI = ['function deposit() payable', 'function withdraw(uint256 wad)'];\n\nexport const useWrapEth = () => {\n  const signer = useSigner();\n\n  const { data: ethCollateral } = useCollateralType('WETH');\n  const { data: ethBalance, refetch: refetchETHBalance } = useEthBalance();\n  const { data: wethBalance, refetch: refetchWETHBalance } = useTokenBalance(\n    ethCollateral?.tokenAddress\n  );\n\n  const { mutateAsync, isPending } = useMutation({\n    mutationFn: async (amount: Wei) => {\n      if (!ethCollateral || !signer) return;\n      const contract = new Contract(ethCollateral?.tokenAddress, minimalWETHABI, signer);\n      const txn = await contract.deposit({ value: amount.toBN() });\n      await txn.wait();\n    },\n  });\n\n  const exec = useCallback(\n    async (amount: Wei) => {\n      if (!ethBalance) return;\n      if (ethBalance.lt(amount)) return;\n\n      await mutateAsync(amount);\n      refetchETHBalance();\n      refetchWETHBalance();\n    },\n    [ethBalance, mutateAsync, refetchETHBalance, refetchWETHBalance]\n  );\n\n  return {\n    exec,\n    isLoading: isPending,\n    wethBalance,\n    ethBalance,\n  };\n};\n\nexport const useUnWrapEth = () => {\n  const signer = useSigner();\n\n  const { data: ethCollateral } = useCollateralType('WETH');\n  const { data: ethBalance, refetch: refetchETHBalance } = useEthBalance();\n  const { data: wethBalance, refetch: refetchWETHBalance } = useTokenBalance(\n    ethCollateral?.tokenAddress\n  );\n\n  const { mutateAsync, isPending } = useMutation({\n    mutationFn: async (amount: Wei) => {\n      if (!ethCollateral || !signer) return;\n      const contract = new Contract(ethCollateral?.tokenAddress, minimalWETHABI, signer);\n      const txn = await contract.withdraw(amount.toBN());\n      await txn.wait();\n    },\n  });\n\n  const exec = useCallback(\n    async (amount: Wei) => {\n      if (!wethBalance) return;\n      if (wethBalance.lt(amount)) return;\n      await mutateAsync(amount);\n      await Promise.all([refetchETHBalance(), refetchWETHBalance()]);\n    },\n    [mutateAsync, refetchETHBalance, refetchWETHBalance, wethBalance]\n  );\n\n  return {\n    exec,\n    isLoading: isPending,\n    wethBalance,\n    ethBalance,\n  };\n};\n","import { Wei, wei } from '@synthetixio/wei';\nimport { createMachine, assign } from 'xstate';\n\nexport const Events = {\n  SET_REQUIRE_APPROVAL: 'SET_REQUIRE_APPROVAL',\n  SET_WRAP_AMOUNT: 'SET_WRAP_AMOUNT',\n  SET_INFINITE_APPROVAL: 'SET_INFINITE_APPROVAL',\n  RETRY: 'RETRY',\n  RUN: 'RUN',\n  SUCCESS: 'SUCCESS',\n  FAILURE: 'FAILURE',\n  RESET: 'RESET',\n} as const;\n\nexport const State = {\n  idle: 'idle',\n  wrap: 'wrap',\n  approve: 'approve',\n  deposit: 'deposit',\n  failed: 'failed',\n  success: 'success',\n} as const;\n\nconst FailedSteps = {\n  [State.approve]: State.approve,\n  [State.wrap]: State.wrap,\n  [State.deposit]: State.deposit,\n} as const;\n\nexport const ServiceNames = {\n  wrapEth: 'wrapEth',\n  approveWETH: 'approveWETH',\n  executeDeposit: 'executeDeposit',\n} as const;\n\ntype Context = {\n  error: {\n    error: Error;\n    step: keyof typeof FailedSteps;\n  } | null;\n  requireApproval: boolean;\n  wrapAmount: Wei;\n  infiniteApproval: boolean;\n};\n\ntype EventNamesType = typeof Events;\n\ntype DepositEvents =\n  | { type: EventNamesType['SET_REQUIRE_APPROVAL']; requireApproval: boolean }\n  | { type: EventNamesType['SET_WRAP_AMOUNT']; wrapAmount: Wei }\n  | { type: EventNamesType['SET_INFINITE_APPROVAL']; infiniteApproval: boolean }\n  | { type: EventNamesType['RETRY'] }\n  | { type: EventNamesType['RUN'] }\n  | { type: EventNamesType['SUCCESS'] }\n  | { type: EventNamesType['FAILURE'] }\n  | { type: EventNamesType['RESET'] };\n\ntype StateType = typeof State;\ntype MachineState =\n  | {\n      value: StateType['idle'];\n      context: Context & { error: null };\n    }\n  | {\n      value: StateType['wrap'];\n      context: Context & { error: null };\n    }\n  | {\n      value: StateType['approve'];\n      context: Context & { error: null };\n    }\n  | {\n      value: StateType['deposit'];\n      context: Context & { error: null };\n    }\n  | {\n      value: StateType['failed'];\n      context: Context & { error: { error: Error; step: keyof typeof FailedSteps } };\n    }\n  | {\n      value: StateType['success'];\n      context: Context & {\n        error: null;\n      };\n    };\n\nconst initialContext = {\n  wrapAmount: wei(0),\n  error: null,\n  requireApproval: false,\n  infiniteApproval: false,\n};\n\nexport const DepositMachine = createMachine<Context, DepositEvents, MachineState>({\n  id: 'DepositMachine',\n  initial: State.idle,\n  predictableActionArguments: true,\n  context: initialContext,\n  on: {\n    [Events.RUN]: {\n      target: State.deposit,\n      actions: assign({\n        wrapAmount: (_) => initialContext.wrapAmount,\n        error: (_) => initialContext.error,\n        requireApproval: (_) => initialContext.requireApproval,\n        infiniteApproval: (_) => initialContext.infiniteApproval,\n      }),\n    },\n    [Events.SET_REQUIRE_APPROVAL]: {\n      actions: assign({ requireApproval: (_context, event) => event.requireApproval }),\n    },\n    [Events.SET_WRAP_AMOUNT]: {\n      actions: assign({ wrapAmount: (_context, event) => event.wrapAmount }),\n    },\n    [Events.SET_INFINITE_APPROVAL]: {\n      actions: assign({ infiniteApproval: (_context, event) => event.infiniteApproval }),\n    },\n  },\n  states: {\n    [State.idle]: {\n      on: {\n        [Events.RUN]: [\n          { target: State.wrap, cond: (context) => context.wrapAmount.gt(0) },\n          { target: State.approve, cond: (context) => context.requireApproval },\n          { target: State.deposit },\n        ],\n      },\n    },\n    [State.wrap]: {\n      invoke: {\n        src: ServiceNames.wrapEth,\n        onError: {\n          target: State.failed,\n          actions: assign({\n            error: (_context, event) => ({ error: event.data, step: FailedSteps.wrap }),\n          }),\n        },\n        onDone: [\n          { target: State.approve, cond: (context) => context.requireApproval },\n          { target: State.deposit },\n        ],\n      },\n    },\n    [State.approve]: {\n      invoke: {\n        src: ServiceNames.approveWETH,\n        onDone: {\n          target: State.deposit,\n        },\n        onError: {\n          target: State.failed,\n          actions: assign({\n            error: (_context, event) => ({ error: event.data, step: FailedSteps.approve }),\n          }),\n        },\n      },\n    },\n    [State.deposit]: {\n      invoke: {\n        src: ServiceNames.executeDeposit,\n        onDone: {\n          target: State.success,\n        },\n        onError: {\n          target: State.failed,\n          actions: assign({\n            error: (_context, event) => ({ error: event.data, step: FailedSteps.deposit }),\n          }),\n        },\n      },\n    },\n    [State.failed]: {\n      on: {\n        [Events.RETRY]: [\n          {\n            target: State.approve,\n            cond: (c) => c.error?.step === FailedSteps.approve,\n            actions: assign({ error: (_) => null }),\n          },\n          {\n            target: State.wrap,\n            cond: (c) => c.error?.step === FailedSteps.wrap,\n            actions: assign({ error: (_) => null }),\n          },\n          {\n            target: State.deposit,\n            cond: (c) => c.error?.step === FailedSteps.deposit,\n            actions: assign({ error: (_) => null }),\n          },\n        ],\n      },\n    },\n    [State.success]: {},\n  },\n});\n","import {\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n  useToast,\n} from '@chakra-ui/react';\nimport { FC, useCallback, useEffect, useMemo } from 'react';\nimport { CollateralType, useCollateralType } from '@snx-v3/useCollateralTypes';\nimport { Amount } from '@snx-v3/Amount';\nimport { utils } from 'ethers';\nimport { generatePath, useNavigate, useLocation } from 'react-router-dom';\nimport { useApprove } from '@snx-v3/useApprove';\nimport { useWrapEth } from '@snx-v3/useWrapEth';\nimport { Multistep } from '@snx-v3/Multistep';\nimport { Wei, wei } from '@synthetixio/wei';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { useDeposit } from '@snx-v3/useDeposit';\nimport { useParams } from '@snx-v3/useParams';\nimport { DepositMachine, Events, ServiceNames, State } from './DepositMachine';\nimport { useMachine } from '@xstate/react';\nimport type { StateFrom } from 'xstate';\nimport { useContractErrorParser } from '@snx-v3/useContractErrorParser';\nimport { ContractError } from '@snx-v3/ContractError';\nimport { usePool } from '@snx-v3/usePools';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useNetwork } from '@snx-v3/useBlockchain';\nimport { isBaseAndromeda } from '@snx-v3/isBaseAndromeda';\nimport { useDepositBaseAndromeda } from '../../lib/useDepositBaseAndromeda';\nimport { useSpotMarketProxy } from '../../lib/useSpotMarketProxy';\nimport { useGetUSDTokens } from '@snx-v3/useGetUSDTokens';\n\nexport const DepositModalUi: FC<{\n  collateralChange: Wei;\n  isOpen: boolean;\n  onClose: () => void;\n  collateralType?: CollateralType;\n  state: StateFrom<typeof DepositMachine>;\n  setInfiniteApproval: (x: boolean) => void;\n  onSubmit: () => void;\n  availableCollateral: Wei;\n  poolName: string;\n}> = ({\n  collateralChange,\n  isOpen,\n  onClose,\n  collateralType,\n  setInfiniteApproval,\n  onSubmit,\n  state,\n  availableCollateral,\n  poolName,\n}) => {\n  const wrapAmount = state.context.wrapAmount;\n  const infiniteApproval = state.context.infiniteApproval;\n  const requireApproval = state.context.requireApproval;\n  const error = state.context.error;\n  const isProcessing =\n    state.matches(State.approve) || state.matches(State.deposit) || state.matches(State.wrap);\n\n  const isWETH = collateralType?.symbol === 'WETH';\n\n  const stepNumbers = {\n    wrap: isWETH ? 1 : 0,\n    approve: isWETH ? 2 : 1,\n    deposit: isWETH ? 3 : 2,\n  };\n\n  return (\n    <Modal size=\"lg\" isOpen={isOpen} onClose={onClose} closeOnOverlayClick={false}>\n      <ModalOverlay />\n      <ModalContent bg=\"black\" color=\"white\" data-cy=\"deposit-modal\">\n        <ModalHeader>Complete this action</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Text mb=\"2\">Please execute the following transactions:</Text>\n          {isWETH ? (\n            <Multistep\n              step={stepNumbers.wrap}\n              title=\"Wrap\"\n              subtitle={\n                wrapAmount.eq(0) ? (\n                  <Text as=\"div\">\n                    <Amount value={collateralChange} suffix={` ${collateralType?.symbol}`} /> from\n                    balance will be used.\n                  </Text>\n                ) : (\n                  <Text as=\"div\">\n                    You must wrap additional <Amount value={wrapAmount} suffix=\" ETH\" /> before\n                    depositing.\n                  </Text>\n                )\n              }\n              status={{\n                failed: error?.step === State.wrap,\n                disabled: collateralType?.symbol !== 'WETH',\n                success: wrapAmount.eq(0) || state.matches(State.success),\n                loading: state.matches(State.wrap) && !error,\n              }}\n            />\n          ) : null}\n\n          <Multistep\n            step={stepNumbers.approve}\n            title={`Approve ${collateralType?.symbol} transfer`}\n            status={{\n              failed: error?.step === State.approve,\n              success: !requireApproval || state.matches(State.success),\n              loading: state.matches(State.approve) && !error,\n            }}\n            checkboxLabel={`Approve unlimited ${collateralType?.symbol} transfers to Synthetix.`}\n            checkboxProps={{\n              isChecked: infiniteApproval,\n              onChange: (e) => setInfiniteApproval(e.target.checked),\n            }}\n          />\n\n          <Multistep\n            step={stepNumbers.deposit}\n            title={`Delegate ${collateralType?.symbol}`}\n            subtitle={\n              <>\n                {state.matches(State.success) ? (\n                  <Text>\n                    <Amount value={collateralChange} suffix={` ${collateralType?.symbol}`} />{' '}\n                    delegated to {poolName}.\n                  </Text>\n                ) : (\n                  <>\n                    {availableCollateral && availableCollateral.gt(wei(0)) ? (\n                      <>\n                        {availableCollateral.gte(collateralChange) ? (\n                          <Text>\n                            This will delegate{' '}\n                            <Amount\n                              value={collateralChange}\n                              suffix={` ${collateralType?.symbol}`}\n                            />{' '}\n                            to {poolName}.\n                          </Text>\n                        ) : (\n                          <>\n                            <Text>\n                              This will delegate{' '}\n                              <Amount\n                                value={availableCollateral}\n                                suffix={` ${collateralType?.symbol}`}\n                              />{' '}\n                              to {poolName}.\n                            </Text>\n                            <Text>\n                              An additional{' '}\n                              <Amount\n                                value={collateralChange.sub(availableCollateral)}\n                                suffix={` ${collateralType?.symbol}`}\n                              />{' '}\n                              will be deposited and delegated from your wallet.\n                            </Text>\n                          </>\n                        )}\n                      </>\n                    ) : (\n                      <Text>\n                        This will deposit and delegate{' '}\n                        <Amount value={collateralChange} suffix={` ${collateralType?.symbol}`} /> to{' '}\n                        {poolName}.\n                      </Text>\n                    )}\n                  </>\n                )}\n              </>\n            }\n            status={{\n              failed: error?.step === State.deposit,\n              disabled: state.matches(State.success) && requireApproval,\n              success: state.matches(State.success),\n              loading: state.matches(State.deposit) && !error,\n            }}\n          />\n          <Button\n            isDisabled={isProcessing}\n            onClick={onSubmit}\n            width=\"100%\"\n            my=\"4\"\n            data-cy=\"deposit-confirm-button\"\n          >\n            {(() => {\n              switch (true) {\n                case Boolean(error):\n                  return 'Retry';\n                case isProcessing:\n                  return 'Processing...';\n                case state.matches(State.success):\n                  return 'Done';\n                default:\n                  return 'Start';\n              }\n            })()}\n          </Button>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport type DepositModalProps = FC<{\n  collateralChange: Wei;\n  currentCollateral: Wei;\n  availableCollateral: Wei;\n  isOpen: boolean;\n  onClose: () => void;\n}>;\n\nexport const DepositModal: DepositModalProps = ({\n  onClose,\n  isOpen,\n  collateralChange,\n  currentCollateral,\n  availableCollateral,\n}) => {\n  const navigate = useNavigate();\n  const { collateralSymbol, poolId, accountId } = useParams();\n  const queryClient = useQueryClient();\n  const { network } = useNetwork();\n\n  const { data: CoreProxy } = useCoreProxy();\n  const { data: SpotProxy } = useSpotMarketProxy();\n  const { data: usdTokens } = useGetUSDTokens();\n  const { data: collateralType } = useCollateralType(collateralSymbol);\n\n  const collateralAddress = isBaseAndromeda(network?.id, network?.preset)\n    ? usdTokens?.USDC\n    : collateralType?.tokenAddress;\n\n  const collateralNeeded = collateralChange.sub(availableCollateral);\n\n  const { approve, requireApproval } = useApprove({\n    contractAddress: collateralAddress,\n    amount: collateralNeeded.gt(0)\n      ? isBaseAndromeda(network?.id, network?.preset)\n        ? //Base USDC is 6 decimals\n          utils.parseUnits(collateralNeeded.toString(), 6)\n        : collateralNeeded.toBN()\n      : 0,\n    spender: isBaseAndromeda(network?.id, network?.preset)\n      ? SpotProxy?.address\n      : CoreProxy?.address,\n  });\n\n  const toast = useToast({ isClosable: true, duration: 9000 });\n\n  // TODO: Update logic on new account id\n  const newAccountId = useMemo(() => `${Math.floor(Math.random() * 10000000000)}`, []);\n\n  const { exec: wrapEth, wethBalance } = useWrapEth();\n\n  const wrapAmount =\n    collateralType?.symbol === 'WETH' && collateralChange.gt(wethBalance || 0)\n      ? collateralChange.sub(wethBalance || 0)\n      : wei(0);\n\n  const { data: pool } = usePool(poolId);\n\n  const { exec: execDeposit } = useDeposit({\n    accountId: accountId,\n    newAccountId,\n    poolId: poolId,\n    collateralTypeAddress: collateralAddress,\n    collateralChange,\n    currentCollateral,\n    availableCollateral: availableCollateral || wei(0),\n  });\n\n  const { exec: depositBaseAndromeda } = useDepositBaseAndromeda({\n    accountId,\n    newAccountId,\n    poolId,\n    collateralTypeAddress: collateralAddress,\n    collateralChange,\n    currentCollateral,\n    availableCollateral: availableCollateral || wei(0),\n  });\n\n  const errorParserCoreProxy = useContractErrorParser(CoreProxy);\n\n  const [state, send] = useMachine(DepositMachine, {\n    services: {\n      [ServiceNames.wrapEth]: async () => {\n        try {\n          await wrapEth(state.context.wrapAmount);\n        } catch (error: any) {\n          const contractError = errorParserCoreProxy(error);\n          if (contractError) {\n            console.error(new Error(contractError.name), contractError);\n          }\n          toast.closeAll();\n          toast({\n            title: 'Wrapping ETH failed',\n            description: contractError ? (\n              <ContractError contractError={contractError} />\n            ) : (\n              'Please try again.'\n            ),\n            status: 'error',\n          });\n          throw Error('Wrapping failed', { cause: error });\n        }\n      },\n      [ServiceNames.approveWETH]: async () => {\n        try {\n          toast({\n            title: 'Approve collateral for transfer',\n            description: accountId\n              ? 'The next transaction will delegate this collateral.'\n              : 'The next transaction will create your account and and delegate this collateral',\n            status: 'info',\n          });\n\n          await approve(Boolean(state.context.infiniteApproval));\n        } catch (error: any) {\n          const contractError = errorParserCoreProxy(error);\n          if (contractError) {\n            console.error(new Error(contractError.name), contractError);\n          }\n          toast.closeAll();\n          toast({\n            title: 'Approval failed',\n            description: contractError ? (\n              <ContractError contractError={contractError} />\n            ) : (\n              'Please try again.'\n            ),\n            status: 'error',\n          });\n          throw Error('Approve failed', { cause: error });\n        }\n      },\n      [ServiceNames.executeDeposit]: async () => {\n        try {\n          toast.closeAll();\n          toast({\n            title: Boolean(accountId)\n              ? 'Delegating your collateral'\n              : 'Creating your account and depositing collateral',\n            description: '',\n          });\n          if (isBaseAndromeda(network?.id, network?.preset)) {\n            await depositBaseAndromeda();\n          } else {\n            await execDeposit();\n          }\n\n          await Promise.all([\n            queryClient.invalidateQueries({\n              queryKey: [`${network?.id}-${network?.preset}`, 'EthBalance'],\n            }),\n            queryClient.invalidateQueries({\n              queryKey: [`${network?.id}-${network?.preset}`, 'LiquidityPosition'],\n            }),\n            collateralType?.symbol === 'SNX'\n              ? queryClient.invalidateQueries({\n                  queryKey: [`${network?.id}-${network?.preset}`, 'TransferableSynthetix'],\n                })\n              : Promise.resolve(),\n            queryClient.invalidateQueries({\n              queryKey: [`${network?.id}-${network?.preset}`, 'Allowance'],\n            }),\n            queryClient.invalidateQueries({\n              queryKey: [`${network?.id}-${network?.preset}`, 'LiquidityPositions'],\n            }),\n            !accountId\n              ? queryClient.invalidateQueries({\n                  queryKey: [`${network?.id}-${network?.preset}`, 'Accounts'],\n                })\n              : Promise.resolve(),\n          ]);\n\n          toast.closeAll();\n          toast({\n            title: 'Success',\n            description: 'Your delegated collateral amount has been updated.',\n            status: 'success',\n            duration: 5000,\n          });\n        } catch (error: any) {\n          const contractError = errorParserCoreProxy(error);\n          if (contractError) {\n            console.error(new Error(contractError.name), contractError);\n          }\n          toast({\n            title: 'Could not complete delegating collateral',\n            description: contractError ? (\n              <ContractError contractError={contractError} />\n            ) : (\n              'Please try again.'\n            ),\n            status: 'error',\n          });\n          throw Error('Delegate collateral failed', { cause: error });\n        }\n      },\n    },\n  });\n\n  const wrapAmountString = wrapAmount.toString();\n  const isSuccessOrDeposit = state.matches(State.success) || state.matches(State.deposit);\n\n  useEffect(() => {\n    if (isSuccessOrDeposit) {\n      // We do this to ensure the success state displays the wrap amount used before deposit\n      return;\n    }\n    send(Events.SET_WRAP_AMOUNT, { wrapAmount: wei(wrapAmountString) });\n  }, [wrapAmountString, send, isSuccessOrDeposit]);\n\n  useEffect(() => {\n    send(Events.SET_REQUIRE_APPROVAL, { requireApproval });\n  }, [requireApproval, send]);\n\n  const location = useLocation();\n\n  const handleClose = useCallback(() => {\n    const isSuccess = state.matches(State.success);\n\n    if (isSuccess && poolId && collateralType?.symbol) {\n      send(Events.RESET);\n      onClose();\n      navigate({\n        pathname: generatePath('/positions/:collateralType/:poolId', {\n          collateralType: collateralType.symbol,\n          poolId,\n        }),\n        search: location.search,\n      });\n    }\n    send(Events.RESET);\n    onClose();\n  }, [location.search, send, onClose, state, poolId, collateralType?.symbol, navigate]);\n\n  const onSubmit = useCallback(async () => {\n    if (state.matches(State.success)) {\n      handleClose();\n      return;\n    }\n    if (state.context.error) {\n      send(Events.RETRY);\n      return;\n    }\n    send(Events.RUN);\n  }, [handleClose, send, state]);\n\n  return (\n    <DepositModalUi\n      collateralChange={collateralChange}\n      isOpen={isOpen}\n      onClose={onClose}\n      collateralType={collateralType}\n      state={state}\n      setInfiniteApproval={(infiniteApproval) => {\n        send(Events.SET_INFINITE_APPROVAL, { infiniteApproval });\n      }}\n      onSubmit={onSubmit}\n      poolName={pool?.name || ''}\n      availableCollateral={availableCollateral || wei(0)}\n    />\n  );\n};\n","import { useReducer } from 'react';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { useMutation } from '@tanstack/react-query';\nimport { useNetwork, useProvider, useSigner } from '@snx-v3/useBlockchain';\nimport { initialState, reducer } from '@snx-v3/txnReducer';\nimport Wei, { wei } from '@synthetixio/wei';\nimport { BigNumber } from 'ethers';\n\nimport { formatGasPriceForTransaction } from '@snx-v3/useGasOptions';\nimport { getGasPrice } from '@snx-v3/useGasPrice';\nimport { useGasSpeed } from '@snx-v3/useGasSpeed';\nimport { withERC7412 } from '@snx-v3/withERC7412';\nimport { notNil } from '@snx-v3/tsHelpers';\nimport { useAllCollateralPriceIds } from '@snx-v3/useAllCollateralPriceIds';\nimport { fetchPriceUpdates, priceUpdatesToPopulatedTx } from '@snx-v3/fetchPythPrices';\n\nexport const useDeposit = ({\n  accountId,\n  newAccountId,\n  poolId,\n  collateralTypeAddress,\n  collateralChange,\n  currentCollateral,\n  availableCollateral,\n}: {\n  accountId?: string;\n  newAccountId: string;\n  poolId?: string;\n  collateralTypeAddress?: string;\n  currentCollateral: Wei;\n  availableCollateral?: Wei;\n  collateralChange: Wei;\n}) => {\n  const [txnState, dispatch] = useReducer(reducer, initialState);\n  const { data: CoreProxy } = useCoreProxy();\n  const { data: collateralPriceUpdates } = useAllCollateralPriceIds();\n\n  const { gasSpeed } = useGasSpeed();\n\n  const { network } = useNetwork();\n  const signer = useSigner();\n  const provider = useProvider();\n\n  const mutation = useMutation({\n    mutationFn: async () => {\n      if (\n        !(\n          network &&\n          provider &&\n          signer &&\n          CoreProxy &&\n          poolId &&\n          collateralTypeAddress &&\n          availableCollateral &&\n          collateralPriceUpdates\n        )\n      ) {\n        return;\n      }\n      if (collateralChange.eq(0)) return;\n\n      try {\n        dispatch({ type: 'prompting' });\n        const walletAddress = await signer.getAddress();\n        const id = accountId ?? newAccountId;\n\n        // create account only when no account exists\n        const createAccount = accountId\n          ? undefined\n          : CoreProxy.populateTransaction['createAccount(uint128)'](BigNumber.from(id));\n\n        // optionally deposit if available collateral not enough\n        const deposit = availableCollateral.gte(collateralChange)\n          ? undefined\n          : CoreProxy.populateTransaction.deposit(\n              BigNumber.from(id),\n              collateralTypeAddress,\n              collateralChange.sub(availableCollateral).toBN() // only deposit what's needed\n            );\n        const delegate = CoreProxy.populateTransaction.delegateCollateral(\n          BigNumber.from(id),\n          BigNumber.from(poolId),\n          collateralTypeAddress,\n          currentCollateral.add(collateralChange).toBN(),\n          wei(1).toBN()\n        );\n        const callsPromise = Promise.all([createAccount, deposit, delegate].filter(notNil));\n        const collateralPriceCallsPromise = fetchPriceUpdates(\n          collateralPriceUpdates,\n          network?.isTestnet\n        ).then((signedData) =>\n          priceUpdatesToPopulatedTx(walletAddress, collateralPriceUpdates, signedData)\n        );\n        const [calls, gasPrices, collateralPriceCalls] = await Promise.all([\n          callsPromise,\n          getGasPrice({ provider }),\n          collateralPriceCallsPromise,\n        ]);\n        const allCalls = collateralPriceCalls.concat(calls);\n\n        const erc7412Tx = await withERC7412(network, allCalls, 'useDeposit', CoreProxy.interface);\n\n        const gasOptionsForTransaction = formatGasPriceForTransaction({\n          gasLimit: erc7412Tx.gasLimit,\n          gasPrices,\n          gasSpeed,\n        });\n\n        const txn = await signer.sendTransaction({ ...erc7412Tx, ...gasOptionsForTransaction });\n        dispatch({ type: 'pending', payload: { txnHash: txn.hash } });\n\n        await txn.wait();\n        dispatch({ type: 'success' });\n      } catch (error: any) {\n        dispatch({ type: 'error', payload: { error } });\n        throw error;\n      }\n    },\n  });\n  return {\n    mutation,\n    txnState,\n    settle: () => dispatch({ type: 'settled' }),\n    isLoading: mutation.isPending,\n    exec: mutation.mutateAsync,\n  };\n};\n","import { useReducer } from 'react';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { useMutation } from '@tanstack/react-query';\nimport { useNetwork, useProvider, useSigner } from '@snx-v3/useBlockchain';\nimport { initialState, reducer } from '@snx-v3/txnReducer';\nimport Wei, { wei } from '@synthetixio/wei';\nimport { BigNumber, ethers } from 'ethers';\nimport { formatGasPriceForTransaction } from '@snx-v3/useGasOptions';\nimport { getGasPrice } from '@snx-v3/useGasPrice';\nimport { useGasSpeed } from '@snx-v3/useGasSpeed';\nimport { withERC7412 } from '@snx-v3/withERC7412';\nimport { notNil } from '@snx-v3/tsHelpers';\nimport { useSpotMarketProxy } from '../useSpotMarketProxy';\nimport { parseUnits } from '@snx-v3/format';\nimport { USDC_BASE_MARKET } from '@snx-v3/isBaseAndromeda';\nimport { approveAbi } from '@snx-v3/useApprove';\nimport { useCollateralPriceUpdates } from '../useCollateralPriceUpdates';\nimport { useGetUSDTokens } from '@snx-v3/useGetUSDTokens';\n\nexport const useDepositBaseAndromeda = ({\n  accountId,\n  newAccountId,\n  poolId,\n  collateralTypeAddress,\n  collateralChange,\n  currentCollateral,\n  availableCollateral,\n}: {\n  accountId?: string;\n  newAccountId: string;\n  poolId?: string;\n  collateralTypeAddress?: string;\n  currentCollateral: Wei;\n  availableCollateral?: Wei;\n  collateralChange: Wei;\n}) => {\n  const [txnState, dispatch] = useReducer(reducer, initialState);\n  const { data: CoreProxy } = useCoreProxy();\n  const { data: SpotMarketProxy } = useSpotMarketProxy();\n  const { data: priceUpdateTx } = useCollateralPriceUpdates();\n  const { data: usdTokens } = useGetUSDTokens();\n\n  const { gasSpeed } = useGasSpeed();\n\n  const { network } = useNetwork();\n  const signer = useSigner();\n  const provider = useProvider();\n\n  const mutation = useMutation({\n    mutationFn: async () => {\n      if (\n        !(\n          network &&\n          provider &&\n          signer &&\n          CoreProxy &&\n          SpotMarketProxy &&\n          poolId &&\n          collateralTypeAddress &&\n          availableCollateral &&\n          usdTokens?.sUSD\n        )\n      ) {\n        return;\n      }\n      if (collateralChange.eq(0)) return;\n\n      try {\n        dispatch({ type: 'prompting' });\n        const id = accountId ?? newAccountId;\n\n        // create account only when no account exists\n        const createAccount = accountId\n          ? undefined\n          : CoreProxy.populateTransaction['createAccount(uint128)'](BigNumber.from(id));\n\n        const amount = collateralChange.sub(availableCollateral);\n        const usdcAmount = amount.gt(0) ? parseUnits(amount.toString(), 6) : BigNumber.from(0);\n        const amountD18 = amount.gt(0) ? parseUnits(amount.toString(), 18) : BigNumber.from(0);\n\n        // Wrap USDC to sUSDC\n        const sUSDC_ADDRESS = usdTokens?.sUSD;\n        const wrap = usdcAmount.gt(0)\n          ? SpotMarketProxy.populateTransaction.wrap(USDC_BASE_MARKET, usdcAmount, amountD18)\n          : undefined;\n\n        const sUSDC_Contract = new ethers.Contract(sUSDC_ADDRESS, approveAbi, signer);\n        const sUSDCApproval = amountD18.gt(0)\n          ? sUSDC_Contract.populateTransaction.approve(CoreProxy.address, amountD18)\n          : undefined;\n\n        // optionally deposit if available collateral not enough\n        const deposit = amountD18.gt(0)\n          ? CoreProxy.populateTransaction.deposit(\n              BigNumber.from(id),\n              sUSDC_ADDRESS,\n              amountD18 // only deposit what's needed\n            )\n          : undefined;\n\n        const delegate = CoreProxy.populateTransaction.delegateCollateral(\n          BigNumber.from(id),\n          BigNumber.from(poolId),\n          sUSDC_ADDRESS,\n          currentCollateral.toBN().add(parseUnits(collateralChange.toString(), 18)).toString(),\n          wei(1).toBN()\n        );\n\n        const callsPromise = Promise.all(\n          [wrap, sUSDCApproval, createAccount, deposit, delegate].filter(notNil)\n        );\n\n        const [calls, gasPrices] = await Promise.all([callsPromise, getGasPrice({ provider })]);\n\n        if (priceUpdateTx) {\n          calls.unshift(priceUpdateTx as any);\n        }\n\n        const erc7412Tx = await withERC7412(\n          network,\n          calls,\n          'useDepositBaseAndromeda',\n          CoreProxy.interface\n        );\n\n        const gasOptionsForTransaction = formatGasPriceForTransaction({\n          gasLimit: erc7412Tx.gasLimit,\n          gasPrices,\n          gasSpeed,\n        });\n\n        const txn = await signer.sendTransaction({ ...erc7412Tx, ...gasOptionsForTransaction });\n        dispatch({ type: 'pending', payload: { txnHash: txn.hash } });\n\n        await txn.wait();\n        dispatch({ type: 'success' });\n      } catch (error: any) {\n        dispatch({ type: 'error', payload: { error } });\n        throw error;\n      }\n    },\n  });\n  return {\n    mutation,\n    txnState,\n    settle: () => dispatch({ type: 'settled' }),\n    isLoading: mutation.isPending,\n    exec: mutation.mutateAsync,\n  };\n};\n","import { DepositModal } from './DepositModal';\nexport * from './DepositModal';\nexport default DepositModal;\n","import { Box, Spinner } from '@chakra-ui/react';\nimport { PropsWithChildren } from 'react';\nimport { MultistepStatus } from './MultistepStatus';\n\nimport { createIcon } from '@chakra-ui/icon';\n\nexport const CheckIcon = createIcon({\n  viewBox: '0 0 14 14',\n  path: (\n    <g fill=\"currentColor\">\n      <polygon points=\"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039\" />\n    </g>\n  ),\n});\n\nexport const CloseIcon = createIcon({\n  d: 'M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z',\n});\n\nexport function StepIcon({ status, children }: PropsWithChildren<{ status: MultistepStatus }>) {\n  switch (true) {\n    case status.failed:\n      return <CloseIcon color=\"white\" />;\n    case status.success:\n      return <CheckIcon color=\"white\" />;\n    case status.loading:\n      return <Spinner color=\"white\" width={6} height={6} />;\n    case status.disabled:\n    default:\n      return (\n        <Box\n          __css={{\n            display: 'inline',\n            fontWeight: 'medium',\n            textAlign: 'center',\n            fontSize: 'md',\n          }}\n        >\n          {children}\n        </Box>\n      );\n  }\n}\n","import { MultistepStatus } from './MultistepStatus';\n\nexport function statusColor(status: MultistepStatus): string {\n  switch (true) {\n    // order matters\n    case status.failed:\n      return 'red.700';\n    case status.disabled:\n      return 'gray.700';\n    case status.loading:\n      return 'gray.700';\n    case status.success:\n      return 'green.700';\n    default:\n      return 'gray.700';\n  }\n}\n","import { Flex } from '@chakra-ui/react';\nimport { PropsWithChildren } from 'react';\nimport { MultistepStatus } from './MultistepStatus';\nimport { StepIcon } from './StepIcon';\nimport { statusColor } from './statusColor';\n\nexport function Step({ status, children }: PropsWithChildren<{ status: MultistepStatus }>) {\n  return (\n    <Flex\n      width={10}\n      height={10}\n      minWidth={10}\n      minHeight={10}\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      bg={statusColor(status)}\n      rounded=\"full\"\n      transitionProperty=\"background\"\n      transitionDuration=\"normal\"\n    >\n      <StepIcon status={status}>{children}</StepIcon>\n    </Flex>\n  );\n}\n","import { PropsWithChildren, ReactElement } from 'react';\nimport { Box, Checkbox, CheckboxProps, Flex, Text } from '@chakra-ui/react';\nimport { Step } from './Step';\nimport { statusColor } from './statusColor';\nimport { MultistepStatus } from './MultistepStatus';\n\nfunction StepCheckbox({ children, ...props }: PropsWithChildren<CheckboxProps>) {\n  return (\n    <Flex mt=\"0.5\">\n      <Checkbox size=\"sm\" {...props}>\n        <Box fontSize=\"xs\" opacity=\"0.66\">\n          {children}\n        </Box>\n      </Checkbox>\n    </Flex>\n  );\n}\n\nexport function Multistep({\n  step,\n  title,\n  subtitle,\n  checkboxLabel,\n  checkboxProps,\n  status,\n  children,\n}: PropsWithChildren<{\n  step: number;\n  title: string | ReactElement;\n  subtitle?: string | ReactElement;\n  checkboxLabel?: string;\n  checkboxProps?: CheckboxProps;\n  status: MultistepStatus;\n}>) {\n  return (\n    <Flex\n      position=\"relative\"\n      alignItems=\"center\"\n      gap={4}\n      rounded=\"lg\"\n      mt=\"4\"\n      p=\"4\"\n      border=\"2px solid\"\n      transitionProperty=\"border-color\"\n      transitionDuration=\"normal\"\n      borderColor={statusColor(status)}\n    >\n      <Step status={status}>{step}</Step>\n      <Flex direction=\"column\">\n        <Text data-cy={`multistep-${step}`}>{title}</Text>\n        {subtitle ? (\n          <Text as=\"div\" fontSize=\"xs\" opacity=\"0.66\">\n            {subtitle}\n          </Text>\n        ) : null}\n        {checkboxLabel ? <StepCheckbox {...checkboxProps}>{checkboxLabel}</StepCheckbox> : null}\n        {children}\n      </Flex>\n    </Flex>\n  );\n}\n","import { ethers, utils } from 'ethers';\nimport { useCallback } from 'react';\nimport { ERC7412_ABI } from '@snx-v3/withERC7412';\n\nexport type ContractErrorType = {\n  data: string;\n  name: string;\n  signature: string;\n  args: Record<string, any>;\n};\n\nexport function useContractErrorParser(Contract?: ethers.Contract) {\n  return useCallback(\n    (error: any): ContractErrorType | undefined => {\n      if (!Contract) {\n        return undefined;\n      }\n      try {\n        const errorData = error?.error?.data?.data || error?.error?.error?.data; // add more options as we find them\n        if (!errorData) {\n          console.error({ error }); // intentional logging as object so we can inspect all properties\n          return undefined;\n        }\n\n        const contractAbi = Contract.interface.format(utils.FormatTypes.full) as string[];\n        const newContract = new ethers.Contract(\n          Contract.address,\n          Array.from(\n            new Set(\n              contractAbi.concat(ERC7412_ABI).concat([\n                // ERC721 errors\n                'error CannotSelfApprove(address addr)',\n                'error InvalidTransferRecipient(address addr)',\n                'error InvalidOwner(address addr)',\n                'error TokenDoesNotExist(uint256 id)',\n                'error TokenAlreadyMinted(uint256 id)',\n              ])\n            )\n          ), // uniq\n          Contract.signer || Contract.provider\n        );\n        const errorParsed = newContract.interface.parseError(errorData);\n        const errorArgs = Object.fromEntries(\n          Object.entries(errorParsed.args)\n            .filter(([key]) => `${parseInt(key)}` !== key)\n            .map(([key, value]) => {\n              if (value instanceof ethers.BigNumber) {\n                // Guess wei\n                const unwei = parseFloat(ethers.utils.formatEther(value.toString()));\n                if (unwei > 0.001) {\n                  // must be wei\n                  return [key, unwei];\n                }\n\n                // Guess date\n                if (\n                  value.toNumber() > new Date(2000, 1, 1).getTime() / 1000 &&\n                  value.toNumber() < new Date(2100, 1, 1).getTime() / 1000\n                ) {\n                  return [key, new Date(value.toNumber() * 1000)];\n                }\n\n                // Just a number\n                return [key, parseFloat(value.toString())];\n              }\n\n              // Not a number\n              return [key, value];\n            })\n        );\n\n        return {\n          data: errorData,\n          name: errorParsed.name,\n          signature: errorParsed.signature,\n          args: errorArgs,\n        };\n      } catch (e) {\n        console.error(e);\n        return undefined;\n      }\n    },\n    [Contract]\n  );\n}\n"],"names":["defaultOpen","window","localStorage","CONTRACT_ERROR_OPEN","ContractError","contractError","isOpen","setIsOpen","React","_jsxs","_Fragment","children","_jsx","Button","variant","onClick","color","fontWeight","fontStyle","Collapse","in","animateOpacity","Text","fontSize","name","whiteSpace","pl","Object","entries","args","map","key","val","Date","format","join","minimalWETHABI","Events","State","FailedSteps","ServiceNames","initialContext","wrapAmount","wei","error","requireApproval","infiniteApproval","DepositMachine","createMachine","id","initial","predictableActionArguments","context","on","target","actions","assign","_","_context","event","states","cond","gt","invoke","src","onError","data","step","wrap","onDone","approve","deposit","c","DepositModalUi","collateralChange","onClose","collateralType","setInfiniteApproval","onSubmit","state","availableCollateral","poolName","isProcessing","matches","isWETH","symbol","stepNumbers","Modal","size","closeOnOverlayClick","ModalOverlay","ModalContent","bg","ModalHeader","ModalCloseButton","ModalBody","mb","Multistep","title","subtitle","eq","as","Amount","value","suffix","status","failed","disabled","success","loading","checkboxLabel","checkboxProps","isChecked","onChange","e","checked","gte","sub","isDisabled","width","my","Boolean","DepositModal","currentCollateral","navigate","useNavigate","collateralSymbol","poolId","accountId","useParams","queryClient","useQueryClient","network","useNetwork","CoreProxy","useCoreProxy","SpotProxy","useSpotMarketProxy","usdTokens","useGetUSDTokens","useCollateralType","collateralAddress","isBaseAndromeda","preset","USDC","tokenAddress","collateralNeeded","useApprove","contractAddress","amount","utils","toString","toBN","spender","address","toast","useToast","isClosable","duration","newAccountId","useMemo","Math","floor","random","exec","wrapEth","wethBalance","useWrapEth","signer","useSigner","ethCollateral","ethBalance","refetch","refetchETHBalance","useEthBalance","refetchWETHBalance","useTokenBalance","mutateAsync","isPending","useMutation","mutationFn","async","contract","Contract","txn","wait","useCallback","lt","isLoading","pool","usePool","execDeposit","useDeposit","collateralTypeAddress","txnState","dispatch","useReducer","reducer","initialState","collateralPriceUpdates","useAllCollateralPriceIds","gasSpeed","useGasSpeed","provider","useProvider","mutation","type","walletAddress","getAddress","createAccount","undefined","populateTransaction","BigNumber","from","delegate","delegateCollateral","add","callsPromise","Promise","all","filter","notNil","collateralPriceCallsPromise","fetchPriceUpdates","isTestnet","then","signedData","priceUpdatesToPopulatedTx","calls","gasPrices","collateralPriceCalls","getGasPrice","allCalls","concat","erc7412Tx","withERC7412","interface","gasOptionsForTransaction","formatGasPriceForTransaction","gasLimit","sendTransaction","payload","txnHash","hash","settle","depositBaseAndromeda","useDepositBaseAndromeda","SpotMarketProxy","priceUpdateTx","useCollateralPriceUpdates","sUSD","usdcAmount","parseUnits","amountD18","sUSDC_ADDRESS","USDC_BASE_MARKET","sUSDC_Contract","ethers","approveAbi","sUSDCApproval","unshift","errorParserCoreProxy","useContractErrorParser","send","useMachine","services","console","Error","closeAll","description","cause","invalidateQueries","queryKey","resolve","wrapAmountString","isSuccessOrDeposit","useEffect","location","useLocation","handleClose","pathname","generatePath","search","CheckIcon","createIcon","viewBox","path","fill","points","CloseIcon","d","StepIcon","Spinner","height","Box","__css","display","textAlign","statusColor","Step","Flex","minWidth","minHeight","justifyContent","alignItems","rounded","transitionProperty","transitionDuration","StepCheckbox","props","mt","Checkbox","opacity","position","gap","p","border","borderColor","direction","errorData","contractAbi","full","errorParsed","Array","Set","ERC7412_ABI","parseError","errorArgs","fromEntries","parseInt","unwei","parseFloat","toNumber","getTime","signature"],"sourceRoot":""}