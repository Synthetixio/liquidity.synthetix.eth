{"version":3,"file":"chunk/4249.523ea880.js","mappings":"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","sources":["webpack://@snx-v3/liquidity/../components/ClaimModal/ClaimModal.tsx","webpack://@snx-v3/liquidity/../components/ClaimModal/index.ts"],"sourcesContent":["import { Button, Divider, Text, useToast, Link, Flex, Skeleton } from '@chakra-ui/react';\nimport { Amount } from '@snx-v3/Amount';\nimport Wei, { wei } from '@synthetixio/wei';\nimport { TransactionStatus } from '@snx-v3/txnReducer';\nimport { Multistep } from '@snx-v3/Multistep';\nimport { useCallback, useContext, useMemo } from 'react';\nimport { useParams } from '@snx-v3/useParams';\nimport { ManagePositionContext } from '@snx-v3/ManagePositionContext';\nimport { useCollateralType } from '@snx-v3/useCollateralTypes';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { useContractErrorParser } from '@snx-v3/useContractErrorParser';\nimport { ContractError } from '@snx-v3/ContractError';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useNetwork } from '@snx-v3/useBlockchain';\nimport { useBorrow } from '@snx-v3/useBorrow';\nimport { isBaseAndromeda } from '@snx-v3/isBaseAndromeda';\nimport { ArrowBackIcon } from '@chakra-ui/icons';\nimport { LiquidityPositionUpdated } from '../../ui/src/components/Manage/LiquidityPositionUpdated';\nimport { useSystemToken } from '@snx-v3/useSystemToken';\nimport { ZEROWEI } from '@snx-v3/constants';\nimport { LiquidityPosition } from '@snx-v3/useLiquidityPosition';\n\nexport const ClaimModalUi: React.FC<{\n  onClose: () => void;\n  debtChange: Wei;\n  isOpen: boolean;\n  txnStatus: TransactionStatus;\n  execBorrow: () => void;\n  symbol: string;\n}> = ({ symbol, onClose, isOpen, debtChange, txnStatus, execBorrow }) => {\n  const { network } = useNetwork();\n  const isBase = isBaseAndromeda(network?.id, network?.preset);\n\n  if (isOpen) {\n    if (txnStatus === 'success') {\n      return (\n        <LiquidityPositionUpdated\n          onClose={onClose}\n          title=\"Debt successfully Updated\"\n          subline={\n            <>\n              Your <b>Debt</b> has been updated, read more about it in the{' '}\n              <Link\n                href=\"https://docs.synthetix.io/v/synthetix-v3-user-documentation\"\n                target=\"_blank\"\n                color=\"cyan.500\"\n              >\n                Synthetix V3 Documentation\n              </Link>\n            </>\n          }\n          alertText={\n            <>\n              <b>Debt</b> successfully Updated\n            </>\n          }\n        />\n      );\n    }\n\n    return (\n      <div data-cy=\"claim multistep\">\n        <Text color=\"gray.50\" fontSize=\"20px\" fontWeight={700}>\n          <ArrowBackIcon cursor=\"pointer\" onClick={onClose} mr={2} />\n          Manage Debt\n        </Text>\n\n        <Divider my={4} />\n\n        <Multistep\n          step={1}\n          title={isBase ? 'Claim' : 'Borrow'}\n          subtitle={\n            <Text as=\"div\">\n              {isBase ? 'Claim' : 'Borrow'}\n              <Amount prefix=\" \" value={debtChange} suffix={` ${symbol}`} />\n            </Text>\n          }\n          status={{\n            failed: txnStatus === 'error',\n            loading: ['prompting', 'pending'].includes(txnStatus),\n          }}\n        />\n\n        <Button\n          isDisabled={['pending', 'prompting'].includes(txnStatus)}\n          onClick={() => {\n            if (['unsent', 'error'].includes(txnStatus)) {\n              execBorrow();\n            }\n          }}\n          width=\"100%\"\n          mt=\"6\"\n          data-cy=\"claim confirm button\"\n        >\n          {(() => {\n            switch (txnStatus) {\n              case 'error':\n                return 'Retry';\n              case 'pending':\n              case 'prompting':\n                return 'Processing...';\n              default:\n                return 'Execute Transaction';\n            }\n          })()}\n        </Button>\n      </div>\n    );\n  }\n};\n\nexport const ClaimModal: React.FC<{\n  onClose: () => void;\n  isOpen: boolean;\n  liquidityPosition?: LiquidityPosition;\n}> = ({ onClose, isOpen, liquidityPosition }) => {\n  const { debtChange, setDebtChange } = useContext(ManagePositionContext);\n  const queryClient = useQueryClient();\n  const params = useParams();\n  const { network } = useNetwork();\n  const isBase = isBaseAndromeda(network?.id, network?.preset);\n  const { data: collateralType } = useCollateralType(params.collateralSymbol);\n  const { data: systemToken } = useSystemToken();\n\n  const maxClaimble = useMemo(() => {\n    if (!liquidityPosition || liquidityPosition?.debt.gte(0)) {\n      return ZEROWEI;\n    } else {\n      return wei(liquidityPosition.debt.abs().toBN().sub(1));\n    }\n  }, [liquidityPosition]);\n  const isBorrow = useMemo(\n    () => debtChange.gt(maxClaimble) && !isBase,\n    [debtChange, isBase, maxClaimble]\n  );\n\n  const {\n    exec: execBorrow,\n    txnState,\n    settle: settleBorrow,\n  } = useBorrow({\n    accountId: params.accountId,\n    poolId: params.poolId,\n    collateralTypeAddress: collateralType?.tokenAddress,\n    debtChange,\n  });\n\n  const toast = useToast({ isClosable: true, duration: 9000 });\n  const { data: CoreProxy } = useCoreProxy();\n  const errorParserCoreProxy = useContractErrorParser(CoreProxy);\n  const execBorrowWithErrorParser = useCallback(async () => {\n    try {\n      await execBorrow();\n\n      queryClient.invalidateQueries({\n        queryKey: [`${network?.id}-${network?.preset}`, 'LiquidityPosition'],\n        exact: false,\n      });\n      queryClient.invalidateQueries({\n        queryKey: [`${network?.id}-${network?.preset}`, 'TokenBalance'],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [`${network?.id}-${network?.preset}`, 'AccountCollateralUnlockDate'],\n      });\n\n      setDebtChange(ZEROWEI);\n    } catch (error: any) {\n      const contractError = errorParserCoreProxy(error);\n      if (contractError) {\n        console.error(new Error(contractError.name), contractError);\n      }\n\n      toast.closeAll();\n      toast({\n        title: isBorrow ? 'Borrow' : 'Claim' + ' failed',\n        description: contractError ? (\n          <ContractError contractError={contractError} />\n        ) : (\n          'Please try again.'\n        ),\n        status: 'error',\n        variant: 'left-accent',\n      });\n      throw Error(isBorrow ? 'Borrow' : 'Claim' + ' failed', { cause: error });\n    }\n  }, [\n    execBorrow,\n    queryClient,\n    network?.id,\n    network?.preset,\n    setDebtChange,\n    errorParserCoreProxy,\n    toast,\n    isBorrow,\n  ]);\n\n  const { txnStatus } = txnState;\n\n  if (!(params.poolId && params.accountId && collateralType && systemToken))\n    return (\n      <Flex gap={4} flexDirection=\"column\">\n        <Skeleton maxW=\"232px\" width=\"100%\" height=\"20px\" />\n        <Divider my={4} />\n        <Skeleton width=\"100%\" height=\"20px\" />\n        <Skeleton width=\"100%\" height=\"20px\" />\n      </Flex>\n    );\n\n  return (\n    <ClaimModalUi\n      execBorrow={execBorrowWithErrorParser}\n      debtChange={debtChange}\n      txnStatus={txnStatus}\n      onClose={() => {\n        settleBorrow();\n        onClose();\n      }}\n      isOpen={isOpen}\n      symbol={isBase ? collateralType.symbol : systemToken.symbol}\n    />\n  );\n};\n","import { ClaimModal } from './ClaimModal';\nexport * from './ClaimModal';\nexport default ClaimModal;\n"],"names":["ClaimModalUi","symbol","onClose","isOpen","debtChange","txnStatus","execBorrow","network","useNetwork","isBase","isBaseAndromeda","id","preset","_jsx","LiquidityPositionUpdated","title","subline","_jsxs","_Fragment","children","Link","href","target","color","alertText","Text","fontSize","fontWeight","ArrowBackIcon","cursor","onClick","mr","Divider","my","Multistep","step","subtitle","as","Amount","prefix","value","suffix","status","failed","loading","includes","Button","isDisabled","width","mt","ClaimModal","liquidityPosition","setDebtChange","useContext","ManagePositionContext","queryClient","useQueryClient","params","useParams","data","collateralType","useCollateralType","collateralSymbol","systemToken","useSystemToken","maxClaimble","useMemo","debt","gte","ZEROWEI","wei","abs","toBN","sub","isBorrow","gt","exec","txnState","settle","settleBorrow","useBorrow","accountId","poolId","collateralTypeAddress","tokenAddress","toast","useToast","isClosable","duration","CoreProxy","useCoreProxy","errorParserCoreProxy","useContractErrorParser","execBorrowWithErrorParser","useCallback","async","invalidateQueries","queryKey","exact","error","contractError","console","Error","name","closeAll","description","ContractError","variant","cause","Flex","gap","flexDirection","Skeleton","maxW","height"],"sourceRoot":""}