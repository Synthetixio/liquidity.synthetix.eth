{"version":3,"file":"chunk/3967.06272bc7.js","mappings":"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","sources":["webpack://@snx-v3/liquidity/../components/BorrowModal/BorrowModal.tsx","webpack://@snx-v3/liquidity/../lib/useBorrow/useBorrow.tsx","webpack://@snx-v3/liquidity/../components/BorrowModal/index.ts"],"sourcesContent":["import {\n  Box,\n  Button,\n  Flex,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n  Spinner,\n  Text,\n  useToast,\n} from '@chakra-ui/react';\nimport { Amount } from '@snx-v3/Amount';\nimport Wei from '@synthetixio/wei';\nimport { TransactionStatus } from '@snx-v3/txnReducer';\nimport { CheckIcon, CloseIcon } from '@snx-v3/Multistep';\nimport { PropsWithChildren, useCallback, useContext } from 'react';\nimport { useParams } from '@snx-v3/useParams';\nimport { ManagePositionContext } from '@snx-v3/ManagePositionContext';\nimport { useCollateralType } from '@snx-v3/useCollateralTypes';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { useContractErrorParser } from '@snx-v3/useContractErrorParser';\nimport { ContractError } from '@snx-v3/ContractError';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useNetwork } from '@snx-v3/useBlockchain';\nimport { useBorrow } from '@snx-v3/useBorrow';\nimport { isBaseAndromeda } from '@snx-v3/isBaseAndromeda';\n\nfunction StepIcon({ txnStatus, children }: PropsWithChildren<{ txnStatus: TransactionStatus }>) {\n  switch (txnStatus) {\n    case 'error':\n      return <CloseIcon color=\"white\" />;\n    case 'success':\n      return <CheckIcon color=\"white\" />;\n    case 'prompting':\n    case 'pending':\n      return <Spinner color=\"white\" width={6} height={6} />;\n    default:\n      return (\n        <Box\n          __css={{\n            display: 'inline',\n            fontWeight: 'medium',\n            textAlign: 'center',\n            fontSize: 'md',\n          }}\n        >\n          {children}\n        </Box>\n      );\n  }\n}\n\nconst statusColor = (txnStatus: TransactionStatus) => {\n  if (txnStatus === 'error' || txnStatus === 'success') return txnStatus;\n  return 'gray.700';\n};\n\nexport const BorrowModalUi: React.FC<{\n  onClose: () => void;\n  debtChange: Wei;\n  isOpen: boolean;\n  txnStatus: TransactionStatus;\n  execBorrow: () => void;\n}> = ({ onClose, isOpen, debtChange, txnStatus, execBorrow }) => {\n  const { network } = useNetwork();\n  const isBase = isBaseAndromeda(network?.id, network?.preset);\n\n  return (\n    <Modal size=\"lg\" isOpen={isOpen} onClose={onClose} closeOnOverlayClick={false}>\n      <ModalOverlay width=\"100%\" height=\"100%\" />\n      <ModalContent bg=\"black\" color=\"white\" data-testid=\"borrow modal\">\n        <ModalHeader>Complete this action</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Flex\n            gap={2}\n            alignItems=\"center\"\n            rounded=\"lg\"\n            p=\"4\"\n            border=\"2px solid\"\n            transitionProperty=\"border-color\"\n            transitionDuration=\"normal\"\n            borderColor={statusColor(txnStatus)}\n          >\n            <Flex\n              width={10}\n              height={10}\n              justifyContent=\"center\"\n              alignItems=\"center\"\n              bg={statusColor(txnStatus)}\n              rounded=\"full\"\n              transitionProperty=\"background\"\n              transitionDuration=\"normal\"\n            >\n              <StepIcon txnStatus={txnStatus}>1</StepIcon>\n            </Flex>\n            <Text>\n              {isBase ? 'Claim' : 'Borrow'}{' '}\n              <Amount value={debtChange} suffix={isBase ? ' USDC' : ' snxUSD'} />\n            </Text>\n          </Flex>\n          <Button\n            isDisabled={txnStatus === 'pending'}\n            onClick={() => {\n              if (txnStatus === 'unsent') {\n                execBorrow();\n              }\n              if (txnStatus === 'success') {\n                onClose();\n              }\n            }}\n            width=\"100%\"\n            my=\"4\"\n            data-testid=\"borrow confirm button\"\n          >\n            {(() => {\n              switch (txnStatus) {\n                case 'error':\n                  return 'Retry';\n                case 'pending':\n                  return 'Processing...';\n                case 'success':\n                  return 'Done';\n                default:\n                  return 'Start';\n              }\n            })()}\n          </Button>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport const BorrowModal: React.FC<{\n  onClose: () => void;\n  isOpen: boolean;\n}> = ({ onClose, isOpen }) => {\n  const { debtChange } = useContext(ManagePositionContext);\n  const queryClient = useQueryClient();\n  const params = useParams();\n  const { data: collateralType } = useCollateralType(params.collateralSymbol);\n\n  const {\n    exec: execBorrow,\n    txnState,\n    settle: settleBorrow,\n  } = useBorrow({\n    accountId: params.accountId,\n    poolId: params.poolId,\n    collateralTypeAddress: collateralType?.tokenAddress,\n    debtChange,\n  });\n\n  const toast = useToast({ isClosable: true, duration: 9000 });\n  const { data: CoreProxy } = useCoreProxy();\n  const { network } = useNetwork();\n  const errorParserCoreProxy = useContractErrorParser(CoreProxy);\n  const execBorrowWithErrorParser = useCallback(async () => {\n    try {\n      await execBorrow();\n      await queryClient.invalidateQueries({\n        queryKey: [`${network?.id}-${network?.preset}`, 'LiquidityPosition'],\n        exact: false,\n      });\n    } catch (error: any) {\n      const contractError = errorParserCoreProxy(error);\n      if (contractError) {\n        console.error(new Error(contractError.name), contractError);\n      }\n      toast.closeAll();\n      toast({\n        title: 'Borrow failed',\n        description: contractError ? (\n          <ContractError contractError={contractError} />\n        ) : (\n          'Please try again.'\n        ),\n        status: 'error',\n      });\n      throw Error('Borrow failed', { cause: error });\n    }\n  }, [execBorrow, queryClient, network?.id, network?.preset, errorParserCoreProxy, toast]);\n\n  const { txnStatus } = txnState;\n\n  if (!params.poolId || !params.accountId || !collateralType) return null;\n\n  return (\n    <BorrowModalUi\n      execBorrow={execBorrowWithErrorParser}\n      debtChange={debtChange}\n      txnStatus={txnStatus}\n      onClose={() => {\n        settleBorrow();\n        onClose();\n      }}\n      isOpen={isOpen}\n    />\n  );\n};\n","import { useReducer } from 'react';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { useMutation } from '@tanstack/react-query';\nimport { useNetwork, useProvider, useSigner } from '@snx-v3/useBlockchain';\nimport { initialState, reducer } from '@snx-v3/txnReducer';\nimport Wei from '@synthetixio/wei';\nimport { BigNumber } from 'ethers';\nimport { formatGasPriceForTransaction } from '@snx-v3/useGasOptions';\nimport { getGasPrice } from '@snx-v3/useGasPrice';\nimport { useGasSpeed } from '@snx-v3/useGasSpeed';\nimport { withERC7412 } from '@snx-v3/withERC7412';\nimport { useAllCollateralPriceIds } from '@snx-v3/useAllCollateralPriceIds';\nimport { fetchPriceUpdates, priceUpdatesToPopulatedTx } from '@snx-v3/fetchPythPrices';\n\nexport const useBorrow = ({\n  accountId,\n  poolId,\n  collateralTypeAddress,\n  debtChange,\n}: {\n  accountId?: string;\n  poolId?: string;\n  collateralTypeAddress?: string;\n  debtChange: Wei;\n}) => {\n  const [txnState, dispatch] = useReducer(reducer, initialState);\n  const { data: CoreProxy } = useCoreProxy();\n  const { data: collateralPriceIds } = useAllCollateralPriceIds();\n\n  const signer = useSigner();\n  const { gasSpeed } = useGasSpeed();\n  const provider = useProvider();\n  const { network } = useNetwork();\n\n  const mutation = useMutation({\n    mutationFn: async () => {\n      if (\n        !(\n          signer &&\n          CoreProxy &&\n          poolId &&\n          accountId &&\n          collateralTypeAddress &&\n          collateralPriceIds &&\n          network &&\n          provider\n        )\n      )\n        return;\n      if (debtChange.eq(0)) return;\n\n      try {\n        dispatch({ type: 'prompting' });\n\n        const populatedTxnPromised = CoreProxy.populateTransaction.mintUsd(\n          BigNumber.from(accountId),\n          BigNumber.from(poolId),\n          collateralTypeAddress,\n          debtChange.toBN()\n        );\n        const walletAddress = await signer.getAddress();\n        const collateralPriceCallsPromise = fetchPriceUpdates(\n          collateralPriceIds,\n          network.isTestnet\n        ).then((signedData) =>\n          priceUpdatesToPopulatedTx(walletAddress, collateralPriceIds, signedData)\n        );\n\n        const [calls, gasPrices, collateralPriceCalls] = await Promise.all([\n          populatedTxnPromised,\n          getGasPrice({ provider }),\n          collateralPriceCallsPromise,\n        ]);\n        const allCalls = collateralPriceCalls.concat(calls);\n\n        const erc7412Tx = await withERC7412(network, allCalls, 'borrow', CoreProxy.interface);\n\n        const gasOptionsForTransaction = formatGasPriceForTransaction({\n          gasLimit: erc7412Tx.gasLimit,\n          gasPrices,\n          gasSpeed,\n        });\n\n        const txn = await signer.sendTransaction({ ...erc7412Tx, ...gasOptionsForTransaction });\n\n        dispatch({ type: 'pending', payload: { txnHash: txn.hash } });\n\n        await txn.wait();\n        dispatch({ type: 'success' });\n      } catch (error: any) {\n        dispatch({ type: 'error', payload: { error } });\n        throw error;\n      }\n    },\n  });\n  return {\n    mutation,\n    txnState,\n    settle: () => dispatch({ type: 'settled' }),\n    isLoading: mutation.isPending,\n    exec: mutation.mutateAsync,\n  };\n};\n","import { BorrowModal } from './BorrowModal';\nexport * from './BorrowModal';\nexport default BorrowModal;\n"],"names":["StepIcon","txnStatus","children","_jsx","CloseIcon","color","CheckIcon","Spinner","width","height","Box","__css","display","fontWeight","textAlign","fontSize","statusColor","BorrowModalUi","onClose","isOpen","debtChange","execBorrow","network","useNetwork","isBase","isBaseAndromeda","id","preset","_jsxs","Modal","size","closeOnOverlayClick","ModalOverlay","ModalContent","bg","ModalHeader","ModalCloseButton","ModalBody","Flex","gap","alignItems","rounded","p","border","transitionProperty","transitionDuration","borderColor","justifyContent","Text","Amount","value","suffix","Button","isDisabled","onClick","my","BorrowModal","useContext","ManagePositionContext","queryClient","useQueryClient","params","useParams","data","collateralType","useCollateralType","collateralSymbol","exec","txnState","settle","settleBorrow","useBorrow","accountId","poolId","collateralTypeAddress","dispatch","useReducer","reducer","initialState","CoreProxy","useCoreProxy","collateralPriceIds","useAllCollateralPriceIds","signer","useSigner","gasSpeed","useGasSpeed","provider","useProvider","mutation","useMutation","mutationFn","async","eq","type","populatedTxnPromised","populateTransaction","mintUsd","BigNumber","from","toBN","walletAddress","getAddress","collateralPriceCallsPromise","fetchPriceUpdates","isTestnet","then","signedData","priceUpdatesToPopulatedTx","calls","gasPrices","collateralPriceCalls","Promise","all","getGasPrice","allCalls","concat","erc7412Tx","withERC7412","interface","gasOptionsForTransaction","formatGasPriceForTransaction","gasLimit","txn","sendTransaction","payload","txnHash","hash","wait","error","isLoading","isPending","mutateAsync","tokenAddress","toast","useToast","isClosable","duration","errorParserCoreProxy","useContractErrorParser","execBorrowWithErrorParser","useCallback","invalidateQueries","queryKey","exact","contractError","console","Error","name","closeAll","title","description","ContractError","status","cause"],"sourceRoot":""}