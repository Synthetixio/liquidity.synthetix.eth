{"version":3,"file":"chunk/8402.7f261e99.js","mappings":"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","sources":["webpack://@snx-v3/liquidity/../lib/useWithdraw/useWithdraw.tsx","webpack://@snx-v3/liquidity/../lib/useUSDProxy/useUSDProxy.ts","webpack://@snx-v3/liquidity/../../contracts/importers/importUSDProxy.js","webpack://@snx-v3/liquidity/../lib/useWithdrawBaseAndromeda/useWithdrawBaseAndromeda.tsx","webpack://@snx-v3/liquidity/../components/WithdrawModal/WithdrawModal.tsx","webpack://@snx-v3/liquidity/../components/WithdrawModal/index.ts"],"sourcesContent":["import { useReducer } from 'react';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { useMutation } from '@tanstack/react-query';\nimport { useNetwork, useProvider, useSigner } from '@snx-v3/useBlockchain';\nimport { initialState, reducer } from '@snx-v3/txnReducer';\nimport { BigNumber, ethers } from 'ethers';\nimport { formatGasPriceForTransaction } from '@snx-v3/useGasOptions';\nimport { getGasPrice } from '@snx-v3/useGasPrice';\nimport { useGasSpeed } from '@snx-v3/useGasSpeed';\nimport { useAllCollateralPriceIds } from '@snx-v3/useAllCollateralPriceIds';\nimport { fetchPriceUpdates, priceUpdatesToPopulatedTx } from '@snx-v3/fetchPythPrices';\nimport { withERC7412 } from '@snx-v3/withERC7412';\nimport Wei from '@synthetixio/wei';\nimport { parseUnits } from '@snx-v3/format';\n\nexport const useWithdraw = ({\n  accountId,\n  collateralTypeAddress,\n  amount,\n}: {\n  accountId?: string;\n  collateralTypeAddress?: string;\n  amount: Wei;\n}) => {\n  const [txnState, dispatch] = useReducer(reducer, initialState);\n  const { data: CoreProxy } = useCoreProxy();\n  const { data: collateralPriceIds } = useAllCollateralPriceIds();\n  const { network } = useNetwork();\n\n  const { gasSpeed } = useGasSpeed();\n  const signer = useSigner();\n  const provider = useProvider();\n\n  const mutation = useMutation({\n    mutationFn: async () => {\n      if (!signer || !network || !provider) throw new Error('No signer or network');\n\n      if (!(CoreProxy && collateralTypeAddress && amount && collateralPriceIds)) {\n        throw new Error('Not ready');\n      }\n      if (amount?.eq(0)) {\n        throw new Error('Amount less than 0');\n      }\n\n      const walletAddress = await signer.getAddress();\n\n      try {\n        dispatch({ type: 'prompting' });\n\n        const gasPricesPromised = getGasPrice({ provider });\n\n        const contract = new ethers.Contract(\n          collateralTypeAddress,\n          ['function decimals() view returns (uint8)'],\n          provider\n        );\n\n        const decimals = await contract.decimals();\n\n        const collateralAmount = amount.gt(0)\n          ? parseUnits(amount.toString(), decimals)\n          : BigNumber.from(0);\n\n        const populatedTxnPromised = CoreProxy.populateTransaction.withdraw(\n          BigNumber.from(accountId),\n          collateralTypeAddress,\n          collateralAmount\n        );\n\n        const collateralPriceCallsPromise = fetchPriceUpdates(\n          collateralPriceIds,\n          network.isTestnet\n        ).then((signedData) =>\n          priceUpdatesToPopulatedTx(walletAddress, collateralPriceIds, signedData)\n        );\n        const [gasPrices, populatedTxn, collateralPriceCalls] = await Promise.all([\n          gasPricesPromised,\n          populatedTxnPromised,\n          collateralPriceCallsPromise,\n        ]);\n        const allCalls = collateralPriceCalls.concat(populatedTxn);\n\n        const erc7412Tx = await withERC7412(network, allCalls, 'useWithdraw', walletAddress);\n\n        const gasOptionsForTransaction = formatGasPriceForTransaction({\n          gasLimit: erc7412Tx.gasLimit,\n          gasPrices,\n          gasSpeed,\n        });\n\n        const txn = await signer.sendTransaction({ ...erc7412Tx, ...gasOptionsForTransaction });\n        dispatch({ type: 'pending', payload: { txnHash: txn.hash } });\n\n        await txn.wait();\n        dispatch({ type: 'success' });\n      } catch (error: any) {\n        dispatch({ type: 'error', payload: { error } });\n        throw error;\n      }\n    },\n  });\n  return {\n    mutation,\n    txnState,\n    settle: () => dispatch({ type: 'settled' }),\n    isLoading: mutation.isPending,\n    exec: mutation.mutateAsync,\n  };\n};\n","import { Contract } from '@ethersproject/contracts';\nimport { useQuery } from '@tanstack/react-query';\nimport { useNetwork, useProvider, useSigner, useWallet } from '@snx-v3/useBlockchain';\nimport { importUSDProxy } from '@snx-v3/contracts';\n\nexport function useUSDProxy() {\n  const { network } = useNetwork();\n  const provider = useProvider();\n  const signer = useSigner();\n  const signerOrProvider = signer || provider;\n  const withSigner = Boolean(signer);\n  const { activeWallet } = useWallet();\n\n  return useQuery({\n    queryKey: [\n      `${network?.id}-${network?.preset}`,\n      'USDProxy',\n      { withSigner },\n      activeWallet?.address,\n    ],\n    queryFn: async function () {\n      if (!signerOrProvider || !network) throw new Error('Should be disabled');\n      const { address, abi } = await importUSDProxy(network.id, network.preset);\n      return new Contract(address, abi, signerOrProvider);\n    },\n    enabled: Boolean(signerOrProvider),\n    staleTime: Infinity,\n  });\n}\n","export async function importUSDProxy(chainId, preset) {\n  if (!preset) {\n    throw new Error(`Missing preset`);\n  }\n  const deployment = `${Number(chainId).toFixed(0)}-${preset}`;\n  switch (deployment) {\n    case '1-main': {\n      const [{ default: meta }, { default: abi }] = await Promise.all([\n        import('@synthetixio/v3-contracts/1-main/meta.json'),\n        import('@synthetixio/v3-contracts/1-main/USDProxy.readable.json'),\n      ]);\n      return { address: meta.contracts.USDProxy, abi };\n    }\n    case '11155111-main': {\n      const [{ default: meta }, { default: abi }] = await Promise.all([\n        import('@synthetixio/v3-contracts/11155111-main/meta.json'),\n        import('@synthetixio/v3-contracts/11155111-main/USDProxy.readable.json'),\n      ]);\n      return { address: meta.contracts.USDProxy, abi };\n    }\n    case '10-main': {\n      const [{ default: meta }, { default: abi }] = await Promise.all([\n        import('@synthetixio/v3-contracts/10-main/meta.json'),\n        import('@synthetixio/v3-contracts/10-main/USDProxy.readable.json'),\n      ]);\n      return { address: meta.contracts.USDProxy, abi };\n    }\n    case '8453-andromeda': {\n      const [{ default: meta }, { default: abi }] = await Promise.all([\n        import('@synthetixio/v3-contracts/8453-andromeda/meta.json'),\n        import('@synthetixio/v3-contracts/8453-andromeda/USDProxy.readable.json'),\n      ]);\n      return { address: meta.contracts.USDProxy, abi };\n    }\n    case '84532-andromeda': {\n      const [{ default: meta }, { default: abi }] = await Promise.all([\n        import('@synthetixio/v3-contracts/84532-andromeda/meta.json'),\n        import('@synthetixio/v3-contracts/84532-andromeda/USDProxy.readable.json'),\n      ]);\n      return { address: meta.contracts.USDProxy, abi };\n    }\n    case '42161-main': {\n      const [{ default: meta }, { default: abi }] = await Promise.all([\n        import('@synthetixio/v3-contracts/42161-main/meta.json'),\n        import('@synthetixio/v3-contracts/42161-main/USDProxy.readable.json'),\n      ]);\n      return { address: meta.contracts.USDProxy, abi };\n    }\n    case '421614-main': {\n      const [{ default: meta }, { default: abi }] = await Promise.all([\n        import('@synthetixio/v3-contracts/421614-main/meta.json'),\n        import('@synthetixio/v3-contracts/421614-main/USDProxy.readable.json'),\n      ]);\n      return { address: meta.contracts.USDProxy, abi };\n    }\n    case '42161-arbthetix': {\n      const [{ default: meta }, { default: abi }] = await Promise.all([\n        import('@synthetixio/v3-contracts/42161-arbthetix/meta.json'),\n        import('@synthetixio/v3-contracts/42161-arbthetix/USDProxy.readable.json'),\n      ]);\n      return { address: meta.contracts.USDProxy, abi };\n    }\n    default: {\n      throw new Error(`Unsupported deployment ${deployment} for USDProxy`);\n    }\n  }\n}\n","import { useReducer } from 'react';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { useMutation } from '@tanstack/react-query';\nimport { useNetwork, useProvider, useSigner } from '@snx-v3/useBlockchain';\nimport { initialState, reducer } from '@snx-v3/txnReducer';\nimport { BigNumber, constants, utils } from 'ethers';\nimport { formatGasPriceForTransaction } from '@snx-v3/useGasOptions';\nimport { getGasPrice } from '@snx-v3/useGasPrice';\nimport { useGasSpeed } from '@snx-v3/useGasSpeed';\nimport { withERC7412 } from '@snx-v3/withERC7412';\nimport { useSpotMarketProxy } from '../useSpotMarketProxy';\nimport { getSpotMarketId } from '@snx-v3/isBaseAndromeda';\nimport { notNil } from '@snx-v3/tsHelpers';\nimport { useUSDProxy } from '@snx-v3/useUSDProxy';\nimport { Wei } from '@synthetixio/wei';\nimport { useCollateralPriceUpdates } from '@snx-v3/useCollateralPriceUpdates';\nimport { useGetUSDTokens } from '@snx-v3/useGetUSDTokens';\nimport { ZEROWEI } from '../../ui/src/utils/constants';\nimport { AccountCollateralType } from '@snx-v3/useAccountCollateral';\n\nexport const useWithdrawBaseAndromeda = ({\n  accountId,\n  availableCollateral,\n  snxUSDCollateral,\n  amountToWithdraw,\n  accountCollateral,\n  collateralSymbol,\n}: {\n  availableCollateral: Wei;\n  snxUSDCollateral: Wei;\n  amountToWithdraw: Wei;\n  accountId?: string;\n  collateralSymbol?: string;\n  accountCollateral: AccountCollateralType | undefined;\n}) => {\n  const [txnState, dispatch] = useReducer(reducer, initialState);\n  const { data: CoreProxy } = useCoreProxy();\n  const { data: SpotProxy } = useSpotMarketProxy();\n  const { data: UsdProxy } = useUSDProxy();\n  const { data: priceUpdateTx } = useCollateralPriceUpdates();\n  const { network } = useNetwork();\n  const { data: usdTokens } = useGetUSDTokens();\n\n  const { gasSpeed } = useGasSpeed();\n  const signer = useSigner();\n  const provider = useProvider();\n\n  const mutation = useMutation({\n    mutationFn: async () => {\n      if (!signer || !network || !provider) throw new Error('No signer or network');\n      if (!(CoreProxy && SpotProxy && accountId && usdTokens?.sUSD && usdTokens.snxUSD)) {\n        throw new Error('Not ready');\n      }\n\n      const total = snxUSDCollateral.add(availableCollateral);\n\n      if (total.lt(amountToWithdraw)) {\n        throw new Error('Exceeds balance');\n      }\n\n      const wrappedCollateralAmount = amountToWithdraw.gt(availableCollateral)\n        ? availableCollateral\n        : amountToWithdraw;\n\n      const snxUSDAmount = amountToWithdraw.sub(wrappedCollateralAmount).gt(0)\n        ? amountToWithdraw.sub(wrappedCollateralAmount)\n        : ZEROWEI;\n\n      try {\n        const spotMarketId = getSpotMarketId(collateralSymbol);\n\n        dispatch({ type: 'prompting' });\n\n        const gasPricesPromised = getGasPrice({ provider });\n\n        const withdraw_collateral = wrappedCollateralAmount.gt(0)\n          ? CoreProxy.populateTransaction.withdraw(\n              BigNumber.from(accountId),\n              accountCollateral?.tokenAddress,\n              wrappedCollateralAmount.toBN()\n            )\n          : undefined;\n\n        const withdraw_snxUSD = snxUSDAmount.gt(0)\n          ? CoreProxy.populateTransaction.withdraw(\n              BigNumber.from(accountId),\n              usdTokens?.snxUSD,\n              snxUSDAmount.toBN()\n            )\n          : undefined;\n        const snxUSDApproval = snxUSDAmount.gt(0)\n          ? UsdProxy?.populateTransaction.approve(SpotProxy.address, snxUSDAmount.toBN())\n          : undefined;\n        const buy_wrappedCollateral = snxUSDAmount.gt(0)\n          ? SpotProxy.populateTransaction.buy(\n              spotMarketId,\n              snxUSDAmount.toBN(),\n              0,\n              constants.AddressZero\n            )\n          : undefined;\n\n        const synthAmount = snxUSDAmount.gt(0)\n          ? (await SpotProxy.callStatic.quoteBuyExactIn(spotMarketId, snxUSDAmount.toBN(), 0))\n              .synthAmount\n          : ZEROWEI;\n        const withdrawAmount = availableCollateral.add(synthAmount);\n\n        const unwrapTxnPromised = SpotProxy.populateTransaction.unwrap(\n          spotMarketId,\n          withdrawAmount.toBN(),\n          // 2% slippage\n          Number(\n            utils.formatUnits(withdrawAmount.toBN().mul(98).div(100).toString(), 12).toString()\n          ).toFixed()\n        );\n\n        const [\n          gasPrices,\n          withdraw_collateral_txn,\n          withdraw_snxUSD_txn,\n          snxUSDApproval_txn,\n          buy_wrappedCollateral_txn,\n          unwrapTxnPromised_txn,\n        ] = await Promise.all([\n          gasPricesPromised,\n          withdraw_collateral,\n          withdraw_snxUSD,\n          snxUSDApproval,\n          buy_wrappedCollateral,\n          unwrapTxnPromised,\n        ]);\n\n        const allCalls = [\n          withdraw_collateral_txn,\n          withdraw_snxUSD_txn,\n          snxUSDApproval_txn,\n          buy_wrappedCollateral_txn,\n          unwrapTxnPromised_txn,\n        ].filter(notNil);\n\n        if (priceUpdateTx) {\n          allCalls.unshift(priceUpdateTx as any);\n        }\n\n        const walletAddress = await signer.getAddress();\n        const erc7412Tx = await withERC7412(network, allCalls, 'useWithdrawBase', walletAddress);\n\n        const gasOptionsForTransaction = formatGasPriceForTransaction({\n          gasLimit: erc7412Tx.gasLimit,\n          gasPrices,\n          gasSpeed,\n        });\n\n        const txn = await signer.sendTransaction({ ...erc7412Tx, ...gasOptionsForTransaction });\n        dispatch({ type: 'pending', payload: { txnHash: txn.hash } });\n\n        await txn.wait();\n        dispatch({ type: 'success' });\n      } catch (error: any) {\n        dispatch({ type: 'error', payload: { error } });\n        throw error;\n      }\n    },\n  });\n\n  return {\n    mutation,\n    txnState,\n    settle: () => dispatch({ type: 'settled' }),\n    isLoading: mutation.isPending,\n    exec: mutation.mutateAsync,\n  };\n};\n","import { Button, Divider, Text, useToast, Link } from '@chakra-ui/react';\nimport React, { FC, useCallback, useContext, useState } from 'react';\nimport { Multistep } from '@snx-v3/Multistep';\nimport { Wei } from '@synthetixio/wei';\nimport { useWithdraw } from '@snx-v3/useWithdraw';\nimport { useAccountSpecificCollateral } from '@snx-v3/useAccountCollateral';\nimport { useContractErrorParser } from '@snx-v3/useContractErrorParser';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { ContractError } from '@snx-v3/ContractError';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useNetwork } from '@snx-v3/useBlockchain';\nimport { ArrowBackIcon } from '@chakra-ui/icons';\nimport { LiquidityPositionUpdated } from '../../ui/src/components/Manage/LiquidityPositionUpdated';\nimport { LiquidityPosition } from '@snx-v3/useLiquidityPosition';\nimport { isBaseAndromeda } from '@snx-v3/isBaseAndromeda';\nimport { ZEROWEI } from '../../ui/src/utils/constants';\nimport { useWithdrawBaseAndromeda } from '@snx-v3/useWithdrawBaseAndromeda';\nimport { ManagePositionContext } from '@snx-v3/ManagePositionContext';\nimport { useParams } from '@snx-v3/useParams';\nimport { Amount } from '@snx-v3/Amount';\nimport { useSystemToken } from '@snx-v3/useSystemToken';\nimport { useCollateralType } from '@snx-v3/useCollateralTypes';\n\nexport const WithdrawModalUi: FC<{\n  amount: Wei;\n  isOpen: boolean;\n  onClose: () => void;\n  symbol?: string;\n  state: {\n    step: number;\n    status: string;\n  };\n  onSubmit: () => void;\n  isDebtWithdrawal: boolean;\n}> = ({ isDebtWithdrawal, amount, isOpen, onClose, onSubmit, state, symbol }) => {\n  if (isOpen) {\n    if (state.step > 1) {\n      return (\n        <LiquidityPositionUpdated\n          onClose={onSubmit}\n          title={(isDebtWithdrawal ? 'Debt' : 'Collateral') + ' successfully Withdrawn'}\n          subline={\n            <>\n              Your <b>{isDebtWithdrawal ? 'Debt' : 'Collateral'}</b> has been withdrawn, read more\n              about it in the{' '}\n              <Link\n                href=\"https://docs.synthetix.io/v/synthetix-v3-user-documentation\"\n                target=\"_blank\"\n                color=\"cyan.500\"\n              >\n                Synthetix V3 Documentation\n              </Link>\n            </>\n          }\n          alertText={(isDebtWithdrawal ? 'Debt' : 'Collateral') + ' successfully Withdrawn'}\n        />\n      );\n    }\n\n    return (\n      <div>\n        <Text color=\"gray.50\" fontSize=\"20px\" fontWeight={700}>\n          <ArrowBackIcon cursor=\"pointer\" onClick={onClose} mr={2} />\n          Manage {isDebtWithdrawal ? 'Debt' : 'Collateral'}\n        </Text>\n        <Divider my={4} />\n\n        <Multistep\n          step={1}\n          title=\"Withdraw\"\n          subtitle={\n            <Text as=\"div\">\n              <Amount value={amount} />\n              &nbsp;{symbol} will be withdrawn\n            </Text>\n          }\n          status={{\n            failed: state.step === 1 && state.status === 'error',\n            success: state.step > 1,\n            loading: state.step === 1 && state.status === 'pending',\n          }}\n        />\n\n        <Button\n          isDisabled={state.status === 'pending'}\n          onClick={onSubmit}\n          width=\"100%\"\n          mt=\"6\"\n          data-testid=\"withdraw confirm button\"\n        >\n          {(() => {\n            switch (true) {\n              case state.status === 'error':\n                return 'Retry';\n              case state.status === 'pending':\n                return 'Processing...';\n              case state.step > 1:\n                return 'Done';\n              default:\n                return 'Execute Transaction';\n            }\n          })()}\n        </Button>\n      </div>\n    );\n  }\n};\n\nexport function WithdrawModal({\n  liquidityPosition,\n  onClose,\n  isOpen,\n  isDebtWithdrawal = false,\n}: {\n  liquidityPosition?: LiquidityPosition;\n  isOpen: boolean;\n  onClose: () => void;\n  isDebtWithdrawal?: boolean;\n}) {\n  const [txState, setTxState] = useState({\n    step: 1,\n    status: 'idle',\n  });\n\n  const params = useParams();\n  const toast = useToast({ isClosable: true, duration: 9000 });\n  const { network } = useNetwork();\n  const queryClient = useQueryClient();\n\n  const { withdrawAmount, setWithdrawAmount } = useContext(ManagePositionContext);\n\n  const { data: collateralType } = useCollateralType(params.collateralSymbol);\n  const { data: CoreProxy } = useCoreProxy();\n  const errorParserCoreProxy = useContractErrorParser(CoreProxy);\n  const accountId = liquidityPosition?.accountId;\n\n  const { data: systemToken } = useSystemToken();\n  const { data: systemTokenBalance } = useAccountSpecificCollateral(\n    accountId,\n    systemToken?.address\n  );\n\n  const { mutation: withdrawMain } = useWithdraw({\n    amount: withdrawAmount,\n    accountId,\n    collateralTypeAddress: isDebtWithdrawal\n      ? systemToken.address\n      : liquidityPosition?.accountCollateral.tokenAddress,\n  });\n\n  const { mutation: withdrawAndromeda } = useWithdrawBaseAndromeda({\n    accountId,\n    availableCollateral: liquidityPosition?.accountCollateral.availableCollateral || ZEROWEI,\n    snxUSDCollateral: systemTokenBalance?.availableCollateral || ZEROWEI,\n    amountToWithdraw: withdrawAmount,\n    accountCollateral: liquidityPosition?.accountCollateral,\n    collateralSymbol: params.collateralSymbol,\n  });\n\n  const onSubmit = useCallback(async () => {\n    try {\n      if (txState.step === 1) {\n        setTxState({\n          step: 1,\n          status: 'pending',\n        });\n\n        if (!isBaseAndromeda(network?.id, network?.preset)) {\n          await withdrawMain.mutateAsync();\n        } else {\n          await withdrawAndromeda.mutateAsync();\n        }\n\n        setTxState({\n          step: 2,\n          status: 'success',\n        });\n\n        queryClient.invalidateQueries({\n          queryKey: [`${network?.id}-${network?.preset}`, 'LiquidityPosition', { accountId }],\n        });\n        queryClient.invalidateQueries({\n          queryKey: [\n            `${network?.id}-${network?.preset}`,\n            'AccountSpecificCollateral',\n            { accountId },\n          ],\n        });\n        queryClient.invalidateQueries({\n          queryKey: [`${network?.id}-${network?.preset}`, 'LiquidityPositions', { accountId }],\n        });\n        queryClient.invalidateQueries({\n          queryKey: [\n            `${network?.id}-${network?.preset}`,\n            'AccountCollateralUnlockDate',\n            { accountId },\n          ],\n        });\n        queryClient.invalidateQueries({\n          queryKey: [`${network?.id}-${network?.preset}`, 'TokenBalance'],\n        });\n\n        setWithdrawAmount(ZEROWEI);\n      } else {\n        onClose();\n      }\n    } catch (error) {\n      setTxState((state) => ({\n        ...state,\n        status: 'error',\n      }));\n\n      const contractError = errorParserCoreProxy(error);\n      if (contractError) {\n        console.error(new Error(contractError.name), contractError);\n      }\n      toast.closeAll();\n      toast({\n        title: 'Withdraw failed',\n        description: contractError ? (\n          <ContractError contractError={contractError} />\n        ) : (\n          'Please try again.'\n        ),\n        status: 'error',\n        variant: 'left-accent',\n      });\n      throw Error('Withdraw failed', { cause: error });\n    }\n  }, [\n    accountId,\n    errorParserCoreProxy,\n    network?.id,\n    network?.preset,\n    onClose,\n    queryClient,\n    setWithdrawAmount,\n    toast,\n    txState.step,\n    withdrawAndromeda,\n    withdrawMain,\n  ]);\n\n  return (\n    <WithdrawModalUi\n      amount={withdrawAmount}\n      isOpen={isOpen}\n      onClose={onClose}\n      symbol={isDebtWithdrawal ? systemToken.symbol : collateralType?.symbol}\n      state={txState}\n      onSubmit={onSubmit}\n      isDebtWithdrawal={isDebtWithdrawal}\n    />\n  );\n}\n","import { WithdrawModal } from './WithdrawModal';\nexport * from './WithdrawModal';\nexport default WithdrawModal;\n"],"names":["useWithdraw","accountId","collateralTypeAddress","amount","txnState","dispatch","useReducer","reducer","initialState","data","CoreProxy","useCoreProxy","collateralPriceIds","useAllCollateralPriceIds","network","useNetwork","gasSpeed","useGasSpeed","signer","useSigner","provider","useProvider","mutation","useMutation","mutationFn","async","Error","eq","walletAddress","getAddress","type","gasPricesPromised","getGasPrice","contract","ethers","decimals","collateralAmount","gt","parseUnits","toString","BigNumber","from","populatedTxnPromised","populateTransaction","withdraw","collateralPriceCallsPromise","fetchPriceUpdates","isTestnet","then","signedData","priceUpdatesToPopulatedTx","gasPrices","populatedTxn","collateralPriceCalls","Promise","all","allCalls","concat","erc7412Tx","withERC7412","gasOptionsForTransaction","formatGasPriceForTransaction","gasLimit","txn","sendTransaction","payload","txnHash","hash","wait","error","settle","isLoading","isPending","exec","mutateAsync","useUSDProxy","signerOrProvider","withSigner","Boolean","activeWallet","useWallet","useQuery","queryKey","id","preset","address","queryFn","abi","chainId","deployment","Number","toFixed","default","meta","contracts","USDProxy","importUSDProxy","Contract","enabled","staleTime","Infinity","useWithdrawBaseAndromeda","availableCollateral","snxUSDCollateral","amountToWithdraw","accountCollateral","collateralSymbol","SpotProxy","useSpotMarketProxy","UsdProxy","priceUpdateTx","useCollateralPriceUpdates","usdTokens","useGetUSDTokens","sUSD","snxUSD","add","lt","wrappedCollateralAmount","snxUSDAmount","sub","ZEROWEI","spotMarketId","getSpotMarketId","withdraw_collateral","tokenAddress","toBN","undefined","withdraw_snxUSD","snxUSDApproval","approve","buy_wrappedCollateral","buy","constants","synthAmount","callStatic","quoteBuyExactIn","withdrawAmount","unwrapTxnPromised","unwrap","utils","mul","div","withdraw_collateral_txn","withdraw_snxUSD_txn","snxUSDApproval_txn","buy_wrappedCollateral_txn","unwrapTxnPromised_txn","filter","notNil","unshift","WithdrawModalUi","isDebtWithdrawal","isOpen","onClose","onSubmit","state","symbol","step","_jsx","LiquidityPositionUpdated","title","subline","_jsxs","_Fragment","children","Link","href","target","color","alertText","Text","fontSize","fontWeight","ArrowBackIcon","cursor","onClick","mr","Divider","my","Multistep","subtitle","as","Amount","value","status","failed","success","loading","Button","isDisabled","width","mt","WithdrawModal","liquidityPosition","txState","setTxState","useState","params","useParams","toast","useToast","isClosable","duration","queryClient","useQueryClient","setWithdrawAmount","useContext","ManagePositionContext","collateralType","useCollateralType","errorParserCoreProxy","useContractErrorParser","systemToken","useSystemToken","systemTokenBalance","useAccountSpecificCollateral","withdrawMain","withdrawAndromeda","useCallback","isBaseAndromeda","invalidateQueries","contractError","console","name","closeAll","description","ContractError","variant","cause"],"sourceRoot":""}