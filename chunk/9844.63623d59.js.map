{"version":3,"file":"chunk/9844.63623d59.js","mappings":"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","sources":["webpack://@snx-v3/staking-ui/../components/WithdrawModal/WithdrawMachine.ts","webpack://@snx-v3/staking-ui/../lib/useWithdraw/useWithdraw.tsx","webpack://@snx-v3/staking-ui/../components/WithdrawModal/WithdrawModal.tsx","webpack://@snx-v3/staking-ui/../components/WithdrawModal/index.ts"],"sourcesContent":["import Wei, { wei } from '@synthetixio/wei';\nimport { createMachine, assign } from 'xstate';\n\nexport const Events = {\n  SET_AMOUNT: 'SET_AMOUNT',\n  SET_COLLATERAL_SYMBOL: 'SET_COLLATERAL_SYMBOL',\n  RETRY: 'RETRY',\n  RUN: 'RUN',\n  SUCCESS: 'SUCCESS',\n  FAILURE: 'FAILURE',\n  RESET: 'RESET',\n} as const;\n\nexport const State = {\n  idle: 'idle',\n  withdraw: 'withdraw',\n  unwrap: 'unwrap',\n  failed: 'failed',\n  success: 'success',\n} as const;\n\nexport const FailedSteps = {\n  [State.withdraw]: State.withdraw,\n  [State.unwrap]: State.unwrap,\n} as const;\n\nexport const ServiceNames = {\n  withdraw: 'withdraw',\n  unwrap: 'unwrap',\n} as const;\n\ntype Context = {\n  error: { error: Error; step: keyof typeof FailedSteps } | null;\n  amount: Wei;\n  collateralSymbol?: string;\n};\n\ntype EventType = typeof Events;\ntype WithdrawEvents =\n  | { type: EventType['SET_AMOUNT']; amount: Wei }\n  | { type: EventType['SET_COLLATERAL_SYMBOL']; symbol: string }\n  | { type: EventType['RETRY'] }\n  | { type: EventType['RUN'] }\n  | { type: EventType['SUCCESS'] }\n  | { type: EventType['FAILURE'] }\n  | { type: EventType['RESET'] };\n\ntype StateType = typeof State;\nexport type MachineState =\n  | {\n      value: StateType['idle'];\n      context: Context & { error: null };\n    }\n  | {\n      value: StateType['withdraw'];\n      context: Context & { error: null };\n    }\n  | {\n      value: StateType['unwrap'];\n      context: Context & { error: null };\n    }\n  | {\n      value: StateType['failed'];\n      context: Context & { error: { error: Error; step: keyof typeof FailedSteps } };\n    }\n  | {\n      value: StateType['success'];\n      context: Context & {\n        error: null;\n      };\n    };\n\nconst initialContext = {\n  amount: wei(0),\n  error: null,\n  collateralSymbol: undefined,\n};\nexport const WithdrawMachine = createMachine<Context, WithdrawEvents, MachineState>({\n  id: 'WithdrawMachine',\n  initial: State.idle,\n  predictableActionArguments: true,\n  context: initialContext,\n  on: {\n    [Events.RESET]: {\n      target: State.idle,\n      actions: assign({\n        amount: (_) => initialContext.amount,\n        error: (_) => initialContext.error,\n        collateralSymbol: (_) => initialContext.collateralSymbol,\n      }),\n    },\n    [Events.SET_AMOUNT]: {\n      actions: assign({ amount: (_context, event) => event.amount }),\n    },\n    [Events.SET_COLLATERAL_SYMBOL]: {\n      actions: assign({ collateralSymbol: (_context, event) => event.symbol }),\n    },\n  },\n  states: {\n    [State.idle]: {\n      on: {\n        [Events.RUN]: [\n          { target: State.withdraw, cond: (context) => context.amount.gt(0) },\n          {\n            target: State.unwrap,\n            cond: (context) => context.amount.gt(0) && context.collateralSymbol === 'WETH',\n          },\n        ],\n      },\n    },\n    [State.withdraw]: {\n      invoke: {\n        src: ServiceNames.withdraw,\n        onError: {\n          target: State.failed,\n          actions: assign({\n            error: (_context, event) => ({ error: event.data, step: FailedSteps.withdraw }),\n          }),\n        },\n        onDone: [\n          { target: State.unwrap, cond: (context) => context.collateralSymbol === 'WETH' },\n          { target: State.success },\n        ],\n      },\n    },\n\n    [State.unwrap]: {\n      invoke: {\n        src: ServiceNames.unwrap,\n        onDone: {\n          target: State.success,\n        },\n        onError: {\n          target: State.failed,\n          actions: assign({\n            error: (_context, event) => ({ error: event.data, step: FailedSteps.unwrap }),\n          }),\n        },\n      },\n    },\n    [State.failed]: {\n      on: {\n        [Events.RETRY]: [\n          {\n            target: State.withdraw,\n            cond: (c) => c.error?.step === FailedSteps.withdraw,\n            actions: assign({ error: (_) => null }),\n          },\n          {\n            target: State.unwrap,\n            cond: (c) => c.error?.step === FailedSteps.unwrap,\n            actions: assign({ error: (_) => null }),\n          },\n        ],\n      },\n    },\n    [State.success]: {},\n  },\n});\n","import { useReducer } from 'react';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { useMutation } from '@tanstack/react-query';\nimport { useProvider, useSigner } from '@snx-v3/useBlockchain';\nimport { initialState, reducer } from '@snx-v3/txnReducer';\nimport { BigNumber } from 'ethers';\nimport { useAccountSpecificCollateral } from '@snx-v3/useAccountCollateral';\nimport { formatGasPriceForTransaction } from '@snx-v3/useGasOptions';\nimport { getGasPrice } from '@snx-v3/useGasPrice';\nimport { useGasSpeed } from '@snx-v3/useGasSpeed';\n\nexport const useWithdraw = ({\n  accountId,\n  collateralTypeAddress,\n}: {\n  accountId?: string;\n  collateralTypeAddress?: string;\n}) => {\n  const { data: accountCollateral } = useAccountSpecificCollateral(\n    accountId,\n    collateralTypeAddress\n  );\n\n  const [txnState, dispatch] = useReducer(reducer, initialState);\n  const { data: CoreProxy } = useCoreProxy();\n  const { gasSpeed } = useGasSpeed();\n  const signer = useSigner();\n  const provider = useProvider();\n\n  const mutation = useMutation({\n    mutationFn: async () => {\n      if (!signer) return;\n      if (!(CoreProxy && collateralTypeAddress && accountCollateral?.availableCollateral)) return;\n      if (accountCollateral?.availableCollateral.eq(0)) return;\n\n      try {\n        dispatch({ type: 'prompting' });\n\n        const gasPricesPromised = getGasPrice({ provider });\n        const gasLimitPromised = CoreProxy.estimateGas.withdraw(\n          BigNumber.from(accountId),\n          collateralTypeAddress,\n          accountCollateral?.availableCollateral.toBN()\n        );\n        const populatedTxnPromised = CoreProxy.populateTransaction.withdraw(\n          BigNumber.from(accountId),\n          collateralTypeAddress,\n          accountCollateral?.availableCollateral.toBN(),\n          { gasLimit: gasLimitPromised }\n        );\n        const [gasPrices, gasLimit, populatedTxn] = await Promise.all([\n          gasPricesPromised,\n          gasLimitPromised,\n          populatedTxnPromised,\n        ]);\n\n        const gasOptionsForTransaction = formatGasPriceForTransaction({\n          gasLimit,\n          gasPrices,\n          gasSpeed,\n        });\n\n        const txn = await signer.sendTransaction({ ...populatedTxn, ...gasOptionsForTransaction });\n        dispatch({ type: 'pending', payload: { txnHash: txn.hash } });\n\n        await txn.wait();\n        dispatch({ type: 'success' });\n      } catch (error: any) {\n        dispatch({ type: 'error', payload: { error } });\n        throw error;\n      }\n    },\n  });\n  return {\n    mutation,\n    txnState,\n    settle: () => dispatch({ type: 'settled' }),\n    isLoading: mutation.isLoading,\n    exec: mutation.mutateAsync,\n  };\n};\n","import {\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n  useToast,\n} from '@chakra-ui/react';\nimport React, { FC, useCallback } from 'react';\nimport { Amount } from '@snx-v3/Amount';\nimport { useUnWrapEth } from '@snx-v3/useWrapEth';\nimport { Multistep } from '@snx-v3/Multistep';\nimport { Wei } from '@synthetixio/wei';\nimport { useParams } from '@snx-v3/useParams';\nimport { Events, ServiceNames, State, WithdrawMachine } from './WithdrawMachine';\nimport { useMachine } from '@xstate/react';\nimport { useWithdraw } from '@snx-v3/useWithdraw';\nimport type { StateFrom } from 'xstate';\nimport { AccountCollateralWithSymbol } from '@snx-v3/useAccountCollateral';\nimport { useContractErrorParser } from '@snx-v3/useContractErrorParser';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { ContractError } from '@snx-v3/ContractError';\nimport { WithdrawIncrease } from '@snx-v3/WithdrawIncrease';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useNetwork } from '@snx-v3/useBlockchain';\n\nexport const WithdrawModalUi: FC<{\n  amount: Wei;\n  isOpen: boolean;\n  onClose: () => void;\n  accountCollateral?: AccountCollateralWithSymbol;\n  state: StateFrom<typeof WithdrawMachine>;\n  error: { error: Error; step: string } | null;\n  onSubmit: () => void;\n}> = ({ amount, isOpen, onClose, accountCollateral, onSubmit, state, error }) => {\n  const isProcessing = state.matches(State.withdraw) || state.matches(State.unwrap);\n  return (\n    <Modal size=\"lg\" isOpen={isOpen} onClose={onClose} closeOnOverlayClick={false}>\n      <ModalOverlay />\n      <ModalContent bg=\"black\" color=\"white\" data-testid=\"withdraw modal\">\n        <WithdrawIncrease />\n        <ModalHeader>Complete this action</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Text mb=\"2\">Please execute the following transactions:</Text>\n\n          <Multistep\n            step={1}\n            title=\"Withdraw\"\n            subtitle={\n              <Text as=\"div\">\n                <Amount value={amount} suffix={` ${accountCollateral?.symbol}`} /> will be withdrawn\n              </Text>\n            }\n            status={{\n              failed: Boolean(error?.step === State.withdraw),\n              disabled: amount.eq(0),\n              success: state.matches(State.unwrap) || state.matches(State.success),\n              loading: state.matches(State.withdraw) && !error,\n            }}\n          />\n          {accountCollateral?.symbol === 'WETH' ? (\n            <Multistep\n              step={2}\n              title={`Unwrap ${accountCollateral?.symbol}`}\n              subtitle=\"This will unwrap your WETH to ETH\"\n              status={{\n                failed: Boolean(error?.step === State.unwrap),\n                disabled: accountCollateral?.symbol !== 'WETH',\n                success: state.matches(State.success),\n                loading: state.matches(State.unwrap),\n              }}\n            />\n          ) : null}\n\n          <Button\n            isDisabled={isProcessing}\n            onClick={onSubmit}\n            width=\"100%\"\n            my=\"4\"\n            data-testid=\"withdraw confirm button\"\n          >\n            {(() => {\n              switch (true) {\n                case Boolean(error):\n                  return 'Retry';\n                case isProcessing:\n                  return 'Processing...';\n                case state.matches(State.success):\n                  return 'Done';\n                default:\n                  return 'Start';\n              }\n            })()}\n          </Button>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport function WithdrawModal({\n  accountCollateral,\n  onClose,\n  isOpen,\n}: {\n  accountCollateral: AccountCollateralWithSymbol;\n  isOpen: boolean;\n  onClose: () => void;\n}) {\n  const params = useParams();\n  const toast = useToast({ isClosable: true, duration: 9000 });\n  const network = useNetwork();\n  const { exec: unwrap } = useUnWrapEth();\n  const { exec: execWithdraw } = useWithdraw({\n    accountId: params.accountId,\n    collateralTypeAddress: accountCollateral?.tokenAddress,\n  });\n  const queryClient = useQueryClient();\n\n  const { data: CoreProxy } = useCoreProxy();\n  const errorParserCoreProxy = useContractErrorParser(CoreProxy);\n\n  const [state, send] = useMachine(WithdrawMachine, {\n    context: {\n      amount: accountCollateral?.availableCollateral,\n    },\n    services: {\n      [ServiceNames.withdraw]: async () => {\n        try {\n          await execWithdraw();\n          await queryClient.invalidateQueries({\n            queryKey: [network.name, 'AccountSpecificCollateral'],\n          });\n        } catch (error: any) {\n          const contractError = errorParserCoreProxy(error);\n          if (contractError) {\n            console.error(new Error(contractError.name), contractError);\n          }\n          toast.closeAll();\n          toast({\n            title: 'Withdraw failed',\n            description: contractError ? (\n              <ContractError contractError={contractError} />\n            ) : (\n              'Please try again.'\n            ),\n            status: 'error',\n          });\n          throw Error('Withdraw failed', { cause: error });\n        }\n      },\n      [ServiceNames.unwrap]: async () => {\n        try {\n          toast({\n            title: 'Unwrap',\n            description: 'Unwrapping WETH to ETH.',\n            status: 'info',\n          });\n\n          await unwrap(state.context.amount);\n        } catch (e) {\n          toast.closeAll();\n          toast({ title: 'Unwrap failed', description: 'Please try again.', status: 'error' });\n          throw Error('Unwrap failed', { cause: e });\n        }\n      },\n    },\n  });\n\n  const onSubmit = useCallback(async () => {\n    if (state.matches(State.success)) {\n      send(Events.RESET);\n      onClose();\n      return;\n    }\n    if (state.context.error) {\n      send(Events.RETRY);\n      return;\n    }\n    send(Events.RUN);\n  }, [onClose, send, state]);\n\n  return (\n    <WithdrawModalUi\n      amount={state.context.amount}\n      isOpen={isOpen}\n      onClose={onClose}\n      accountCollateral={accountCollateral}\n      state={state}\n      error={state.context.error}\n      onSubmit={onSubmit}\n    />\n  );\n}\n","import { WithdrawModal } from './WithdrawModal';\nexport * from './WithdrawModal';\nexport default WithdrawModal;\n"],"names":["Events","SET_AMOUNT","SET_COLLATERAL_SYMBOL","RETRY","RUN","SUCCESS","FAILURE","RESET","State","idle","withdraw","unwrap","failed","success","FailedSteps","ServiceNames","initialContext","amount","wei","error","collateralSymbol","undefined","WithdrawMachine","createMachine","id","initial","predictableActionArguments","context","on","target","actions","assign","_","_context","event","symbol","states","cond","gt","invoke","src","onError","data","step","onDone","c","useWithdraw","accountId","collateralTypeAddress","accountCollateral","useAccountSpecificCollateral","txnState","dispatch","useReducer","reducer","initialState","CoreProxy","useCoreProxy","gasSpeed","useGasSpeed","signer","useSigner","provider","useProvider","mutation","useMutation","mutationFn","async","availableCollateral","eq","type","gasPricesPromised","getGasPrice","gasLimitPromised","estimateGas","BigNumber","from","toBN","populatedTxnPromised","populateTransaction","gasLimit","gasPrices","populatedTxn","Promise","all","gasOptionsForTransaction","formatGasPriceForTransaction","txn","sendTransaction","payload","txnHash","hash","wait","settle","isLoading","exec","mutateAsync","WithdrawModalUi","isOpen","onClose","onSubmit","state","isProcessing","matches","_jsxs","Modal","size","closeOnOverlayClick","children","_jsx","ModalOverlay","ModalContent","bg","color","WithdrawIncrease","ModalHeader","ModalCloseButton","ModalBody","Text","mb","Multistep","title","subtitle","as","Amount","value","suffix","status","Boolean","disabled","loading","Button","isDisabled","onClick","width","my","WithdrawModal","params","useParams","toast","useToast","isClosable","duration","network","useNetwork","useUnWrapEth","execWithdraw","tokenAddress","queryClient","useQueryClient","errorParserCoreProxy","useContractErrorParser","send","useMachine","services","invalidateQueries","queryKey","name","contractError","console","Error","closeAll","description","ContractError","cause","e","useCallback"],"sourceRoot":""}