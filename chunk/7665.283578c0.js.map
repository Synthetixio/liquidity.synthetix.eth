{"version":3,"file":"chunk/7665.283578c0.js","mappings":"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","sources":["webpack://@snx-v3/liquidity/../lib/useWithdraw/useWithdraw.tsx","webpack://@snx-v3/liquidity/../lib/useWithdrawBaseAndromeda/useWithdrawBaseAndromeda.tsx","webpack://@snx-v3/liquidity/../components/WithdrawModal/WithdrawModal.tsx","webpack://@snx-v3/liquidity/../components/WithdrawModal/index.ts"],"sourcesContent":["import { parseUnits } from '@snx-v3/format';\nimport { initialState, reducer } from '@snx-v3/txnReducer';\nimport { useNetwork, useProvider, useSigner } from '@snx-v3/useBlockchain';\nimport { useCollateralPriceUpdates } from '@snx-v3/useCollateralPriceUpdates';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { formatGasPriceForTransaction } from '@snx-v3/useGasOptions';\nimport { getGasPrice } from '@snx-v3/useGasPrice';\nimport { useGasSpeed } from '@snx-v3/useGasSpeed';\nimport { withERC7412 } from '@snx-v3/withERC7412';\nimport Wei from '@synthetixio/wei';\nimport { useMutation } from '@tanstack/react-query';\nimport { BigNumber, ethers } from 'ethers';\nimport { useReducer } from 'react';\n\nexport const useWithdraw = ({\n  accountId,\n  collateralTypeAddress,\n  amount,\n}: {\n  accountId?: string;\n  collateralTypeAddress?: string;\n  amount: Wei;\n}) => {\n  const [txnState, dispatch] = useReducer(reducer, initialState);\n  const { data: CoreProxy } = useCoreProxy();\n  const { data: priceUpdateTx, refetch: refetchPriceUpdateTx } = useCollateralPriceUpdates();\n  const { network } = useNetwork();\n\n  const { gasSpeed } = useGasSpeed();\n  const signer = useSigner();\n  const provider = useProvider();\n\n  const mutation = useMutation({\n    mutationFn: async () => {\n      if (!signer || !network || !provider) throw new Error('No signer or network');\n\n      if (!(CoreProxy && collateralTypeAddress && amount)) {\n        throw new Error('Not ready');\n      }\n      if (amount?.eq(0)) {\n        throw new Error('Amount less than 0');\n      }\n\n      const walletAddress = await signer.getAddress();\n\n      try {\n        dispatch({ type: 'prompting' });\n\n        const contract = new ethers.Contract(\n          collateralTypeAddress,\n          ['function decimals() view returns (uint8)'],\n          provider\n        );\n\n        const decimals = await contract.decimals();\n\n        const collateralAmount = amount.gt(0)\n          ? parseUnits(amount.toString(), decimals)\n          : BigNumber.from(0);\n\n        const populatedTxnPromised = CoreProxy.populateTransaction.withdraw(\n          BigNumber.from(accountId),\n          collateralTypeAddress,\n          collateralAmount\n        );\n\n        const callsPromise = Promise.all([populatedTxnPromised]);\n        const [calls, gasPrices] = await Promise.all([callsPromise, getGasPrice({ provider })]);\n        if (priceUpdateTx) {\n          calls.unshift(priceUpdateTx as any);\n        }\n\n        const erc7412Tx = await withERC7412(network, calls, 'useWithdraw', walletAddress);\n\n        const gasOptionsForTransaction = formatGasPriceForTransaction({\n          gasLimit: erc7412Tx.gasLimit,\n          gasPrices,\n          gasSpeed,\n        });\n\n        const txn = await signer.sendTransaction({ ...erc7412Tx, ...gasOptionsForTransaction });\n        dispatch({ type: 'pending', payload: { txnHash: txn.hash } });\n\n        await txn.wait();\n        dispatch({ type: 'success' });\n      } catch (error: any) {\n        dispatch({ type: 'error', payload: { error } });\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      // After mutation withERC7412, we guaranteed to have updated all the prices, dont care about await\n      refetchPriceUpdateTx();\n    },\n  });\n  return {\n    mutation,\n    txnState,\n    settle: () => dispatch({ type: 'settled' }),\n    isLoading: mutation.isPending,\n    exec: mutation.mutateAsync,\n  };\n};\n","import { ZEROWEI } from '@snx-v3/constants';\nimport { getSpotMarketId } from '@snx-v3/isBaseAndromeda';\nimport { notNil } from '@snx-v3/tsHelpers';\nimport { initialState, reducer } from '@snx-v3/txnReducer';\nimport { AccountCollateralType } from '@snx-v3/useAccountCollateral';\nimport { useNetwork, useProvider, useSigner } from '@snx-v3/useBlockchain';\nimport { useCollateralPriceUpdates } from '@snx-v3/useCollateralPriceUpdates';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { formatGasPriceForTransaction } from '@snx-v3/useGasOptions';\nimport { getGasPrice } from '@snx-v3/useGasPrice';\nimport { useGasSpeed } from '@snx-v3/useGasSpeed';\nimport { useGetUSDTokens } from '@snx-v3/useGetUSDTokens';\nimport { useSpotMarketProxy } from '@snx-v3/useSpotMarketProxy';\nimport { useUSDProxy } from '@snx-v3/useUSDProxy';\nimport { withERC7412 } from '@snx-v3/withERC7412';\nimport { Wei } from '@synthetixio/wei';\nimport { useMutation } from '@tanstack/react-query';\nimport { BigNumber, constants, utils } from 'ethers';\nimport { useReducer } from 'react';\n\nexport const useWithdrawBaseAndromeda = ({\n  accountId,\n  availableCollateral,\n  snxUSDCollateral,\n  amountToWithdraw,\n  accountCollateral,\n  collateralSymbol,\n}: {\n  availableCollateral: Wei;\n  snxUSDCollateral: Wei;\n  amountToWithdraw: Wei;\n  accountId?: string;\n  collateralSymbol?: string;\n  accountCollateral: AccountCollateralType | undefined;\n}) => {\n  const [txnState, dispatch] = useReducer(reducer, initialState);\n  const { data: CoreProxy } = useCoreProxy();\n  const { data: SpotProxy } = useSpotMarketProxy();\n  const { data: UsdProxy } = useUSDProxy();\n  const { data: priceUpdateTx, refetch: refetchPriceUpdateTx } = useCollateralPriceUpdates();\n  const { network } = useNetwork();\n  const { data: usdTokens } = useGetUSDTokens();\n\n  const { gasSpeed } = useGasSpeed();\n  const signer = useSigner();\n  const provider = useProvider();\n\n  const mutation = useMutation({\n    mutationFn: async () => {\n      if (!signer || !network || !provider) throw new Error('No signer or network');\n      if (!(CoreProxy && SpotProxy && accountId && usdTokens?.sUSD && usdTokens.snxUSD)) {\n        throw new Error('Not ready');\n      }\n\n      const total = snxUSDCollateral.add(availableCollateral);\n\n      if (total.lt(amountToWithdraw)) {\n        throw new Error('Exceeds balance');\n      }\n\n      const wrappedCollateralAmount = amountToWithdraw.gt(availableCollateral)\n        ? availableCollateral\n        : amountToWithdraw;\n\n      const snxUSDAmount = amountToWithdraw.sub(wrappedCollateralAmount).gt(0)\n        ? amountToWithdraw.sub(wrappedCollateralAmount)\n        : ZEROWEI;\n\n      try {\n        const spotMarketId = getSpotMarketId(collateralSymbol);\n\n        dispatch({ type: 'prompting' });\n\n        const gasPricesPromised = getGasPrice({ provider });\n\n        const withdraw_collateral = wrappedCollateralAmount.gt(0)\n          ? CoreProxy.populateTransaction.withdraw(\n              BigNumber.from(accountId),\n              accountCollateral?.tokenAddress,\n              wrappedCollateralAmount.toBN()\n            )\n          : undefined;\n\n        const withdraw_snxUSD = snxUSDAmount.gt(0)\n          ? CoreProxy.populateTransaction.withdraw(\n              BigNumber.from(accountId),\n              usdTokens?.snxUSD,\n              snxUSDAmount.toBN()\n            )\n          : undefined;\n        const snxUSDApproval = snxUSDAmount.gt(0)\n          ? UsdProxy?.populateTransaction.approve(SpotProxy.address, snxUSDAmount.toBN())\n          : undefined;\n        const buy_wrappedCollateral = snxUSDAmount.gt(0)\n          ? SpotProxy.populateTransaction.buy(\n              spotMarketId,\n              snxUSDAmount.toBN(),\n              0,\n              constants.AddressZero\n            )\n          : undefined;\n\n        const synthAmount = snxUSDAmount.gt(0)\n          ? (await SpotProxy.callStatic.quoteBuyExactIn(spotMarketId, snxUSDAmount.toBN(), 0))\n              .synthAmount\n          : ZEROWEI;\n        const withdrawAmount = availableCollateral.add(synthAmount);\n\n        const unwrapTxnPromised = SpotProxy.populateTransaction.unwrap(\n          spotMarketId,\n          withdrawAmount.toBN(),\n          // 2% slippage\n          Number(\n            utils.formatUnits(withdrawAmount.toBN().mul(98).div(100).toString(), 12).toString()\n          ).toFixed()\n        );\n\n        const [\n          gasPrices,\n          withdraw_collateral_txn,\n          withdraw_snxUSD_txn,\n          snxUSDApproval_txn,\n          buy_wrappedCollateral_txn,\n          unwrapTxnPromised_txn,\n        ] = await Promise.all([\n          gasPricesPromised,\n          withdraw_collateral,\n          withdraw_snxUSD,\n          snxUSDApproval,\n          buy_wrappedCollateral,\n          unwrapTxnPromised,\n        ]);\n\n        const allCalls = [\n          withdraw_collateral_txn,\n          withdraw_snxUSD_txn,\n          snxUSDApproval_txn,\n          buy_wrappedCollateral_txn,\n          unwrapTxnPromised_txn,\n        ].filter(notNil);\n\n        if (priceUpdateTx) {\n          allCalls.unshift(priceUpdateTx as any);\n        }\n\n        const walletAddress = await signer.getAddress();\n        const erc7412Tx = await withERC7412(network, allCalls, 'useWithdrawBase', walletAddress);\n\n        const gasOptionsForTransaction = formatGasPriceForTransaction({\n          gasLimit: erc7412Tx.gasLimit,\n          gasPrices,\n          gasSpeed,\n        });\n\n        const txn = await signer.sendTransaction({ ...erc7412Tx, ...gasOptionsForTransaction });\n        dispatch({ type: 'pending', payload: { txnHash: txn.hash } });\n\n        await txn.wait();\n        dispatch({ type: 'success' });\n      } catch (error: any) {\n        dispatch({ type: 'error', payload: { error } });\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      // After mutation withERC7412, we guaranteed to have updated all the prices, dont care about await\n      refetchPriceUpdateTx();\n    },\n  });\n\n  return {\n    mutation,\n    txnState,\n    settle: () => dispatch({ type: 'settled' }),\n    isLoading: mutation.isPending,\n    exec: mutation.mutateAsync,\n  };\n};\n","import { Button, Divider, Text, useToast, Link } from '@chakra-ui/react';\nimport React, { FC, useCallback, useContext, useState } from 'react';\nimport { Multistep } from '@snx-v3/Multistep';\nimport { Wei } from '@synthetixio/wei';\nimport { useWithdraw } from '@snx-v3/useWithdraw';\nimport { useAccountSpecificCollateral } from '@snx-v3/useAccountCollateral';\nimport { useContractErrorParser } from '@snx-v3/useContractErrorParser';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { ContractError } from '@snx-v3/ContractError';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useNetwork } from '@snx-v3/useBlockchain';\nimport { ArrowBackIcon } from '@chakra-ui/icons';\nimport { LiquidityPositionUpdated } from '../../ui/src/components/Manage/LiquidityPositionUpdated';\nimport { LiquidityPosition } from '@snx-v3/useLiquidityPosition';\nimport { isBaseAndromeda } from '@snx-v3/isBaseAndromeda';\nimport { ZEROWEI } from '@snx-v3/constants';\nimport { useWithdrawBaseAndromeda } from '@snx-v3/useWithdrawBaseAndromeda';\nimport { ManagePositionContext } from '@snx-v3/ManagePositionContext';\nimport { useParams } from '@snx-v3/useParams';\nimport { Amount } from '@snx-v3/Amount';\nimport { useSystemToken } from '@snx-v3/useSystemToken';\nimport { useCollateralType } from '@snx-v3/useCollateralTypes';\n\nexport const WithdrawModalUi: FC<{\n  amount: Wei;\n  isOpen: boolean;\n  onClose: () => void;\n  symbol?: string;\n  state: {\n    step: number;\n    status: string;\n  };\n  onSubmit: () => void;\n  isDebtWithdrawal: boolean;\n}> = ({ isDebtWithdrawal, amount, isOpen, onClose, onSubmit, state, symbol }) => {\n  if (isOpen) {\n    if (state.step > 1) {\n      return (\n        <LiquidityPositionUpdated\n          onClose={onSubmit}\n          title={(isDebtWithdrawal ? 'Debt' : 'Collateral') + ' successfully Withdrawn'}\n          subline={\n            <>\n              Your <b>{isDebtWithdrawal ? 'Debt' : 'Collateral'}</b> has been withdrawn, read more\n              about it in the{' '}\n              <Link\n                href=\"https://docs.synthetix.io/v/synthetix-v3-user-documentation\"\n                target=\"_blank\"\n                color=\"cyan.500\"\n              >\n                Synthetix V3 Documentation\n              </Link>\n            </>\n          }\n          alertText={(isDebtWithdrawal ? 'Debt' : 'Collateral') + ' successfully Withdrawn'}\n        />\n      );\n    }\n\n    return (\n      <div data-cy=\"withdraw multistep\">\n        <Text color=\"gray.50\" fontSize=\"20px\" fontWeight={700}>\n          <ArrowBackIcon cursor=\"pointer\" onClick={onClose} mr={2} />\n          Manage {isDebtWithdrawal ? 'Debt' : 'Collateral'}\n        </Text>\n        <Divider my={4} />\n\n        <Multistep\n          step={1}\n          title=\"Withdraw\"\n          subtitle={\n            <Text as=\"div\">\n              <Amount value={amount} />\n              &nbsp;{symbol} will be withdrawn\n            </Text>\n          }\n          status={{\n            failed: state.step === 1 && state.status === 'error',\n            success: state.step > 1,\n            loading: state.step === 1 && state.status === 'pending',\n          }}\n        />\n\n        <Button\n          isDisabled={state.status === 'pending'}\n          onClick={onSubmit}\n          width=\"100%\"\n          mt=\"6\"\n          data-cy=\"withdraw confirm button\"\n        >\n          {(() => {\n            switch (true) {\n              case state.status === 'error':\n                return 'Retry';\n              case state.status === 'pending':\n                return 'Processing...';\n              case state.step > 1:\n                return 'Done';\n              default:\n                return 'Execute Transaction';\n            }\n          })()}\n        </Button>\n      </div>\n    );\n  }\n};\n\nexport function WithdrawModal({\n  liquidityPosition,\n  onClose,\n  isOpen,\n  isDebtWithdrawal = false,\n}: {\n  liquidityPosition?: LiquidityPosition;\n  isOpen: boolean;\n  onClose: () => void;\n  isDebtWithdrawal?: boolean;\n}) {\n  const [txState, setTxState] = useState({\n    step: 1,\n    status: 'idle',\n  });\n\n  const params = useParams();\n  const toast = useToast({ isClosable: true, duration: 9000 });\n  const { network } = useNetwork();\n  const queryClient = useQueryClient();\n\n  const { withdrawAmount, setWithdrawAmount } = useContext(ManagePositionContext);\n\n  const { data: collateralType } = useCollateralType(params.collateralSymbol);\n  const { data: CoreProxy } = useCoreProxy();\n  const errorParserCoreProxy = useContractErrorParser(CoreProxy);\n  const accountId = liquidityPosition?.accountId;\n\n  const { data: systemToken } = useSystemToken();\n  const { data: systemTokenBalance } = useAccountSpecificCollateral(\n    accountId,\n    systemToken?.address\n  );\n\n  const { mutation: withdrawMain } = useWithdraw({\n    amount: withdrawAmount,\n    accountId,\n    collateralTypeAddress: isDebtWithdrawal\n      ? systemToken?.address\n      : liquidityPosition?.accountCollateral?.tokenAddress,\n  });\n\n  const { mutation: withdrawAndromeda } = useWithdrawBaseAndromeda({\n    accountId,\n    availableCollateral: liquidityPosition?.accountCollateral.availableCollateral || ZEROWEI,\n    snxUSDCollateral: systemTokenBalance?.availableCollateral || ZEROWEI,\n    amountToWithdraw: withdrawAmount,\n    accountCollateral: liquidityPosition?.accountCollateral,\n    collateralSymbol: params.collateralSymbol,\n  });\n\n  const onSubmit = useCallback(async () => {\n    try {\n      if (txState.step === 1) {\n        setTxState({\n          step: 1,\n          status: 'pending',\n        });\n\n        if (!isBaseAndromeda(network?.id, network?.preset)) {\n          await withdrawMain.mutateAsync();\n        } else {\n          await withdrawAndromeda.mutateAsync();\n        }\n\n        setTxState({\n          step: 2,\n          status: 'success',\n        });\n\n        queryClient.invalidateQueries({\n          queryKey: [`${network?.id}-${network?.preset}`, 'LiquidityPosition', { accountId }],\n        });\n        queryClient.invalidateQueries({\n          queryKey: [\n            `${network?.id}-${network?.preset}`,\n            'AccountSpecificCollateral',\n            { accountId },\n          ],\n        });\n        queryClient.invalidateQueries({\n          queryKey: [`${network?.id}-${network?.preset}`, 'LiquidityPositions', { accountId }],\n        });\n        queryClient.invalidateQueries({\n          queryKey: [\n            `${network?.id}-${network?.preset}`,\n            'AccountCollateralUnlockDate',\n            { accountId },\n          ],\n        });\n        queryClient.invalidateQueries({\n          queryKey: [`${network?.id}-${network?.preset}`, 'TokenBalance'],\n        });\n\n        setWithdrawAmount(ZEROWEI);\n      } else {\n        onClose();\n      }\n    } catch (error) {\n      setTxState((state) => ({\n        ...state,\n        status: 'error',\n      }));\n\n      const contractError = errorParserCoreProxy(error);\n      if (contractError) {\n        console.error(new Error(contractError.name), contractError);\n      }\n      toast.closeAll();\n      toast({\n        title: 'Withdraw failed',\n        description: contractError ? (\n          <ContractError contractError={contractError} />\n        ) : (\n          'Please try again.'\n        ),\n        status: 'error',\n        variant: 'left-accent',\n      });\n      throw Error('Withdraw failed', { cause: error });\n    }\n  }, [\n    accountId,\n    errorParserCoreProxy,\n    network?.id,\n    network?.preset,\n    onClose,\n    queryClient,\n    setWithdrawAmount,\n    toast,\n    txState.step,\n    withdrawAndromeda,\n    withdrawMain,\n  ]);\n\n  return (\n    <WithdrawModalUi\n      amount={withdrawAmount}\n      isOpen={isOpen}\n      onClose={onClose}\n      symbol={isDebtWithdrawal ? systemToken?.symbol : collateralType?.symbol}\n      state={txState}\n      onSubmit={onSubmit}\n      isDebtWithdrawal={isDebtWithdrawal}\n    />\n  );\n}\n","import { WithdrawModal } from './WithdrawModal';\nexport * from './WithdrawModal';\nexport default WithdrawModal;\n"],"names":["useWithdraw","accountId","collateralTypeAddress","amount","txnState","dispatch","useReducer","reducer","initialState","data","CoreProxy","useCoreProxy","priceUpdateTx","refetch","refetchPriceUpdateTx","useCollateralPriceUpdates","network","useNetwork","gasSpeed","useGasSpeed","signer","useSigner","provider","useProvider","mutation","useMutation","mutationFn","async","Error","eq","walletAddress","getAddress","type","contract","ethers","decimals","collateralAmount","gt","parseUnits","toString","BigNumber","from","populatedTxnPromised","populateTransaction","withdraw","callsPromise","Promise","all","calls","gasPrices","getGasPrice","unshift","erc7412Tx","withERC7412","gasOptionsForTransaction","formatGasPriceForTransaction","gasLimit","txn","sendTransaction","payload","txnHash","hash","wait","error","onSuccess","settle","isLoading","isPending","exec","mutateAsync","useWithdrawBaseAndromeda","availableCollateral","snxUSDCollateral","amountToWithdraw","accountCollateral","collateralSymbol","SpotProxy","useSpotMarketProxy","UsdProxy","useUSDProxy","usdTokens","useGetUSDTokens","sUSD","snxUSD","add","lt","wrappedCollateralAmount","snxUSDAmount","sub","ZEROWEI","spotMarketId","getSpotMarketId","gasPricesPromised","withdraw_collateral","tokenAddress","toBN","undefined","withdraw_snxUSD","snxUSDApproval","approve","address","buy_wrappedCollateral","buy","constants","synthAmount","callStatic","quoteBuyExactIn","withdrawAmount","unwrapTxnPromised","unwrap","Number","utils","mul","div","toFixed","withdraw_collateral_txn","withdraw_snxUSD_txn","snxUSDApproval_txn","buy_wrappedCollateral_txn","unwrapTxnPromised_txn","allCalls","filter","notNil","WithdrawModalUi","isDebtWithdrawal","isOpen","onClose","onSubmit","state","symbol","step","_jsx","LiquidityPositionUpdated","title","subline","_jsxs","_Fragment","children","Link","href","target","color","alertText","Text","fontSize","fontWeight","ArrowBackIcon","cursor","onClick","mr","Divider","my","Multistep","subtitle","as","Amount","value","status","failed","success","loading","Button","isDisabled","width","mt","WithdrawModal","liquidityPosition","txState","setTxState","useState","params","useParams","toast","useToast","isClosable","duration","queryClient","useQueryClient","setWithdrawAmount","useContext","ManagePositionContext","collateralType","useCollateralType","errorParserCoreProxy","useContractErrorParser","systemToken","useSystemToken","systemTokenBalance","useAccountSpecificCollateral","withdrawMain","withdrawAndromeda","useCallback","isBaseAndromeda","id","preset","invalidateQueries","queryKey","contractError","console","name","closeAll","description","ContractError","variant","cause"],"sourceRoot":""}