{"version":3,"file":"chunk/2739.d2d531cc.js","mappings":"2KAEO,MAAMA,EAAU,KACVC,EAAM,CACjB,qCACA,sHACA,2EACA,wCACA,4FACA,qEACA,0C","sources":["webpack://@snx-v3/liquidity/../../contracts/src/1-main/RewardDistributor.ts"],"sourcesContent":["// !!! DO NOT EDIT !!! Automatically generated file\n\nexport const address = null;\nexport const abi = [\n  'error Unauthorized(address sender)',\n  'function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint256 start, uint256 duration)',\n  'function initialize(address rewardManager, address token_, string name_)',\n  'function name() view returns (string)',\n  'function payout(uint128, uint128, address, address sender, uint256 amount) returns (bool)',\n  'function supportsInterface(bytes4 interfaceId) view returns (bool)',\n  'function token() view returns (address)',\n];\n\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  Overrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from 'ethers';\nimport type { FunctionFragment, Result } from '@ethersproject/abi';\nimport type { Listener, Provider } from '@ethersproject/providers';\nimport type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';\n\nexport interface RewardDistributorInterface extends utils.Interface {\n  functions: {\n    'distributeRewards(uint128,address,uint256,uint256,uint256)': FunctionFragment;\n    'initialize(address,address,string)': FunctionFragment;\n    'name()': FunctionFragment;\n    'payout(uint128,uint128,address,address,uint256)': FunctionFragment;\n    'supportsInterface(bytes4)': FunctionFragment;\n    'token()': FunctionFragment;\n  };\n\n  getFunction(\n    nameOrSignatureOrTopic:\n      | 'distributeRewards'\n      | 'initialize'\n      | 'name'\n      | 'payout'\n      | 'supportsInterface'\n      | 'token'\n  ): FunctionFragment;\n\n  encodeFunctionData(\n    functionFragment: 'distributeRewards',\n    values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish]\n  ): string;\n  encodeFunctionData(functionFragment: 'initialize', values: [string, string, string]): string;\n  encodeFunctionData(functionFragment: 'name', values?: undefined): string;\n  encodeFunctionData(\n    functionFragment: 'payout',\n    values: [BigNumberish, BigNumberish, string, string, BigNumberish]\n  ): string;\n  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;\n  encodeFunctionData(functionFragment: 'token', values?: undefined): string;\n\n  decodeFunctionResult(functionFragment: 'distributeRewards', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'payout', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;\n\n  events: {};\n}\n\nexport interface RewardDistributor extends BaseContract {\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: RewardDistributorInterface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    distributeRewards(\n      poolId: BigNumberish,\n      collateralType: string,\n      amount: BigNumberish,\n      start: BigNumberish,\n      duration: BigNumberish,\n      overrides?: Overrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    initialize(\n      rewardManager: string,\n      token_: string,\n      name_: string,\n      overrides?: Overrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    name(overrides?: CallOverrides): Promise<[string]>;\n\n    payout(\n      arg0: BigNumberish,\n      arg1: BigNumberish,\n      arg2: string,\n      sender: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;\n\n    token(overrides?: CallOverrides): Promise<[string]>;\n  };\n\n  distributeRewards(\n    poolId: BigNumberish,\n    collateralType: string,\n    amount: BigNumberish,\n    start: BigNumberish,\n    duration: BigNumberish,\n    overrides?: Overrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  initialize(\n    rewardManager: string,\n    token_: string,\n    name_: string,\n    overrides?: Overrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  name(overrides?: CallOverrides): Promise<string>;\n\n  payout(\n    arg0: BigNumberish,\n    arg1: BigNumberish,\n    arg2: string,\n    sender: string,\n    amount: BigNumberish,\n    overrides?: Overrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;\n\n  token(overrides?: CallOverrides): Promise<string>;\n\n  callStatic: {\n    distributeRewards(\n      poolId: BigNumberish,\n      collateralType: string,\n      amount: BigNumberish,\n      start: BigNumberish,\n      duration: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    initialize(\n      rewardManager: string,\n      token_: string,\n      name_: string,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    name(overrides?: CallOverrides): Promise<string>;\n\n    payout(\n      arg0: BigNumberish,\n      arg1: BigNumberish,\n      arg2: string,\n      sender: string,\n      amount: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n\n    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;\n\n    token(overrides?: CallOverrides): Promise<string>;\n  };\n\n  filters: {};\n\n  estimateGas: {\n    distributeRewards(\n      poolId: BigNumberish,\n      collateralType: string,\n      amount: BigNumberish,\n      start: BigNumberish,\n      duration: BigNumberish,\n      overrides?: Overrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    initialize(\n      rewardManager: string,\n      token_: string,\n      name_: string,\n      overrides?: Overrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    name(overrides?: CallOverrides): Promise<BigNumber>;\n\n    payout(\n      arg0: BigNumberish,\n      arg1: BigNumberish,\n      arg2: string,\n      sender: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;\n\n    token(overrides?: CallOverrides): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    distributeRewards(\n      poolId: BigNumberish,\n      collateralType: string,\n      amount: BigNumberish,\n      start: BigNumberish,\n      duration: BigNumberish,\n      overrides?: Overrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    initialize(\n      rewardManager: string,\n      token_: string,\n      name_: string,\n      overrides?: Overrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    payout(\n      arg0: BigNumberish,\n      arg1: BigNumberish,\n      arg2: string,\n      sender: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    supportsInterface(\n      interfaceId: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n  };\n}\n\n"],"names":["address","abi"],"sourceRoot":""}