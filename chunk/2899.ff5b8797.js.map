{"version":3,"file":"chunk/2899.ff5b8797.js","mappings":"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","sources":["webpack://@snx-v3/liquidity/../components/ContractError/ContractError.tsx","webpack://@snx-v3/liquidity/../components/Multistep/StepIcon.tsx","webpack://@snx-v3/liquidity/../components/Multistep/statusColor.ts","webpack://@snx-v3/liquidity/../components/Multistep/Step.tsx","webpack://@snx-v3/liquidity/../components/Multistep/Multistep.tsx","webpack://@snx-v3/liquidity/../components/RepayModal/RepayMachine.ts","webpack://@snx-v3/liquidity/../components/RepayModal/RepayModal.tsx","webpack://@snx-v3/liquidity/../lib/useRepay/useRepay.tsx","webpack://@snx-v3/liquidity/../lib/useRepayBaseAndromeda/useRepayBaseAndromeda.tsx","webpack://@snx-v3/liquidity/../components/RepayModal/index.ts","webpack://@snx-v3/liquidity/../lib/useContractErrorParser/useContractErrorParser.ts"],"sourcesContent":["import React from 'react';\nimport { Button, Collapse, Text } from '@chakra-ui/react';\nimport format from 'date-fns/format';\nimport { ContractErrorType } from '@snx-v3/useContractErrorParser';\n\nconst defaultOpen = window?.localStorage?.CONTRACT_ERROR_OPEN === 'true';\n\nexport function ContractError({ contractError }: { contractError: ContractErrorType }) {\n  const [isOpen, setIsOpen] = React.useState(defaultOpen);\n\n  return (\n    <>\n      {!isOpen ? (\n        <Button\n          variant=\"link\"\n          onClick={() => setIsOpen(true)}\n          color=\"inherit\"\n          fontWeight=\"normal\"\n          fontStyle=\"italic\"\n        >\n          details...\n        </Button>\n      ) : null}\n      <Collapse in={isOpen} animateOpacity>\n        <Text fontStyle=\"italic\" fontSize=\"0.8em\">\n          {contractError.name}\n        </Text>\n        <Text whiteSpace=\"pre\" fontSize=\"0.8em\" fontStyle=\"italic\" pl=\"0.5em\">\n          {Object.entries(contractError.args)\n            .map(\n              ([key, val]) =>\n                `${key}: ${val instanceof Date ? format(val, 'yyyy-MM-dd HH:mm:ss') : val}`\n            )\n            .join('\\n')}\n        </Text>\n      </Collapse>\n    </>\n  );\n}\n","import { Box, Spinner } from '@chakra-ui/react';\nimport { PropsWithChildren } from 'react';\nimport { MultistepStatus } from './MultistepStatus';\n\nimport { createIcon } from '@chakra-ui/icon';\n\nexport const CheckIcon = createIcon({\n  viewBox: '0 0 14 14',\n  path: (\n    <g fill=\"currentColor\">\n      <polygon points=\"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039\" />\n    </g>\n  ),\n});\n\nexport const CloseIcon = createIcon({\n  d: 'M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z',\n});\n\nexport function StepIcon({ status, children }: PropsWithChildren<{ status: MultistepStatus }>) {\n  switch (true) {\n    case status.failed:\n      return <CloseIcon color=\"white\" />;\n    case status.success:\n      return <CheckIcon color=\"white\" />;\n    case status.loading:\n      return <Spinner color=\"white\" width={6} height={6} />;\n    case status.disabled:\n    default:\n      return (\n        <Box\n          __css={{\n            display: 'inline',\n            fontWeight: 'medium',\n            textAlign: 'center',\n            fontSize: 'md',\n          }}\n        >\n          {children}\n        </Box>\n      );\n  }\n}\n","import { MultistepStatus } from './MultistepStatus';\n\nexport function statusColor(status: MultistepStatus): string {\n  switch (true) {\n    // order matters\n    case status.failed:\n      return 'red.700';\n    case status.disabled:\n      return 'gray.700';\n    case status.loading:\n      return 'gray.700';\n    case status.success:\n      return 'green.700';\n    default:\n      return 'gray.700';\n  }\n}\n","import { Flex } from '@chakra-ui/react';\nimport { PropsWithChildren } from 'react';\nimport { MultistepStatus } from './MultistepStatus';\nimport { StepIcon } from './StepIcon';\nimport { statusColor } from './statusColor';\n\nexport function Step({ status, children }: PropsWithChildren<{ status: MultistepStatus }>) {\n  return (\n    <Flex\n      width={10}\n      height={10}\n      minWidth={10}\n      minHeight={10}\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      bg={statusColor(status)}\n      rounded=\"full\"\n      transitionProperty=\"background\"\n      transitionDuration=\"normal\"\n    >\n      <StepIcon status={status}>{children}</StepIcon>\n    </Flex>\n  );\n}\n","import { PropsWithChildren, ReactElement } from 'react';\nimport { Box, Checkbox, CheckboxProps, Flex, Text } from '@chakra-ui/react';\nimport { Step } from './Step';\nimport { statusColor } from './statusColor';\nimport { MultistepStatus } from './MultistepStatus';\n\nfunction StepCheckbox({ children, ...props }: PropsWithChildren<CheckboxProps>) {\n  return (\n    <Flex mt=\"0.5\">\n      <Checkbox size=\"sm\" {...props}>\n        <Box fontSize=\"xs\" opacity=\"0.66\">\n          {children}\n        </Box>\n      </Checkbox>\n    </Flex>\n  );\n}\n\nexport function Multistep({\n  step,\n  title,\n  subtitle,\n  checkboxLabel,\n  checkboxProps,\n  status,\n  children,\n}: PropsWithChildren<{\n  step: number;\n  title: string | ReactElement;\n  subtitle?: string | ReactElement;\n  checkboxLabel?: string;\n  checkboxProps?: CheckboxProps;\n  status: MultistepStatus;\n}>) {\n  return (\n    <Flex\n      position=\"relative\"\n      alignItems=\"center\"\n      gap={4}\n      rounded=\"lg\"\n      mt=\"4\"\n      p=\"4\"\n      border=\"2px solid\"\n      transitionProperty=\"border-color\"\n      transitionDuration=\"normal\"\n      borderColor={statusColor(status)}\n    >\n      <Step status={status}>{step}</Step>\n      <Flex direction=\"column\">\n        <Text data-cy={`multistep-${step}`}>{title}</Text>\n        {subtitle ? (\n          <Text as=\"div\" fontSize=\"xs\" opacity=\"0.66\">\n            {subtitle}\n          </Text>\n        ) : null}\n        {checkboxLabel ? <StepCheckbox {...checkboxProps}>{checkboxLabel}</StepCheckbox> : null}\n        {children}\n      </Flex>\n    </Flex>\n  );\n}\n","import { createMachine, assign } from 'xstate';\n\nexport const Events = {\n  SET_REQUIRE_APPROVAL: 'SET_REQUIRE_APPROVAL',\n  SET_INFINITE_APPROVAL: 'SET_INFINITE_APPROVAL',\n  RETRY: 'RETRY',\n  RUN: 'RUN',\n  SUCCESS: 'SUCCESS',\n  FAILURE: 'FAILURE',\n  RESET: 'RESET',\n} as const;\n\nexport const State = {\n  idle: 'idle',\n  approve: 'approve',\n  repay: 'repay',\n  failed: 'failed',\n  success: 'success',\n} as const;\n\nconst FailedSteps = {\n  [State.approve]: State.approve,\n  [State.repay]: State.repay,\n} as const;\n\nexport const ServiceNames = {\n  approveSUSD: 'approveSUSD',\n  executeRepay: 'executeRepay',\n} as const;\n\ntype Context = {\n  error: {\n    error: Error;\n    step: keyof typeof FailedSteps;\n  } | null;\n  requireApproval: boolean;\n  infiniteApproval: boolean;\n};\n\ntype EventNamesType = typeof Events;\ntype RepayEvents =\n  | { type: EventNamesType['SET_REQUIRE_APPROVAL']; requireApproval: boolean }\n  | { type: EventNamesType['SET_INFINITE_APPROVAL']; infiniteApproval: boolean }\n  | { type: EventNamesType['RETRY'] }\n  | { type: EventNamesType['RUN'] }\n  | { type: EventNamesType['SUCCESS'] }\n  | { type: EventNamesType['FAILURE'] }\n  | { type: EventNamesType['RESET'] };\n\ntype StateType = typeof State;\ntype MachineState =\n  | {\n      value: StateType['idle'];\n      context: Context & { error: null };\n    }\n  | {\n      value: StateType['approve'];\n      context: Context & { error: null };\n    }\n  | {\n      value: StateType['repay'];\n      context: Context & { error: null };\n    }\n  | {\n      value: StateType['failed'];\n      context: Context & { error: { error: Error; step: keyof typeof FailedSteps } };\n    }\n  | {\n      value: StateType['success'];\n      context: Context & {\n        error: null;\n      };\n    };\n\nconst initialContext = {\n  error: null,\n  requireApproval: false,\n  infiniteApproval: false,\n};\n\nexport const RepayMachine = createMachine<Context, RepayEvents, MachineState>({\n  id: 'RepayMachine',\n  initial: State.idle,\n  predictableActionArguments: true,\n  context: initialContext,\n  on: {\n    [Events.RUN]: {\n      target: State.repay,\n      actions: assign({\n        error: (_) => initialContext.error,\n        requireApproval: (_) => initialContext.requireApproval,\n        infiniteApproval: (_) => initialContext.infiniteApproval,\n      }),\n    },\n    [Events.SET_REQUIRE_APPROVAL]: {\n      actions: assign({ requireApproval: (_context, event) => event.requireApproval }),\n    },\n\n    [Events.SET_INFINITE_APPROVAL]: {\n      actions: assign({ infiniteApproval: (_context, event) => event.infiniteApproval }),\n    },\n  },\n  states: {\n    [State.idle]: {\n      on: {\n        [Events.RUN]: [\n          { target: State.approve, cond: (context) => context.requireApproval },\n          { target: State.repay },\n        ],\n      },\n    },\n\n    [State.approve]: {\n      invoke: {\n        src: ServiceNames.approveSUSD,\n        onDone: {\n          target: State.repay,\n        },\n        onError: {\n          target: State.failed,\n          actions: assign({\n            error: (_context, event) => ({ error: event.data, step: FailedSteps.approve }),\n          }),\n        },\n      },\n    },\n    [State.repay]: {\n      invoke: {\n        src: ServiceNames.executeRepay,\n        onDone: {\n          target: State.success,\n        },\n        onError: {\n          target: State.failed,\n          actions: assign({\n            error: (_context, event) => ({ error: event.data, step: FailedSteps.repay }),\n          }),\n        },\n      },\n    },\n    [State.failed]: {\n      on: {\n        [Events.RETRY]: [\n          {\n            target: State.approve,\n            cond: (c) => c.error?.step === FailedSteps.approve,\n            actions: assign({ error: (_) => null }),\n          },\n\n          {\n            target: State.repay,\n            cond: (c) => c.error?.step === FailedSteps.repay,\n            actions: assign({ error: (_) => null }),\n          },\n        ],\n      },\n    },\n    [State.success]: {},\n  },\n});\n","import {\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n  useToast,\n} from '@chakra-ui/react';\nimport { Amount } from '@snx-v3/Amount';\nimport { ContractError } from '@snx-v3/ContractError';\nimport { parseUnits } from '@snx-v3/format';\nimport { isBaseAndromeda } from '@snx-v3/isBaseAndromeda';\nimport { ManagePositionContext } from '@snx-v3/ManagePositionContext';\nimport { Multistep } from '@snx-v3/Multistep';\nimport { useApprove } from '@snx-v3/useApprove';\nimport { useNetwork } from '@snx-v3/useBlockchain';\nimport { useCollateralType } from '@snx-v3/useCollateralTypes';\nimport { useContractErrorParser } from '@snx-v3/useContractErrorParser';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { useGetUSDTokens } from '@snx-v3/useGetUSDTokens';\nimport { useParams } from '@snx-v3/useParams';\nimport { useRepay } from '@snx-v3/useRepay';\nimport { useRepayBaseAndromeda } from '@snx-v3/useRepayBaseAndromeda';\nimport { useSpotMarketProxy } from '@snx-v3/useSpotMarketProxy';\nimport { useTokenBalance } from '@snx-v3/useTokenBalance';\nimport { useUSDProxy } from '@snx-v3/useUSDProxy';\nimport Wei from '@synthetixio/wei';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useMachine } from '@xstate/react';\nimport { useCallback, useContext, useEffect } from 'react';\nimport type { StateFrom } from 'xstate';\nimport { Events, RepayMachine, ServiceNames, State } from './RepayMachine';\n\nexport const RepayModalUi: React.FC<{\n  onClose: () => void;\n  debtChange: Wei;\n  isOpen: boolean;\n  onSubmit: () => void;\n  state: StateFrom<typeof RepayMachine>;\n  setInfiniteApproval: (x: boolean) => void;\n}> = ({ onClose, isOpen, debtChange, state, onSubmit, setInfiniteApproval }) => {\n  const isProcessing = state.matches(State.approve) || state.matches(State.repay);\n  const { infiniteApproval, requireApproval, error } = state.context;\n\n  return (\n    <Modal size=\"lg\" isOpen={isOpen} onClose={onClose} closeOnOverlayClick={false}>\n      <ModalOverlay />\n      <ModalContent bg=\"black\" color=\"white\" data-testid=\"repay modal\">\n        <ModalHeader>Complete this action</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Multistep\n            step={1}\n            title=\"Approve sUSD transfer\"\n            status={{\n              failed: error?.step === State.approve,\n              success: !requireApproval || state.matches(State.success),\n              loading: state.matches(State.approve) && !error,\n            }}\n            checkboxLabel=\"Approve unlimited sUSD transfers to Synthetix.\"\n            checkboxProps={{\n              isChecked: infiniteApproval,\n              onChange: (e) => setInfiniteApproval(e.target.checked),\n            }}\n          />\n          <Multistep\n            step={2}\n            title=\"Repay\"\n            subtitle={\n              <Text>\n                Repay <Amount value={debtChange.abs()} suffix={` sUSD`} />\n              </Text>\n            }\n            status={{\n              failed: error?.step === State.repay,\n              success: state.matches(State.success),\n              loading: state.matches(State.repay) && !error,\n            }}\n          />\n\n          <Button\n            isDisabled={isProcessing}\n            onClick={onSubmit}\n            width=\"100%\"\n            my=\"4\"\n            data-testid=\"repay confirm button\"\n          >\n            {(() => {\n              switch (true) {\n                case Boolean(error):\n                  return 'Retry';\n                case isProcessing:\n                  return 'Processing...';\n                case state.matches(State.success):\n                  return 'Done';\n                default:\n                  return 'Start';\n              }\n            })()}\n          </Button>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport const RepayModal: React.FC<{\n  onClose: () => void;\n  isOpen: boolean;\n  availableCollateral?: Wei;\n}> = ({ onClose, isOpen, availableCollateral }) => {\n  const { debtChange } = useContext(ManagePositionContext);\n  const params = useParams();\n\n  const { network } = useNetwork();\n  const { data: usdTokens } = useGetUSDTokens();\n  const queryClient = useQueryClient();\n  const { data: USDProxy } = useUSDProxy();\n\n  const { data: collateralType } = useCollateralType(params.collateralSymbol);\n  const { data: balance } = useTokenBalance(USDProxy?.address);\n\n  const { exec: execRepay, settle: settleRepay } = useRepay({\n    accountId: params.accountId,\n    poolId: params.poolId,\n    collateralTypeAddress: collateralType?.tokenAddress,\n    debtChange,\n    availableUSDCollateral: availableCollateral,\n    balance,\n  });\n\n  const { exec: execRepayBaseAndromeda, settle: settleRepayBaseAndromeda } = useRepayBaseAndromeda({\n    accountId: params.accountId,\n    poolId: params.poolId,\n    collateralTypeAddress: collateralType?.tokenAddress,\n    debtChange,\n    availableUSDCollateral: availableCollateral,\n  });\n\n  const toast = useToast({ isClosable: true, duration: 9000 });\n\n  const { data: CoreProxy } = useCoreProxy();\n  const { data: SpotProxy } = useSpotMarketProxy();\n\n  const errorParserCoreProxy = useContractErrorParser(CoreProxy);\n  const amountToDeposit = debtChange.abs().sub(availableCollateral || 0);\n\n  const collateralAddress = isBaseAndromeda(network?.id, network?.preset)\n    ? usdTokens?.USDC\n    : USDProxy?.address;\n\n  const { approve, requireApproval } = useApprove({\n    contractAddress: collateralAddress,\n    amount: isBaseAndromeda(network?.id, network?.preset)\n      ? //Base USDC is 6 decimals\n        parseUnits(amountToDeposit.toString(), 6)\n      : amountToDeposit.toBN(),\n    spender: isBaseAndromeda(network?.id, network?.preset)\n      ? SpotProxy?.address\n      : CoreProxy?.address,\n  });\n\n  const [state, send] = useMachine(RepayMachine, {\n    services: {\n      [ServiceNames.approveSUSD]: async () => {\n        try {\n          toast({\n            title: 'Approve sUSD for transfer',\n            description: 'The next transaction will repay your debt.',\n            status: 'info',\n          });\n\n          await approve(Boolean(state.context.infiniteApproval));\n        } catch (error: any) {\n          const contractError = errorParserCoreProxy(error);\n          if (contractError) {\n            console.error(new Error(contractError.name), contractError);\n          }\n          toast.closeAll();\n          toast({\n            title: 'Approval failed',\n            description: contractError ? (\n              <ContractError contractError={contractError} />\n            ) : (\n              'Please try again.'\n            ),\n            status: 'error',\n          });\n          throw Error('Approve failed', { cause: error });\n        }\n      },\n\n      [ServiceNames.executeRepay]: async () => {\n        try {\n          toast.closeAll();\n          toast({ title: 'Repaying...' });\n          if (isBaseAndromeda(network?.id, network?.preset)) {\n            await execRepayBaseAndromeda();\n          } else {\n            await execRepay();\n          }\n\n          await Promise.all([\n            queryClient.invalidateQueries({\n              queryKey: [`${network?.id}-${network?.preset}`, 'TokenBalance'],\n            }),\n            queryClient.invalidateQueries({\n              queryKey: [`${network?.id}-${network?.preset}`, 'Allowance'],\n            }),\n            queryClient.invalidateQueries({\n              queryKey: [`${network?.id}-${network?.preset}`, 'LiquidityPosition'],\n            }),\n          ]);\n\n          toast.closeAll();\n          toast({\n            title: 'Success',\n            description: 'Your debt has been repaid.',\n            status: 'success',\n            duration: 5000,\n          });\n        } catch (error: any) {\n          const contractError = errorParserCoreProxy(error);\n          if (contractError) {\n            console.error(new Error(contractError.name), contractError);\n          }\n          toast({\n            title: 'Could not complete repaying',\n            description: contractError ? (\n              <ContractError contractError={contractError} />\n            ) : (\n              'Please try again.'\n            ),\n            status: 'error',\n          });\n          throw Error('Repay failed', { cause: error });\n        }\n      },\n    },\n  });\n  const needToDeposit = amountToDeposit.gt(0);\n\n  useEffect(() => {\n    send(Events.SET_REQUIRE_APPROVAL, { requireApproval: requireApproval && needToDeposit });\n  }, [needToDeposit, requireApproval, send]);\n\n  const onSubmit = useCallback(async () => {\n    if (state.matches(State.success)) {\n      send(Events.RESET);\n      onClose();\n      return;\n    }\n    if (state.context.error) {\n      send(Events.RETRY);\n      return;\n    }\n    send(Events.RUN);\n  }, [onClose, send, state]);\n\n  if (!params.poolId || !params.accountId || !collateralType) return null;\n\n  return (\n    <RepayModalUi\n      state={state}\n      onSubmit={onSubmit}\n      debtChange={debtChange}\n      setInfiniteApproval={(infiniteApproval) => {\n        send(Events.SET_INFINITE_APPROVAL, { infiniteApproval });\n      }}\n      onClose={() => {\n        settleRepay();\n        settleRepayBaseAndromeda();\n        onClose();\n      }}\n      isOpen={isOpen}\n    />\n  );\n};\n","import { useReducer } from 'react';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { formatGasPriceForTransaction } from '@snx-v3/useGasOptions';\nimport { useMutation } from '@tanstack/react-query';\nimport { useNetwork, useProvider, useSigner } from '@snx-v3/useBlockchain';\nimport { initialState, reducer } from '@snx-v3/txnReducer';\nimport Wei from '@synthetixio/wei';\nimport { BigNumber } from 'ethers';\nimport { getGasPrice } from '@snx-v3/useGasPrice';\nimport { useGasSpeed } from '@snx-v3/useGasSpeed';\nimport { useUSDProxy } from '@snx-v3/useUSDProxy';\nimport { notNil } from '@snx-v3/tsHelpers';\nimport { withERC7412 } from '@snx-v3/withERC7412';\nimport { useAllCollateralPriceIds } from '@snx-v3/useAllCollateralPriceIds';\nimport { fetchPriceUpdates, priceUpdatesToPopulatedTx } from '@snx-v3/fetchPythPrices';\n\nexport const useRepay = ({\n  accountId,\n  poolId,\n  collateralTypeAddress,\n  debtChange,\n  balance,\n  availableUSDCollateral,\n}: {\n  accountId?: string;\n  poolId?: string;\n  collateralTypeAddress?: string;\n  balance?: Wei;\n  availableUSDCollateral?: Wei;\n  debtChange: Wei;\n}) => {\n  const [txnState, dispatch] = useReducer(reducer, initialState);\n  const { data: CoreProxy } = useCoreProxy();\n  const { data: UsdProxy } = useUSDProxy();\n  const { data: collateralPriceIds } = useAllCollateralPriceIds();\n\n  const signer = useSigner();\n  const { network } = useNetwork();\n  const { gasSpeed } = useGasSpeed();\n  const provider = useProvider();\n\n  const mutation = useMutation({\n    mutationFn: async () => {\n      if (!signer || !network || !provider) throw new Error('No signer or network');\n      if (\n        !(\n          CoreProxy &&\n          poolId &&\n          accountId &&\n          collateralTypeAddress &&\n          UsdProxy &&\n          collateralPriceIds\n        )\n      ) {\n        return;\n      }\n      if (!balance) return;\n      if (!availableUSDCollateral) return;\n      if (debtChange.eq(0)) return;\n      const debtChangeAbs = debtChange.abs();\n      const amountToDeposit = debtChangeAbs.sub(availableUSDCollateral);\n\n      try {\n        dispatch({ type: 'prompting' });\n\n        // Only deposit if user doesn't have enough sUSD collateral\n        const deposit = amountToDeposit.lte(0)\n          ? undefined\n          : CoreProxy.populateTransaction.deposit(\n              BigNumber.from(accountId),\n              UsdProxy.address,\n              amountToDeposit.toBN() // only deposit what's needed\n            );\n\n        const burn = CoreProxy.populateTransaction.burnUsd(\n          BigNumber.from(accountId),\n          BigNumber.from(poolId),\n          collateralTypeAddress,\n          debtChangeAbs.toBN()\n        );\n\n        const callsPromise = Promise.all([deposit, burn].filter(notNil));\n        const walletAddress = await signer.getAddress();\n        const collateralPriceCallsPromise = fetchPriceUpdates(\n          collateralPriceIds,\n          network.isTestnet\n        ).then((signedData) =>\n          priceUpdatesToPopulatedTx(walletAddress, collateralPriceIds, signedData)\n        );\n\n        const [calls, gasPrices, collateralPriceCalls] = await Promise.all([\n          callsPromise,\n          getGasPrice({ provider }),\n          collateralPriceCallsPromise,\n        ]);\n        const allCalls = collateralPriceCalls.concat(calls);\n\n        const erc7412Tx = await withERC7412(network, allCalls, 'useRepay');\n\n        const gasOptionsForTransaction = formatGasPriceForTransaction({\n          gasLimit: erc7412Tx.gasLimit,\n          gasPrices,\n          gasSpeed,\n        });\n\n        const txn = await signer.sendTransaction({ ...erc7412Tx, ...gasOptionsForTransaction });\n        dispatch({ type: 'pending', payload: { txnHash: txn.hash } });\n\n        await txn.wait();\n        dispatch({ type: 'success' });\n      } catch (error: any) {\n        dispatch({ type: 'error', payload: { error } });\n        throw error;\n      }\n    },\n  });\n  return {\n    mutation,\n    txnState,\n    settle: () => dispatch({ type: 'settled' }),\n    isLoading: mutation.isPending,\n    exec: mutation.mutateAsync,\n  };\n};\n","import { useReducer } from 'react';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { formatGasPriceForTransaction } from '@snx-v3/useGasOptions';\nimport { useMutation } from '@tanstack/react-query';\nimport { useNetwork, useProvider, useSigner } from '@snx-v3/useBlockchain';\nimport { initialState, reducer } from '@snx-v3/txnReducer';\nimport Wei from '@synthetixio/wei';\nimport { BigNumber, ethers } from 'ethers';\nimport { getGasPrice } from '@snx-v3/useGasPrice';\nimport { useGasSpeed } from '@snx-v3/useGasSpeed';\nimport { useUSDProxy } from '@snx-v3/useUSDProxy';\nimport { notNil } from '@snx-v3/tsHelpers';\nimport { withERC7412 } from '@snx-v3/withERC7412';\nimport { useSpotMarketProxy } from '../useSpotMarketProxy';\nimport { USDC_BASE_MARKET } from '@snx-v3/isBaseAndromeda';\nimport { parseUnits } from '@snx-v3/format';\nimport { approveAbi } from '@snx-v3/useApprove';\nimport { useCollateralPriceUpdates } from '../useCollateralPriceUpdates';\nimport { useGetUSDTokens } from '@snx-v3/useGetUSDTokens';\n\nexport const useRepayBaseAndromeda = ({\n  accountId,\n  poolId,\n  collateralTypeAddress,\n  debtChange,\n  availableUSDCollateral,\n}: {\n  accountId?: string;\n  poolId?: string;\n  collateralTypeAddress?: string;\n  availableUSDCollateral?: Wei;\n  debtChange: Wei;\n}) => {\n  const [txnState, dispatch] = useReducer(reducer, initialState);\n  const { data: CoreProxy } = useCoreProxy();\n  const { data: UsdProxy } = useUSDProxy();\n  const { data: SpotMarketProxy } = useSpotMarketProxy();\n  const { data: priceUpdateTx } = useCollateralPriceUpdates();\n  const { data: usdTokens } = useGetUSDTokens();\n\n  const signer = useSigner();\n  const { network } = useNetwork();\n  const { gasSpeed } = useGasSpeed();\n  const provider = useProvider();\n\n  const mutation = useMutation({\n    mutationFn: async () => {\n      if (!signer || !network || !provider) throw new Error('No signer or network');\n\n      if (\n        !(\n          CoreProxy &&\n          poolId &&\n          accountId &&\n          collateralTypeAddress &&\n          UsdProxy &&\n          SpotMarketProxy &&\n          usdTokens?.sUSD\n        )\n      ) {\n        return;\n      }\n\n      if (!availableUSDCollateral) return;\n      if (debtChange.eq(0)) return;\n      const debtChangeAbs = debtChange.abs();\n      const amountToDeposit = debtChangeAbs.sub(availableUSDCollateral);\n      const usdcAmount = amountToDeposit.gt(0)\n        ? parseUnits(amountToDeposit.toString(), 6)\n        : BigNumber.from(0);\n\n      try {\n        dispatch({ type: 'prompting' });\n\n        // USDC => sUSDC\n        const wrap = amountToDeposit.gt(0)\n          ? SpotMarketProxy.populateTransaction.wrap(USDC_BASE_MARKET, usdcAmount, 0)\n          : undefined;\n\n        const sUSDC_ADDRESS = usdTokens?.sUSD;\n        const sUSDC_Contract = new ethers.Contract(sUSDC_ADDRESS, approveAbi, signer);\n\n        const sUSDC_Approval = amountToDeposit.gt(0)\n          ? sUSDC_Contract.populateTransaction.approve(\n              SpotMarketProxy.address,\n              amountToDeposit.toBN()\n            )\n          : undefined;\n\n        // sell sUSDC => sUSD\n        const sell = amountToDeposit.gt(0)\n          ? SpotMarketProxy.populateTransaction.sell(\n              USDC_BASE_MARKET,\n              amountToDeposit.toBN(),\n              0,\n              ethers.constants.AddressZero\n            )\n          : undefined;\n\n        // approve sUSD to Core\n        const sUSD_Contract = new ethers.Contract(UsdProxy.address, approveAbi, signer);\n\n        const sUSD_Approval = amountToDeposit.gt(0)\n          ? sUSD_Contract.populateTransaction.approve(CoreProxy.address, amountToDeposit.toBN())\n          : undefined;\n\n        // Only deposit if user doesn't have enough sUSD collateral\n        const deposit = amountToDeposit.lte(0)\n          ? undefined\n          : CoreProxy.populateTransaction.deposit(\n              BigNumber.from(accountId),\n              UsdProxy.address,\n              amountToDeposit.toBN() // only deposit what's needed\n            );\n\n        const burn = CoreProxy.populateTransaction.burnUsd(\n          BigNumber.from(accountId),\n          BigNumber.from(poolId),\n          collateralTypeAddress,\n          debtChangeAbs.toBN()\n        );\n\n        const callsPromise = Promise.all(\n          [wrap, sUSDC_Approval, sell, sUSD_Approval, deposit, burn].filter(notNil)\n        );\n\n        const [calls, gasPrices] = await Promise.all([callsPromise, getGasPrice({ provider })]);\n        if (priceUpdateTx) {\n          calls.push(priceUpdateTx as any);\n        }\n\n        const erc7412Tx = await withERC7412(network, calls, 'useRepay');\n\n        const gasOptionsForTransaction = formatGasPriceForTransaction({\n          gasLimit: erc7412Tx.gasLimit,\n          gasPrices,\n          gasSpeed,\n        });\n\n        const txn = await signer.sendTransaction({ ...erc7412Tx, ...gasOptionsForTransaction });\n        dispatch({ type: 'pending', payload: { txnHash: txn.hash } });\n\n        await txn.wait();\n        dispatch({ type: 'success' });\n      } catch (error: any) {\n        dispatch({ type: 'error', payload: { error } });\n        throw error;\n      }\n    },\n  });\n  return {\n    mutation,\n    txnState,\n    settle: () => dispatch({ type: 'settled' }),\n    isLoading: mutation.isPending,\n    exec: mutation.mutateAsync,\n  };\n};\n","import { RepayModal } from './RepayModal';\nexport * from './RepayModal';\nexport default RepayModal;\n","import { ethers, utils } from 'ethers';\nimport { useCallback } from 'react';\nimport { ERC7412_ABI } from '@snx-v3/withERC7412';\n\nexport type ContractErrorType = {\n  data: string;\n  name: string;\n  signature: string;\n  args: Record<string, any>;\n};\n\nexport function useContractErrorParser(Contract?: ethers.Contract) {\n  return useCallback(\n    (error: any): ContractErrorType | undefined => {\n      if (!Contract) {\n        return undefined;\n      }\n      try {\n        const errorData = error?.error?.data?.data || error?.error?.error?.data; // add more options as we find them\n        if (!errorData) {\n          console.error({ error }); // intentional logging as object so we can inspect all properties\n          return undefined;\n        }\n\n        const contractAbi = Contract.interface.format(utils.FormatTypes.full) as string[];\n        const newContract = new ethers.Contract(\n          Contract.address,\n          Array.from(\n            new Set(\n              contractAbi.concat(ERC7412_ABI).concat([\n                // ERC721 errors\n                'error CannotSelfApprove(address addr)',\n                'error InvalidTransferRecipient(address addr)',\n                'error InvalidOwner(address addr)',\n                'error TokenDoesNotExist(uint256 id)',\n                'error TokenAlreadyMinted(uint256 id)',\n              ])\n            )\n          ), // uniq\n          Contract.signer || Contract.provider\n        );\n        const errorParsed = newContract.interface.parseError(errorData);\n        const errorArgs = Object.fromEntries(\n          Object.entries(errorParsed.args)\n            .filter(([key]) => `${parseInt(key)}` !== key)\n            .map(([key, value]) => {\n              if (value instanceof ethers.BigNumber) {\n                // Guess wei\n                const unwei = parseFloat(ethers.utils.formatEther(value.toString()));\n                if (unwei > 0.001) {\n                  // must be wei\n                  return [key, unwei];\n                }\n\n                // Guess date\n                if (\n                  value.toNumber() > new Date(2000, 1, 1).getTime() / 1000 &&\n                  value.toNumber() < new Date(2100, 1, 1).getTime() / 1000\n                ) {\n                  return [key, new Date(value.toNumber() * 1000)];\n                }\n\n                // Just a number\n                return [key, parseFloat(value.toString())];\n              }\n\n              // Not a number\n              return [key, value];\n            })\n        );\n\n        return {\n          data: errorData,\n          name: errorParsed.name,\n          signature: errorParsed.signature,\n          args: errorArgs,\n        };\n      } catch (e) {\n        console.error(e);\n        return undefined;\n      }\n    },\n    [Contract]\n  );\n}\n"],"names":["defaultOpen","window","localStorage","CONTRACT_ERROR_OPEN","ContractError","contractError","isOpen","setIsOpen","React","_jsxs","_Fragment","children","_jsx","Button","variant","onClick","color","fontWeight","fontStyle","Collapse","in","animateOpacity","Text","fontSize","name","whiteSpace","pl","Object","entries","args","map","key","val","Date","format","join","CheckIcon","createIcon","viewBox","path","fill","points","CloseIcon","d","StepIcon","status","failed","success","loading","Spinner","width","height","disabled","Box","__css","display","textAlign","statusColor","Step","Flex","minWidth","minHeight","justifyContent","alignItems","bg","rounded","transitionProperty","transitionDuration","StepCheckbox","props","mt","Checkbox","size","opacity","Multistep","step","title","subtitle","checkboxLabel","checkboxProps","position","gap","p","border","borderColor","direction","as","Events","State","FailedSteps","ServiceNames","initialContext","error","requireApproval","infiniteApproval","RepayMachine","createMachine","id","initial","predictableActionArguments","context","on","target","actions","assign","_","_context","event","states","cond","invoke","src","onDone","onError","data","approve","repay","c","RepayModalUi","onClose","debtChange","state","onSubmit","setInfiniteApproval","isProcessing","matches","Modal","closeOnOverlayClick","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","isChecked","onChange","e","checked","Amount","value","abs","suffix","isDisabled","my","Boolean","RepayModal","availableCollateral","useContext","ManagePositionContext","params","useParams","network","useNetwork","usdTokens","useGetUSDTokens","queryClient","useQueryClient","USDProxy","useUSDProxy","collateralType","useCollateralType","collateralSymbol","balance","useTokenBalance","address","exec","execRepay","settle","settleRepay","useRepay","accountId","poolId","collateralTypeAddress","availableUSDCollateral","txnState","dispatch","useReducer","reducer","initialState","CoreProxy","useCoreProxy","UsdProxy","collateralPriceIds","useAllCollateralPriceIds","signer","useSigner","gasSpeed","useGasSpeed","provider","useProvider","mutation","useMutation","mutationFn","async","Error","eq","debtChangeAbs","amountToDeposit","sub","type","deposit","lte","undefined","populateTransaction","BigNumber","from","toBN","burn","burnUsd","callsPromise","Promise","all","filter","notNil","walletAddress","getAddress","collateralPriceCallsPromise","fetchPriceUpdates","isTestnet","then","signedData","priceUpdatesToPopulatedTx","calls","gasPrices","collateralPriceCalls","getGasPrice","allCalls","concat","erc7412Tx","withERC7412","gasOptionsForTransaction","formatGasPriceForTransaction","gasLimit","txn","sendTransaction","payload","txnHash","hash","wait","isLoading","isPending","mutateAsync","tokenAddress","execRepayBaseAndromeda","settleRepayBaseAndromeda","useRepayBaseAndromeda","SpotMarketProxy","useSpotMarketProxy","priceUpdateTx","useCollateralPriceUpdates","sUSD","usdcAmount","gt","parseUnits","toString","wrap","USDC_BASE_MARKET","sUSDC_ADDRESS","sUSDC_Contract","ethers","approveAbi","sUSDC_Approval","sell","sUSD_Contract","sUSD_Approval","push","toast","useToast","isClosable","duration","SpotProxy","errorParserCoreProxy","useContractErrorParser","collateralAddress","isBaseAndromeda","preset","USDC","useApprove","contractAddress","amount","spender","send","useMachine","services","description","console","closeAll","cause","invalidateQueries","queryKey","needToDeposit","useEffect","useCallback","Contract","errorData","contractAbi","interface","utils","full","errorParsed","Array","Set","ERC7412_ABI","parseError","errorArgs","fromEntries","parseInt","unwei","parseFloat","toNumber","getTime","signature"],"sourceRoot":""}