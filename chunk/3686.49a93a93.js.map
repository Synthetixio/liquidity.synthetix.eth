{"version":3,"file":"chunk/3686.49a93a93.js","mappings":"geAuBO,MAAMA,EAWRA,EAAGC,mBAAkBC,SAAQC,SAAQC,UAASC,WAAUC,QAAOC,aAClE,GAAIJ,EACF,OAAIG,EAAME,KAAO,GAEbC,EAAAA,EAAAA,KAACC,EAAAA,EAAwB,CACvBN,QAASC,EACTM,OAAQV,EAAmB,OAAS,cAAgB,0BACpDW,SACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CAAE,SACKN,EAAAA,EAAAA,KAAA,KAAAM,SAAId,EAAmB,OAAS,eAAiB,iDACtC,KAChBQ,EAAAA,EAAAA,KAACO,EAAAA,EAAI,CACHC,KAAK,8DACLC,OAAO,SACPC,MAAM,WAAUJ,SACjB,kCAKLK,WAAYnB,EAAmB,OAAS,cAAgB,6BAM5DY,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEF,EAAAA,EAAAA,MAACQ,EAAAA,EAAI,CAACF,MAAM,UAAUG,SAAS,OAAOC,WAAY,IAAIR,SAAA,EACpDN,EAAAA,EAAAA,KAACe,EAAAA,EAAa,CAACC,OAAO,UAAUC,QAAStB,EAASuB,GAAI,IAAK,UACnD1B,EAAmB,OAAS,iBAEtCQ,EAAAA,EAAAA,KAACmB,EAAAA,EAAO,CAACC,GAAI,KAEbpB,EAAAA,EAAAA,KAACqB,EAAAA,GAAS,CACRtB,KAAM,EACNG,MAAM,WACNoB,UACElB,EAAAA,EAAAA,MAACQ,EAAAA,EAAI,CAACW,GAAG,MAAKjB,SAAA,EACZN,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,CAACC,MAAOhC,IAAU,IAClBK,EAAO,wBAGlB4B,OAAQ,CACNC,OAAuB,IAAf9B,EAAME,MAA+B,UAAjBF,EAAM6B,OAClCE,QAAS/B,EAAME,KAAO,EACtB8B,QAAwB,IAAfhC,EAAME,MAA+B,YAAjBF,EAAM6B,WAIvC1B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CACLC,WAA6B,YAAjBlC,EAAM6B,OAClBT,QAASrB,EACToC,MAAM,OACNC,GAAG,IACH,cAAY,0BAAyB3B,SAEpC,MACC,QAAQ,GACN,IAAsB,UAAjBT,EAAM6B,OACT,MAAO,QACT,IAAsB,YAAjB7B,EAAM6B,OACT,MAAO,gBACT,KAAK7B,EAAME,KAAO,EAChB,MAAO,OACT,QACE,MAAO,sBAEZ,EAXA,OAeT,EAGK,SAASmC,GAAc,kBAC5BC,EAAiB,QACjBxC,EAAO,OACPD,EAAM,iBACNF,GAAmB,IAOnB,MAAO4C,EAASC,IAAcC,EAAAA,EAAAA,UAAS,CACrCvC,KAAM,EACN2B,OAAQ,UAEJ,eAAEa,EAAc,kBAAEC,IAAsBC,EAAAA,EAAAA,YAAWC,EAAAA,GACnDC,GAASC,EAAAA,EAAAA,OACPC,KAAMC,IAAmBC,EAAAA,EAAAA,GAAkBJ,EAAOK,kBACpDC,GAAQC,EAAAA,EAAAA,GAAS,CAAEC,YAAY,EAAMC,SAAU,OAC/C,QAAEC,IAAYC,EAAAA,EAAAA,MACdC,GAAcC,EAAAA,EAAAA,mBACZX,KAAMY,IAAcC,EAAAA,EAAAA,KACtBC,GAAuBC,EAAAA,EAAAA,GAAuBH,GAC9CI,EAAY1B,GAAmB0B,WAE7BhB,KAAMiB,IAAgBC,EAAAA,EAAAA,MACtBlB,KAAMmB,IAAuBC,EAAAA,EAAAA,IACnCJ,EACAC,GAAaI,UAGPC,SAAUC,IAAiBC,EAAAA,EAAAA,GAAY,CAC7C5E,OAAQ8C,EACRsB,YACAS,sBAAuB9E,EACnBsE,EAAYI,QACZ/B,GAAmBoC,kBAAkBC,gBAGnCL,SAAUM,IAAsBC,EAAAA,EAAAA,GAAyB,CAC/Db,YACAc,gBAAiBxC,GAAmBoC,kBAAkBK,qBAAuBC,EAAAA,GAC7EC,iBAAkBd,GAAoBY,qBAAuBC,EAAAA,GAC7DE,iBAAkBxC,IAGd3C,GAAWoF,EAAAA,EAAAA,cAAYC,UAC3B,IACuB,IAAjB7C,EAAQrC,MACVsC,EAAW,CACTtC,KAAM,EACN2B,OAAQ,aAGLwD,EAAAA,EAAAA,IAAgB7B,GAAS8B,GAAI9B,GAAS+B,cAGnCX,EAAkBY,oBAFlBjB,EAAaiB,cAKrBhD,EAAW,CACTtC,KAAM,EACN2B,OAAQ,YAGV6B,EAAY+B,kBAAkB,CAC5BC,SAAU,CAAC,GAAGlC,GAAS8B,MAAM9B,GAAS+B,SAAU,oBAAqB,CAAEvB,gBAEzEN,EAAY+B,kBAAkB,CAC5BC,SAAU,CACR,GAAGlC,GAAS8B,MAAM9B,GAAS+B,SAC3B,4BACA,CAAEvB,gBAGNN,EAAY+B,kBAAkB,CAC5BC,SAAU,CAAC,GAAGlC,GAAS8B,MAAM9B,GAAS+B,SAAU,qBAAsB,CAAEvB,gBAE1EN,EAAY+B,kBAAkB,CAC5BC,SAAU,CACR,GAAGlC,GAAS8B,MAAM9B,GAAS+B,SAC3B,8BACA,CAAEvB,gBAGNN,EAAY+B,kBAAkB,CAC5BC,SAAU,CAAC,GAAGlC,GAAS8B,MAAM9B,GAAS+B,SAAU,kBAGlD5C,EAAkBqC,EAAAA,KAElBlF,GAEJ,CAAE,MAAO6F,GACPnD,GAAYxC,IAAK,IACZA,EACH6B,OAAQ,YAGV,MAAM+D,EAAgB9B,EAAqB6B,GAe3C,MAdIC,GACFC,QAAQF,MAAM,IAAIG,MAAMF,EAAcG,MAAOH,GAE/CxC,EAAM4C,WACN5C,EAAM,CACJ/C,MAAO,kBACP4F,YAAaL,GACXzF,EAAAA,EAAAA,KAAC+F,EAAAA,EAAa,CAACN,cAAeA,IAE9B,oBAEF/D,OAAQ,QACRsE,QAAS,gBAELL,MAAM,kBAAmB,CAAEM,MAAOT,GAC1C,IACC,CACD3B,EACAF,EACAN,GAAS8B,GACT9B,GAAS+B,OACTzF,EACA4D,EACAf,EACAS,EACAb,EAAQrC,KACR0E,EACAL,IAGF,OACEpE,EAAAA,EAAAA,KAACT,EAAe,CACdE,OAAQ8C,EACR7C,OAAQA,EACRC,QAASA,EACTG,OAAQN,EAAmBsE,EAAYhE,OAASgD,GAAgBhD,OAChED,MAAOuC,EACPxC,SAAUA,EACVJ,iBAAkBA,GAGxB,CCvPA,S","sources":["webpack://@snx-v3/liquidity/../components/WithdrawModal/WithdrawModal.tsx","webpack://@snx-v3/liquidity/../components/WithdrawModal/index.ts"],"sourcesContent":["import { Button, Divider, Text, useToast, Link } from '@chakra-ui/react';\nimport React, { FC, useCallback, useContext, useState } from 'react';\nimport { Multistep } from '@snx-v3/Multistep';\nimport { Wei } from '@synthetixio/wei';\nimport { useWithdraw } from '@snx-v3/useWithdraw';\nimport { useAccountSpecificCollateral } from '@snx-v3/useAccountCollateral';\nimport { useContractErrorParser } from '@snx-v3/useContractErrorParser';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { ContractError } from '@snx-v3/ContractError';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useNetwork } from '@snx-v3/useBlockchain';\nimport { ArrowBackIcon } from '@chakra-ui/icons';\nimport { LiquidityPositionUpdated } from '../../ui/src/components/Manage/LiquidityPositionUpdated';\nimport { LiquidityPosition } from '@snx-v3/useLiquidityPosition';\nimport { isBaseAndromeda } from '@snx-v3/isBaseAndromeda';\nimport { ZEROWEI } from '../../ui/src/utils/constants';\nimport { useWithdrawBaseAndromeda } from '@snx-v3/useWithdrawBaseAndromeda';\nimport { ManagePositionContext } from '@snx-v3/ManagePositionContext';\nimport { useParams } from '@snx-v3/useParams';\nimport { Amount } from '@snx-v3/Amount';\nimport { useSystemToken } from '@snx-v3/useSystemToken';\nimport { useCollateralType } from '@snx-v3/useCollateralTypes';\n\nexport const WithdrawModalUi: FC<{\n  amount: Wei;\n  isOpen: boolean;\n  onClose: () => void;\n  symbol?: string;\n  state: {\n    step: number;\n    status: string;\n  };\n  onSubmit: () => void;\n  isDebtWithdrawal: boolean;\n}> = ({ isDebtWithdrawal, amount, isOpen, onClose, onSubmit, state, symbol }) => {\n  if (isOpen) {\n    if (state.step > 1) {\n      return (\n        <LiquidityPositionUpdated\n          onClose={onSubmit}\n          title={(isDebtWithdrawal ? 'Debt' : 'Collateral') + ' successfully Withdrawn'}\n          subline={\n            <>\n              Your <b>{isDebtWithdrawal ? 'Debt' : 'Collateral'}</b> has been withdrawn, read more\n              about it in the{' '}\n              <Link\n                href=\"https://docs.synthetix.io/v/synthetix-v3-user-documentation\"\n                target=\"_blank\"\n                color=\"cyan.500\"\n              >\n                Synthetix V3 Documentation\n              </Link>\n            </>\n          }\n          alertText={(isDebtWithdrawal ? 'Debt' : 'Collateral') + ' successfully Withdrawn'}\n        />\n      );\n    }\n\n    return (\n      <div>\n        <Text color=\"gray.50\" fontSize=\"20px\" fontWeight={700}>\n          <ArrowBackIcon cursor=\"pointer\" onClick={onClose} mr={2} />\n          Manage {isDebtWithdrawal ? 'Debt' : 'Collateral'}\n        </Text>\n        <Divider my={4} />\n\n        <Multistep\n          step={1}\n          title=\"Withdraw\"\n          subtitle={\n            <Text as=\"div\">\n              <Amount value={amount} />\n              &nbsp;{symbol} will be withdrawn\n            </Text>\n          }\n          status={{\n            failed: state.step === 1 && state.status === 'error',\n            success: state.step > 1,\n            loading: state.step === 1 && state.status === 'pending',\n          }}\n        />\n\n        <Button\n          isDisabled={state.status === 'pending'}\n          onClick={onSubmit}\n          width=\"100%\"\n          mt=\"6\"\n          data-testid=\"withdraw confirm button\"\n        >\n          {(() => {\n            switch (true) {\n              case state.status === 'error':\n                return 'Retry';\n              case state.status === 'pending':\n                return 'Processing...';\n              case state.step > 1:\n                return 'Done';\n              default:\n                return 'Execute Transaction';\n            }\n          })()}\n        </Button>\n      </div>\n    );\n  }\n};\n\nexport function WithdrawModal({\n  liquidityPosition,\n  onClose,\n  isOpen,\n  isDebtWithdrawal = false,\n}: {\n  liquidityPosition?: LiquidityPosition;\n  isOpen: boolean;\n  onClose: () => void;\n  isDebtWithdrawal?: boolean;\n}) {\n  const [txState, setTxState] = useState({\n    step: 1,\n    status: 'idle',\n  });\n  const { withdrawAmount, setWithdrawAmount } = useContext(ManagePositionContext);\n  const params = useParams();\n  const { data: collateralType } = useCollateralType(params.collateralSymbol);\n  const toast = useToast({ isClosable: true, duration: 9000 });\n  const { network } = useNetwork();\n  const queryClient = useQueryClient();\n  const { data: CoreProxy } = useCoreProxy();\n  const errorParserCoreProxy = useContractErrorParser(CoreProxy);\n  const accountId = liquidityPosition?.accountId;\n\n  const { data: systemToken } = useSystemToken();\n  const { data: systemTokenBalance } = useAccountSpecificCollateral(\n    accountId,\n    systemToken?.address\n  );\n\n  const { mutation: withdrawMain } = useWithdraw({\n    amount: withdrawAmount,\n    accountId,\n    collateralTypeAddress: isDebtWithdrawal\n      ? systemToken.address\n      : liquidityPosition?.accountCollateral.tokenAddress,\n  });\n\n  const { mutation: withdrawAndromeda } = useWithdrawBaseAndromeda({\n    accountId,\n    sUSDCCollateral: liquidityPosition?.accountCollateral.availableCollateral || ZEROWEI,\n    snxUSDCollateral: systemTokenBalance?.availableCollateral || ZEROWEI,\n    amountToWithdraw: withdrawAmount,\n  });\n\n  const onSubmit = useCallback(async () => {\n    try {\n      if (txState.step === 1) {\n        setTxState({\n          step: 1,\n          status: 'pending',\n        });\n\n        if (!isBaseAndromeda(network?.id, network?.preset)) {\n          await withdrawMain.mutateAsync();\n        } else {\n          await withdrawAndromeda.mutateAsync();\n        }\n\n        setTxState({\n          step: 2,\n          status: 'success',\n        });\n\n        queryClient.invalidateQueries({\n          queryKey: [`${network?.id}-${network?.preset}`, 'LiquidityPosition', { accountId }],\n        });\n        queryClient.invalidateQueries({\n          queryKey: [\n            `${network?.id}-${network?.preset}`,\n            'AccountSpecificCollateral',\n            { accountId },\n          ],\n        });\n        queryClient.invalidateQueries({\n          queryKey: [`${network?.id}-${network?.preset}`, 'LiquidityPositions', { accountId }],\n        });\n        queryClient.invalidateQueries({\n          queryKey: [\n            `${network?.id}-${network?.preset}`,\n            'AccountCollateralUnlockDate',\n            { accountId },\n          ],\n        });\n        queryClient.invalidateQueries({\n          queryKey: [`${network?.id}-${network?.preset}`, 'TokenBalance'],\n        });\n\n        setWithdrawAmount(ZEROWEI);\n      } else {\n        onClose();\n      }\n    } catch (error) {\n      setTxState((state) => ({\n        ...state,\n        status: 'error',\n      }));\n\n      const contractError = errorParserCoreProxy(error);\n      if (contractError) {\n        console.error(new Error(contractError.name), contractError);\n      }\n      toast.closeAll();\n      toast({\n        title: 'Withdraw failed',\n        description: contractError ? (\n          <ContractError contractError={contractError} />\n        ) : (\n          'Please try again.'\n        ),\n        status: 'error',\n        variant: 'left-accent',\n      });\n      throw Error('Withdraw failed', { cause: error });\n    }\n  }, [\n    accountId,\n    errorParserCoreProxy,\n    network?.id,\n    network?.preset,\n    onClose,\n    queryClient,\n    setWithdrawAmount,\n    toast,\n    txState.step,\n    withdrawAndromeda,\n    withdrawMain,\n  ]);\n\n  return (\n    <WithdrawModalUi\n      amount={withdrawAmount}\n      isOpen={isOpen}\n      onClose={onClose}\n      symbol={isDebtWithdrawal ? systemToken.symbol : collateralType?.symbol}\n      state={txState}\n      onSubmit={onSubmit}\n      isDebtWithdrawal={isDebtWithdrawal}\n    />\n  );\n}\n","import { WithdrawModal } from './WithdrawModal';\nexport * from './WithdrawModal';\nexport default WithdrawModal;\n"],"names":["WithdrawModalUi","isDebtWithdrawal","amount","isOpen","onClose","onSubmit","state","symbol","step","_jsx","LiquidityPositionUpdated","title","subline","_jsxs","_Fragment","children","Link","href","target","color","alertText","Text","fontSize","fontWeight","ArrowBackIcon","cursor","onClick","mr","Divider","my","Multistep","subtitle","as","Amount","value","status","failed","success","loading","Button","isDisabled","width","mt","WithdrawModal","liquidityPosition","txState","setTxState","useState","withdrawAmount","setWithdrawAmount","useContext","ManagePositionContext","params","useParams","data","collateralType","useCollateralType","collateralSymbol","toast","useToast","isClosable","duration","network","useNetwork","queryClient","useQueryClient","CoreProxy","useCoreProxy","errorParserCoreProxy","useContractErrorParser","accountId","systemToken","useSystemToken","systemTokenBalance","useAccountSpecificCollateral","address","mutation","withdrawMain","useWithdraw","collateralTypeAddress","accountCollateral","tokenAddress","withdrawAndromeda","useWithdrawBaseAndromeda","sUSDCCollateral","availableCollateral","ZEROWEI","snxUSDCollateral","amountToWithdraw","useCallback","async","isBaseAndromeda","id","preset","mutateAsync","invalidateQueries","queryKey","error","contractError","console","Error","name","closeAll","description","ContractError","variant","cause"],"sourceRoot":""}