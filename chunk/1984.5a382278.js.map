{"version":3,"file":"chunk/1984.5a382278.js","mappings":"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","sources":["webpack://@snx-v3/liquidity/../components/RepayModal/RepayMachine.ts","webpack://@snx-v3/liquidity/../components/RepayModal/RepayModal.tsx","webpack://@snx-v3/liquidity/../lib/useRepayBaseAndromeda/useRepayBaseAndromeda.tsx","webpack://@snx-v3/liquidity/../components/RepayModal/index.ts"],"sourcesContent":["import { createMachine, assign } from 'xstate';\n\nexport const Events = {\n  SET_REQUIRE_APPROVAL: 'SET_REQUIRE_APPROVAL',\n  SET_INFINITE_APPROVAL: 'SET_INFINITE_APPROVAL',\n  RETRY: 'RETRY',\n  RUN: 'RUN',\n  SUCCESS: 'SUCCESS',\n  FAILURE: 'FAILURE',\n  RESET: 'RESET',\n} as const;\n\nexport const State = {\n  idle: 'idle',\n  approve: 'approve',\n  repay: 'repay',\n  failed: 'failed',\n  success: 'success',\n} as const;\n\nconst FailedSteps = {\n  [State.approve]: State.approve,\n  [State.repay]: State.repay,\n} as const;\n\nexport const ServiceNames = {\n  approveSUSD: 'approveSUSD',\n  executeRepay: 'executeRepay',\n} as const;\n\ntype Context = {\n  error: {\n    error: Error;\n    step: keyof typeof FailedSteps;\n  } | null;\n  requireApproval: boolean;\n  infiniteApproval: boolean;\n};\n\ntype EventNamesType = typeof Events;\ntype RepayEvents =\n  | { type: EventNamesType['SET_REQUIRE_APPROVAL']; requireApproval: boolean }\n  | { type: EventNamesType['SET_INFINITE_APPROVAL']; infiniteApproval: boolean }\n  | { type: EventNamesType['RETRY'] }\n  | { type: EventNamesType['RUN'] }\n  | { type: EventNamesType['SUCCESS'] }\n  | { type: EventNamesType['FAILURE'] }\n  | { type: EventNamesType['RESET'] };\n\ntype StateType = typeof State;\ntype MachineState =\n  | {\n      value: StateType['idle'];\n      context: Context & { error: null };\n    }\n  | {\n      value: StateType['approve'];\n      context: Context & { error: null };\n    }\n  | {\n      value: StateType['repay'];\n      context: Context & { error: null };\n    }\n  | {\n      value: StateType['failed'];\n      context: Context & { error: { error: Error; step: keyof typeof FailedSteps } };\n    }\n  | {\n      value: StateType['success'];\n      context: Context & {\n        error: null;\n      };\n    };\n\nconst initialContext = {\n  error: null,\n  requireApproval: false,\n  infiniteApproval: false,\n};\n\nexport const RepayMachine = createMachine<Context, RepayEvents, MachineState>({\n  id: 'RepayMachine',\n  initial: State.idle,\n  predictableActionArguments: true,\n  context: initialContext,\n  on: {\n    [Events.RUN]: {\n      target: State.repay,\n      actions: assign({\n        error: (_) => initialContext.error,\n        requireApproval: (_) => initialContext.requireApproval,\n        infiniteApproval: (_) => initialContext.infiniteApproval,\n      }),\n    },\n    [Events.SET_REQUIRE_APPROVAL]: {\n      actions: assign({ requireApproval: (_context, event) => event.requireApproval }),\n    },\n\n    [Events.SET_INFINITE_APPROVAL]: {\n      actions: assign({ infiniteApproval: (_context, event) => event.infiniteApproval }),\n    },\n  },\n  states: {\n    [State.idle]: {\n      on: {\n        [Events.RUN]: [\n          { target: State.approve, cond: (context) => context.requireApproval },\n          { target: State.repay },\n        ],\n      },\n    },\n\n    [State.approve]: {\n      invoke: {\n        src: ServiceNames.approveSUSD,\n        onDone: {\n          target: State.repay,\n        },\n        onError: {\n          target: State.failed,\n          actions: assign({\n            error: (_context, event) => ({ error: event.data, step: FailedSteps.approve }),\n          }),\n        },\n      },\n    },\n    [State.repay]: {\n      invoke: {\n        src: ServiceNames.executeRepay,\n        onDone: {\n          target: State.success,\n        },\n        onError: {\n          target: State.failed,\n          actions: assign({\n            error: (_context, event) => ({ error: event.data, step: FailedSteps.repay }),\n          }),\n        },\n      },\n    },\n    [State.failed]: {\n      on: {\n        [Events.RETRY]: [\n          {\n            target: State.approve,\n            cond: (c) => c.error?.step === FailedSteps.approve,\n            actions: assign({ error: (_) => null }),\n          },\n\n          {\n            target: State.repay,\n            cond: (c) => c.error?.step === FailedSteps.repay,\n            actions: assign({ error: (_) => null }),\n          },\n        ],\n      },\n    },\n    [State.success]: {},\n  },\n});\n","import { ArrowBackIcon } from '@chakra-ui/icons';\nimport { Button, Divider, Flex, Link, Skeleton, Text, useToast } from '@chakra-ui/react';\nimport { Amount } from '@snx-v3/Amount';\nimport { ZEROWEI } from '@snx-v3/constants';\nimport { ContractError } from '@snx-v3/ContractError';\nimport { parseUnits } from '@snx-v3/format';\nimport { getSpotMarketId, isBaseAndromeda } from '@snx-v3/isBaseAndromeda';\nimport { ManagePositionContext } from '@snx-v3/ManagePositionContext';\nimport { Multistep } from '@snx-v3/Multistep';\nimport { useApprove } from '@snx-v3/useApprove';\nimport { useNetwork } from '@snx-v3/useBlockchain';\nimport { useCollateralType } from '@snx-v3/useCollateralTypes';\nimport { useContractErrorParser } from '@snx-v3/useContractErrorParser';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { useGetWrapperToken } from '@snx-v3/useGetUSDTokens';\nimport { useParams } from '@snx-v3/useParams';\nimport { useRepay } from '@snx-v3/useRepay';\nimport { useRepayBaseAndromeda } from '@snx-v3/useRepayBaseAndromeda';\nimport { useSpotMarketProxy } from '@snx-v3/useSpotMarketProxy';\nimport { useSystemToken } from '@snx-v3/useSystemToken';\nimport { useTokenBalance } from '@snx-v3/useTokenBalance';\nimport Wei from '@synthetixio/wei';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useMachine } from '@xstate/react';\nimport { useCallback, useContext, useEffect } from 'react';\nimport type { StateFrom } from 'xstate';\nimport { LiquidityPositionUpdated } from '../../ui/src/components/Manage/LiquidityPositionUpdated';\nimport { Events, RepayMachine, ServiceNames, State } from './RepayMachine';\n\nexport const RepayModalUi: React.FC<{\n  onClose: () => void;\n  debtChange: Wei;\n  isOpen: boolean;\n  onSubmit: () => void;\n  state: StateFrom<typeof RepayMachine>;\n  setInfiniteApproval: (x: boolean) => void;\n  symbol: string;\n}> = ({ symbol, onClose, isOpen, debtChange, state, onSubmit, setInfiniteApproval }) => {\n  const isProcessing = state.matches(State.approve) || state.matches(State.repay);\n  const { infiniteApproval, requireApproval, error } = state.context;\n\n  if (isOpen) {\n    if (state.matches(State.success)) {\n      return (\n        <LiquidityPositionUpdated\n          onClose={onSubmit}\n          title=\"Debt successfully Updated\"\n          subline={\n            <>\n              Your <b>Debt</b> has been updated, read more about it in the{' '}\n              <Link\n                href=\"https://docs.synthetix.io/v/synthetix-v3-user-documentation\"\n                target=\"_blank\"\n                color=\"cyan.500\"\n              >\n                Synthetix V3 Documentation\n              </Link>\n            </>\n          }\n          alertText={\n            <>\n              <b>Debt</b> successfully Updated\n            </>\n          }\n        />\n      );\n    }\n\n    return (\n      <div data-cy=\"repay multistep\">\n        <Text color=\"gray.50\" fontSize=\"20px\" fontWeight={700}>\n          <ArrowBackIcon cursor=\"pointer\" onClick={onClose} mr={2} />\n          Manage Debt\n        </Text>\n        <Divider my={4} />\n        <Multistep\n          step={1}\n          title={`Approve ${symbol} transfer`}\n          status={{\n            failed: error?.step === State.approve,\n            success: !requireApproval || state.matches(State.success),\n            loading: state.matches(State.approve) && !error,\n          }}\n          checkboxLabel={\n            requireApproval ? `Approve unlimited ${symbol} transfers to Synthetix.` : undefined\n          }\n          checkboxProps={{\n            isChecked: infiniteApproval,\n            onChange: (e) => setInfiniteApproval(e.target.checked),\n          }}\n        />\n        <Multistep\n          step={2}\n          title=\"Repay\"\n          subtitle={\n            <Text>\n              Repay <Amount value={debtChange.abs()} suffix={` ${symbol}`} />\n            </Text>\n          }\n          status={{\n            failed: error?.step === State.repay,\n            success: state.matches(State.success),\n            loading: state.matches(State.repay) && !error,\n          }}\n        />\n\n        <Button\n          isDisabled={isProcessing}\n          onClick={onSubmit}\n          width=\"100%\"\n          mt=\"6\"\n          data-cy=\"repay confirm button\"\n        >\n          {(() => {\n            switch (true) {\n              case Boolean(error):\n                return 'Retry';\n              case isProcessing:\n                return 'Processing...';\n              case state.matches(State.success):\n                return 'Continue';\n              default:\n                return 'Execute Transaction';\n            }\n          })()}\n        </Button>\n      </div>\n    );\n  }\n};\n\nexport const RepayModal: React.FC<{\n  onClose: () => void;\n  isOpen: boolean;\n  availableCollateral?: Wei;\n}> = ({ onClose, isOpen, availableCollateral }) => {\n  const { debtChange, setDebtChange } = useContext(ManagePositionContext);\n  const params = useParams();\n\n  const { network } = useNetwork();\n  const queryClient = useQueryClient();\n\n  const { data: collateralType } = useCollateralType(params.collateralSymbol);\n  const { data: systemToken } = useSystemToken();\n  const { data: balance } = useTokenBalance(systemToken?.address);\n\n  const { exec: execRepay, settle: settleRepay } = useRepay({\n    accountId: params.accountId,\n    poolId: params.poolId,\n    collateralTypeAddress: collateralType?.tokenAddress,\n    debtChange,\n    availableUSDCollateral: availableCollateral,\n    balance,\n  });\n\n  const { exec: execRepayBaseAndromeda, settle: settleRepayBaseAndromeda } = useRepayBaseAndromeda({\n    accountId: params.accountId,\n    poolId: params.poolId,\n    collateralTypeAddress: collateralType?.tokenAddress,\n    debtChange,\n    availableUSDCollateral: availableCollateral,\n  });\n\n  const toast = useToast({ isClosable: true, duration: 9000 });\n\n  const { data: CoreProxy } = useCoreProxy();\n  const { data: SpotProxy } = useSpotMarketProxy();\n\n  const errorParser = useContractErrorParser();\n  const amountToDeposit = debtChange.abs().sub(availableCollateral || 0);\n\n  const { data: wrapperToken } = useGetWrapperToken(getSpotMarketId(params.collateralSymbol));\n\n  const isBase = isBaseAndromeda(network?.id, network?.preset);\n  const collateralAddress = isBase ? wrapperToken : systemToken?.address;\n\n  const { approve, requireApproval } = useApprove({\n    contractAddress: collateralAddress,\n    amount: isBase\n      ? //Base USDC is 6 decimals\n        parseUnits(amountToDeposit.toString(), 6)\n      : amountToDeposit.toBN(),\n    spender: isBase ? SpotProxy?.address : CoreProxy?.address,\n  });\n\n  const [state, send] = useMachine(RepayMachine, {\n    services: {\n      [ServiceNames.approveSUSD]: async () => {\n        try {\n          toast({\n            title: `Approve ${systemToken?.symbol} for transfer`,\n            description: 'The next transaction will repay your debt.',\n            status: 'info',\n            variant: 'left-accent',\n          });\n\n          await approve(Boolean(state.context.infiniteApproval));\n        } catch (error: any) {\n          const contractError = errorParser(error);\n          if (contractError) {\n            console.error(new Error(contractError.name), contractError);\n          }\n          toast.closeAll();\n          toast({\n            title: 'Approval failed',\n            description: contractError ? (\n              <ContractError contractError={contractError} />\n            ) : (\n              'Please try again.'\n            ),\n            status: 'error',\n            variant: 'left-accent',\n          });\n          throw Error('Approve failed', { cause: error });\n        }\n      },\n\n      [ServiceNames.executeRepay]: async () => {\n        try {\n          toast.closeAll();\n          toast({ title: 'Repaying...', variant: 'left-accent' });\n\n          if (isBaseAndromeda(network?.id, network?.preset)) {\n            await execRepayBaseAndromeda();\n          } else {\n            await execRepay();\n          }\n\n          await Promise.all([\n            queryClient.invalidateQueries({\n              queryKey: [`${network?.id}-${network?.preset}`, 'TokenBalance'],\n            }),\n            queryClient.invalidateQueries({\n              queryKey: [`${network?.id}-${network?.preset}`, 'Allowance'],\n            }),\n            queryClient.invalidateQueries({\n              queryKey: [`${network?.id}-${network?.preset}`, 'LiquidityPosition'],\n            }),\n          ]);\n\n          setDebtChange(ZEROWEI);\n\n          toast.closeAll();\n          toast({\n            title: 'Success',\n            description: 'Your debt has been repaid.',\n            status: 'success',\n            duration: 5000,\n            variant: 'left-accent',\n          });\n        } catch (error: any) {\n          const contractError = errorParser(error);\n          if (contractError) {\n            console.error(new Error(contractError.name), contractError);\n          }\n          toast({\n            title: 'Could not complete repaying',\n            description: contractError ? (\n              <ContractError contractError={contractError} />\n            ) : (\n              'Please try again.'\n            ),\n            status: 'error',\n            variant: 'left-accent',\n          });\n          throw Error('Repay failed', { cause: error });\n        }\n      },\n    },\n  });\n  const needToDeposit = amountToDeposit.gt(0);\n\n  useEffect(() => {\n    send(Events.SET_REQUIRE_APPROVAL, { requireApproval: requireApproval && needToDeposit });\n  }, [needToDeposit, requireApproval, send]);\n\n  const onSubmit = useCallback(async () => {\n    if (state.matches(State.success)) {\n      send(Events.RESET);\n      onClose();\n      return;\n    }\n    if (state.context.error) {\n      send(Events.RETRY);\n      return;\n    }\n    send(Events.RUN);\n  }, [onClose, send, state]);\n\n  if (!(params.poolId && params.accountId && collateralType && systemToken))\n    return (\n      <Flex gap={4} flexDirection=\"column\">\n        <Skeleton maxW=\"232px\" width=\"100%\" height=\"20px\" />\n        <Divider my={4} />\n        <Skeleton width=\"100%\" height=\"20px\" />\n        <Skeleton width=\"100%\" height=\"20px\" />\n      </Flex>\n    );\n\n  return (\n    <RepayModalUi\n      state={state}\n      onSubmit={onSubmit}\n      debtChange={debtChange}\n      setInfiniteApproval={(infiniteApproval) => {\n        send(Events.SET_INFINITE_APPROVAL, { infiniteApproval });\n      }}\n      onClose={() => {\n        settleRepay();\n        settleRepayBaseAndromeda();\n        onClose();\n      }}\n      isOpen={isOpen}\n      symbol={isBase ? collateralType.symbol : systemToken?.symbol}\n    />\n  );\n};\n","import { parseUnits } from '@snx-v3/format';\nimport { getSpotMarketId } from '@snx-v3/isBaseAndromeda';\nimport { notNil } from '@snx-v3/tsHelpers';\nimport { initialState, reducer } from '@snx-v3/txnReducer';\nimport { approveAbi } from '@snx-v3/useApprove';\nimport { useNetwork, useProvider, useSigner } from '@snx-v3/useBlockchain';\nimport { useCollateralPriceUpdates } from '@snx-v3/useCollateralPriceUpdates';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { formatGasPriceForTransaction } from '@snx-v3/useGasOptions';\nimport { getGasPrice } from '@snx-v3/useGasPrice';\nimport { useGasSpeed } from '@snx-v3/useGasSpeed';\nimport { useGetUSDTokens } from '@snx-v3/useGetUSDTokens';\nimport { useSpotMarketProxy } from '@snx-v3/useSpotMarketProxy';\nimport { useSystemToken } from '@snx-v3/useSystemToken';\nimport { withERC7412 } from '@snx-v3/withERC7412';\nimport Wei from '@synthetixio/wei';\nimport { useMutation } from '@tanstack/react-query';\nimport { BigNumber, ethers } from 'ethers';\nimport { useReducer } from 'react';\n\nexport const useRepayBaseAndromeda = ({\n  accountId,\n  poolId,\n  collateralTypeAddress,\n  debtChange,\n  availableUSDCollateral,\n  collateralSymbol,\n}: {\n  accountId?: string;\n  poolId?: string;\n  collateralTypeAddress?: string;\n  availableUSDCollateral?: Wei;\n  debtChange: Wei;\n  collateralSymbol?: string;\n}) => {\n  const [txnState, dispatch] = useReducer(reducer, initialState);\n  const { data: CoreProxy } = useCoreProxy();\n  const { data: systemToken } = useSystemToken();\n  const { data: SpotMarketProxy } = useSpotMarketProxy();\n  const { data: priceUpdateTx, refetch: refetchPriceUpdateTx } = useCollateralPriceUpdates();\n  const { data: usdTokens } = useGetUSDTokens();\n\n  const signer = useSigner();\n  const { network } = useNetwork();\n  const { gasSpeed } = useGasSpeed();\n  const provider = useProvider();\n\n  const mutation = useMutation({\n    mutationFn: async () => {\n      if (!signer || !network || !provider) throw new Error('No signer or network');\n\n      if (\n        !(\n          CoreProxy &&\n          poolId &&\n          accountId &&\n          collateralTypeAddress &&\n          systemToken &&\n          SpotMarketProxy &&\n          usdTokens?.sUSD\n        )\n      ) {\n        return;\n      }\n\n      if (!availableUSDCollateral) return;\n      if (debtChange.eq(0)) return;\n      const debtChangeAbs = debtChange.abs();\n      const amountToDeposit = debtChangeAbs.sub(availableUSDCollateral);\n      const collateralAmount = amountToDeposit.gt(0)\n        ? parseUnits(amountToDeposit.toString(), 6)\n        : BigNumber.from(0);\n\n      try {\n        dispatch({ type: 'prompting' });\n\n        const spotMarketId = getSpotMarketId(collateralSymbol);\n\n        // USDC or stataUSDC to sUSDC or sStataUSDC\n        const wrap = collateralAmount.gt(0)\n          ? SpotMarketProxy.populateTransaction.wrap(spotMarketId, collateralAmount, 0)\n          : undefined;\n\n        const Synth_Contract = new ethers.Contract(collateralTypeAddress, approveAbi, signer);\n        const synth_approval = amountToDeposit.gt(0)\n          ? Synth_Contract.populateTransaction.approve(\n              SpotMarketProxy.address,\n              amountToDeposit.toBN()\n            )\n          : undefined;\n\n        // sUSDC or sStataUSDC => snxUSD\n        const sell_synth = amountToDeposit.gt(0)\n          ? SpotMarketProxy.populateTransaction.sell(\n              spotMarketId,\n              amountToDeposit.toBN(),\n              0,\n              ethers.constants.AddressZero\n            )\n          : undefined;\n\n        // approve sUSD to Core\n        const sUSD_Contract = new ethers.Contract(systemToken.address, approveAbi, signer);\n        const sUSD_Approval = amountToDeposit.gt(0)\n          ? sUSD_Contract.populateTransaction.approve(CoreProxy.address, amountToDeposit.toBN())\n          : undefined;\n\n        // Only deposit if user doesn't have enough sUSD collateral\n        const deposit = amountToDeposit.lte(0)\n          ? undefined\n          : CoreProxy.populateTransaction.deposit(\n              BigNumber.from(accountId),\n              systemToken.address,\n              amountToDeposit.toBN() // only deposit what's needed\n            );\n\n        const burn = CoreProxy.populateTransaction.burnUsd(\n          BigNumber.from(accountId),\n          BigNumber.from(poolId),\n          collateralTypeAddress,\n          debtChangeAbs.toBN()\n        );\n\n        const callsPromise = Promise.all(\n          [wrap, synth_approval, sell_synth, sUSD_Approval, deposit, burn].filter(notNil)\n        );\n\n        const [calls, gasPrices] = await Promise.all([callsPromise, getGasPrice({ provider })]);\n        if (priceUpdateTx) {\n          calls.unshift(priceUpdateTx as any);\n        }\n\n        const walletAddress = await signer.getAddress();\n        const { multicallTxn: erc7412Tx, gasLimit } = await withERC7412(\n          network,\n          calls,\n          'useRepay',\n          walletAddress\n        );\n\n        const gasOptionsForTransaction = formatGasPriceForTransaction({\n          gasLimit,\n          gasPrices,\n          gasSpeed,\n        });\n\n        const txn = await signer.sendTransaction({ ...erc7412Tx, ...gasOptionsForTransaction });\n        dispatch({ type: 'pending', payload: { txnHash: txn.hash } });\n\n        await txn.wait();\n        dispatch({ type: 'success' });\n      } catch (error: any) {\n        dispatch({ type: 'error', payload: { error } });\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      // After mutation withERC7412, we guaranteed to have updated all the prices, dont care about await\n      refetchPriceUpdateTx();\n    },\n  });\n  return {\n    mutation,\n    txnState,\n    settle: () => dispatch({ type: 'settled' }),\n    isLoading: mutation.isPending,\n    exec: mutation.mutateAsync,\n  };\n};\n","import { RepayModal } from './RepayModal';\nexport * from './RepayModal';\nexport default RepayModal;\n"],"names":["Events","State","FailedSteps","ServiceNames","initialContext","error","requireApproval","infiniteApproval","RepayMachine","createMachine","id","initial","predictableActionArguments","context","on","target","actions","assign","_","_context","event","states","cond","invoke","src","onDone","onError","data","step","approve","repay","c","RepayModalUi","symbol","onClose","isOpen","debtChange","state","onSubmit","setInfiniteApproval","isProcessing","matches","_jsx","LiquidityPositionUpdated","title","subline","_jsxs","_Fragment","children","Link","href","color","alertText","Text","fontSize","fontWeight","ArrowBackIcon","cursor","onClick","mr","Divider","my","Multistep","status","failed","success","loading","checkboxLabel","undefined","checkboxProps","isChecked","onChange","e","checked","subtitle","Amount","value","abs","suffix","Button","isDisabled","width","mt","Boolean","RepayModal","availableCollateral","setDebtChange","useContext","ManagePositionContext","params","useParams","network","useNetwork","queryClient","useQueryClient","collateralType","useCollateralType","collateralSymbol","systemToken","useSystemToken","balance","useTokenBalance","address","exec","execRepay","settle","settleRepay","useRepay","accountId","poolId","collateralTypeAddress","tokenAddress","availableUSDCollateral","execRepayBaseAndromeda","settleRepayBaseAndromeda","useRepayBaseAndromeda","txnState","dispatch","useReducer","reducer","initialState","CoreProxy","useCoreProxy","SpotMarketProxy","useSpotMarketProxy","priceUpdateTx","refetch","refetchPriceUpdateTx","useCollateralPriceUpdates","usdTokens","useGetUSDTokens","signer","useSigner","gasSpeed","useGasSpeed","provider","useProvider","mutation","useMutation","mutationFn","async","Error","sUSD","eq","debtChangeAbs","amountToDeposit","sub","collateralAmount","gt","parseUnits","toString","BigNumber","from","type","spotMarketId","getSpotMarketId","wrap","populateTransaction","Synth_Contract","ethers","approveAbi","synth_approval","toBN","sell_synth","sell","sUSD_Contract","sUSD_Approval","deposit","lte","burn","burnUsd","callsPromise","Promise","all","filter","notNil","calls","gasPrices","getGasPrice","unshift","walletAddress","getAddress","multicallTxn","erc7412Tx","gasLimit","withERC7412","gasOptionsForTransaction","formatGasPriceForTransaction","txn","sendTransaction","payload","txnHash","hash","wait","onSuccess","isLoading","isPending","mutateAsync","toast","useToast","isClosable","duration","SpotProxy","errorParser","useContractErrorParser","wrapperToken","useGetWrapperToken","isBase","isBaseAndromeda","preset","collateralAddress","useApprove","contractAddress","amount","spender","send","useMachine","services","description","variant","contractError","console","name","closeAll","ContractError","cause","invalidateQueries","queryKey","ZEROWEI","needToDeposit","useEffect","useCallback","Flex","gap","flexDirection","Skeleton","maxW","height"],"sourceRoot":""}