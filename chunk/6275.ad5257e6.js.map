{"version":3,"file":"chunk/6275.ad5257e6.js","mappings":"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","sources":["webpack://@snx-v3/liquidity/../components/RepayModal/RepayMachine.ts","webpack://@snx-v3/liquidity/../components/RepayModal/RepayModal.tsx","webpack://@snx-v3/liquidity/../lib/useRepay/useRepay.tsx","webpack://@snx-v3/liquidity/../components/RepayModal/index.ts"],"sourcesContent":["import { createMachine, assign } from 'xstate';\n\nexport const Events = {\n  SET_REQUIRE_APPROVAL: 'SET_REQUIRE_APPROVAL',\n  SET_INFINITE_APPROVAL: 'SET_INFINITE_APPROVAL',\n  RETRY: 'RETRY',\n  RUN: 'RUN',\n  SUCCESS: 'SUCCESS',\n  FAILURE: 'FAILURE',\n  RESET: 'RESET',\n} as const;\n\nexport const State = {\n  idle: 'idle',\n  approve: 'approve',\n  repay: 'repay',\n  failed: 'failed',\n  success: 'success',\n} as const;\n\nconst FailedSteps = {\n  [State.approve]: State.approve,\n  [State.repay]: State.repay,\n} as const;\n\nexport const ServiceNames = {\n  approveSUSD: 'approveSUSD',\n  executeRepay: 'executeRepay',\n} as const;\n\ntype Context = {\n  error: {\n    error: Error;\n    step: keyof typeof FailedSteps;\n  } | null;\n  requireApproval: boolean;\n  infiniteApproval: boolean;\n};\n\ntype EventNamesType = typeof Events;\ntype RepayEvents =\n  | { type: EventNamesType['SET_REQUIRE_APPROVAL']; requireApproval: boolean }\n  | { type: EventNamesType['SET_INFINITE_APPROVAL']; infiniteApproval: boolean }\n  | { type: EventNamesType['RETRY'] }\n  | { type: EventNamesType['RUN'] }\n  | { type: EventNamesType['SUCCESS'] }\n  | { type: EventNamesType['FAILURE'] }\n  | { type: EventNamesType['RESET'] };\n\ntype StateType = typeof State;\ntype MachineState =\n  | {\n      value: StateType['idle'];\n      context: Context & { error: null };\n    }\n  | {\n      value: StateType['approve'];\n      context: Context & { error: null };\n    }\n  | {\n      value: StateType['repay'];\n      context: Context & { error: null };\n    }\n  | {\n      value: StateType['failed'];\n      context: Context & { error: { error: Error; step: keyof typeof FailedSteps } };\n    }\n  | {\n      value: StateType['success'];\n      context: Context & {\n        error: null;\n      };\n    };\n\nconst initialContext = {\n  error: null,\n  requireApproval: false,\n  infiniteApproval: false,\n};\n\nexport const RepayMachine = createMachine<Context, RepayEvents, MachineState>({\n  id: 'RepayMachine',\n  initial: State.idle,\n  predictableActionArguments: true,\n  context: initialContext,\n  on: {\n    [Events.RUN]: {\n      target: State.repay,\n      actions: assign({\n        error: (_) => initialContext.error,\n        requireApproval: (_) => initialContext.requireApproval,\n        infiniteApproval: (_) => initialContext.infiniteApproval,\n      }),\n    },\n    [Events.SET_REQUIRE_APPROVAL]: {\n      actions: assign({ requireApproval: (_context, event) => event.requireApproval }),\n    },\n\n    [Events.SET_INFINITE_APPROVAL]: {\n      actions: assign({ infiniteApproval: (_context, event) => event.infiniteApproval }),\n    },\n  },\n  states: {\n    [State.idle]: {\n      on: {\n        [Events.RUN]: [\n          { target: State.approve, cond: (context) => context.requireApproval },\n          { target: State.repay },\n        ],\n      },\n    },\n\n    [State.approve]: {\n      invoke: {\n        src: ServiceNames.approveSUSD,\n        onDone: {\n          target: State.repay,\n        },\n        onError: {\n          target: State.failed,\n          actions: assign({\n            error: (_context, event) => ({ error: event.data, step: FailedSteps.approve }),\n          }),\n        },\n      },\n    },\n    [State.repay]: {\n      invoke: {\n        src: ServiceNames.executeRepay,\n        onDone: {\n          target: State.success,\n        },\n        onError: {\n          target: State.failed,\n          actions: assign({\n            error: (_context, event) => ({ error: event.data, step: FailedSteps.repay }),\n          }),\n        },\n      },\n    },\n    [State.failed]: {\n      on: {\n        [Events.RETRY]: [\n          {\n            target: State.approve,\n            cond: (c) => c.error?.step === FailedSteps.approve,\n            actions: assign({ error: (_) => null }),\n          },\n\n          {\n            target: State.repay,\n            cond: (c) => c.error?.step === FailedSteps.repay,\n            actions: assign({ error: (_) => null }),\n          },\n        ],\n      },\n    },\n    [State.success]: {},\n  },\n});\n","import {\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n  useToast,\n} from '@chakra-ui/react';\nimport { Amount } from '@snx-v3/Amount';\nimport Wei from '@synthetixio/wei';\nimport { Multistep } from '@snx-v3/Multistep';\nimport { useCallback, useContext, useEffect } from 'react';\nimport { ContractError } from '@snx-v3/ContractError';\nimport { useRepay } from '@snx-v3/useRepay';\nimport { useParams } from '@snx-v3/useParams';\nimport { ManagePositionContext } from '@snx-v3/ManagePositionContext';\nimport { useCollateralType } from '@snx-v3/useCollateralTypes';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { useContractErrorParser } from '@snx-v3/useContractErrorParser';\nimport { useApprove } from '@snx-v3/useApprove';\nimport { useTokenBalance } from '@snx-v3/useTokenBalance';\nimport { useUSDProxy } from '@snx-v3/useUSDProxy';\nimport { useMachine } from '@xstate/react';\nimport type { StateFrom } from 'xstate';\nimport { Events, RepayMachine, ServiceNames, State } from './RepayMachine';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useNetwork } from '@snx-v3/useBlockchain';\n\nexport const RepayModalUi: React.FC<{\n  onClose: () => void;\n  debtChange: Wei;\n  isOpen: boolean;\n  onSubmit: () => void;\n  state: StateFrom<typeof RepayMachine>;\n  setInfiniteApproval: (x: boolean) => void;\n}> = ({ onClose, isOpen, debtChange, state, onSubmit, setInfiniteApproval }) => {\n  const isProcessing = state.matches(State.approve) || state.matches(State.repay);\n  const { infiniteApproval, requireApproval, error } = state.context;\n\n  return (\n    <Modal size=\"lg\" isOpen={isOpen} onClose={onClose} closeOnOverlayClick={false}>\n      <ModalOverlay />\n      <ModalContent bg=\"black\" color=\"white\" data-testid=\"repay modal\">\n        <ModalHeader>Complete this action</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Multistep\n            step={1}\n            title=\"Approve sUSD transfer\"\n            status={{\n              failed: error?.step === State.approve,\n              success: !requireApproval || state.matches(State.success),\n              loading: state.matches(State.approve) && !error,\n            }}\n            checkboxLabel=\"Approve unlimited sUSD transfers to Synthetix.\"\n            checkboxProps={{\n              isChecked: infiniteApproval,\n              onChange: (e) => setInfiniteApproval(e.target.checked),\n            }}\n          />\n          <Multistep\n            step={2}\n            title=\"Repay\"\n            subtitle={\n              <Text>\n                Repay <Amount value={debtChange.abs()} suffix={` sUSD`} />\n              </Text>\n            }\n            status={{\n              failed: error?.step === State.repay,\n              success: state.matches(State.success),\n              loading: state.matches(State.repay) && !error,\n            }}\n          />\n\n          <Button\n            isDisabled={isProcessing}\n            onClick={onSubmit}\n            width=\"100%\"\n            my=\"4\"\n            data-testid=\"repay confirm button\"\n          >\n            {(() => {\n              switch (true) {\n                case Boolean(error):\n                  return 'Retry';\n                case isProcessing:\n                  return 'Processing...';\n                case state.matches(State.success):\n                  return 'Done';\n                default:\n                  return 'Start';\n              }\n            })()}\n          </Button>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport const RepayModal: React.FC<{\n  onClose: () => void;\n  isOpen: boolean;\n  availableCollateral?: Wei;\n}> = ({ onClose, isOpen, availableCollateral }) => {\n  const { debtChange } = useContext(ManagePositionContext);\n  const params = useParams();\n\n  const network = useNetwork();\n  const queryClient = useQueryClient();\n  const { data: USDProxy } = useUSDProxy();\n\n  const { data: collateralType } = useCollateralType(params.collateralSymbol);\n  const { data: balance } = useTokenBalance(USDProxy?.address);\n\n  const { exec: execRepay, settle: settleRepay } = useRepay({\n    accountId: params.accountId,\n    poolId: params.poolId,\n    collateralTypeAddress: collateralType?.tokenAddress,\n    debtChange,\n    availableUSDCollateral: availableCollateral,\n    balance,\n  });\n\n  const toast = useToast({ isClosable: true, duration: 9000 });\n  const { data: CoreProxy } = useCoreProxy();\n  const errorParserCoreProxy = useContractErrorParser(CoreProxy);\n  const amountToDeposit = debtChange.abs().sub(availableCollateral || 0);\n\n  const { approve, requireApproval } = useApprove({\n    contractAddress: USDProxy?.address,\n    amount: amountToDeposit.toBN(),\n    spender: CoreProxy?.address,\n  });\n  const [state, send] = useMachine(RepayMachine, {\n    services: {\n      [ServiceNames.approveSUSD]: async () => {\n        try {\n          toast({\n            title: 'Approve sUSD for transfer',\n            description: 'The next transaction will repay your debt.',\n            status: 'info',\n          });\n\n          await approve(Boolean(state.context.infiniteApproval));\n        } catch (error: any) {\n          const contractError = errorParserCoreProxy(error);\n          if (contractError) {\n            console.error(new Error(contractError.name), contractError);\n          }\n          toast.closeAll();\n          toast({\n            title: 'Approval failed',\n            description: contractError ? (\n              <ContractError contractError={contractError} />\n            ) : (\n              'Please try again.'\n            ),\n            status: 'error',\n          });\n          throw Error('Approve failed', { cause: error });\n        }\n      },\n\n      [ServiceNames.executeRepay]: async () => {\n        try {\n          toast.closeAll();\n          toast({ title: 'Repaying...' });\n          await execRepay();\n\n          await Promise.all([\n            queryClient.invalidateQueries({\n              queryKey: [network.name, 'TokenBalance'],\n            }),\n            queryClient.invalidateQueries({\n              queryKey: [network.name, 'Allowance'],\n            }),\n            queryClient.invalidateQueries({\n              queryKey: [network.name, 'LiquidityPosition'],\n            }),\n          ]);\n\n          toast.closeAll();\n          toast({\n            title: 'Success',\n            description: 'Your debt has been repaid.',\n            status: 'success',\n            duration: 5000,\n          });\n        } catch (error: any) {\n          const contractError = errorParserCoreProxy(error);\n          if (contractError) {\n            console.error(new Error(contractError.name), contractError);\n          }\n          toast({\n            title: 'Could not complete repaying',\n            description: contractError ? (\n              <ContractError contractError={contractError} />\n            ) : (\n              'Please try again.'\n            ),\n            status: 'error',\n          });\n          throw Error('Repay failed', { cause: error });\n        }\n      },\n    },\n  });\n  const needToDeposit = amountToDeposit.gt(0);\n  useEffect(() => {\n    send(Events.SET_REQUIRE_APPROVAL, { requireApproval: requireApproval && needToDeposit });\n  }, [needToDeposit, requireApproval, send]);\n\n  const onSubmit = useCallback(async () => {\n    if (state.matches(State.success)) {\n      send(Events.RESET);\n      onClose();\n      return;\n    }\n    if (state.context.error) {\n      send(Events.RETRY);\n      return;\n    }\n    send(Events.RUN);\n  }, [onClose, send, state]);\n  if (!params.poolId || !params.accountId || !collateralType) return null;\n  return (\n    <RepayModalUi\n      state={state}\n      onSubmit={onSubmit}\n      debtChange={debtChange}\n      setInfiniteApproval={(infiniteApproval) => {\n        send(Events.SET_INFINITE_APPROVAL, { infiniteApproval });\n      }}\n      onClose={() => {\n        settleRepay();\n        onClose();\n      }}\n      isOpen={isOpen}\n    />\n  );\n};\n","import { useReducer } from 'react';\nimport { useCoreProxy } from '@snx-v3/useCoreProxy';\nimport { formatGasPriceForTransaction } from '@snx-v3/useGasOptions';\nimport { useMutation } from '@tanstack/react-query';\nimport { useNetwork, useProvider, useSigner } from '@snx-v3/useBlockchain';\nimport { initialState, reducer } from '@snx-v3/txnReducer';\nimport Wei from '@synthetixio/wei';\nimport { BigNumber } from 'ethers';\nimport { getGasPrice } from '@snx-v3/useGasPrice';\nimport { useGasSpeed } from '@snx-v3/useGasSpeed';\nimport { useUSDProxy } from '@snx-v3/useUSDProxy';\nimport { notNil } from '@snx-v3/tsHelpers';\nimport { withERC7412 } from '@snx-v3/withERC7412';\nimport { useAllCollateralPriceIds } from '@snx-v3/useAllCollateralPriceIds';\nimport { fetchPriceUpdates, priceUpdatesToPopulatedTx } from '@snx-v3/fetchPythPrices';\n\nexport const useRepay = ({\n  accountId,\n  poolId,\n  collateralTypeAddress,\n  debtChange,\n  balance,\n  availableUSDCollateral,\n}: {\n  accountId?: string;\n  poolId?: string;\n  collateralTypeAddress?: string;\n  balance?: Wei;\n  availableUSDCollateral?: Wei;\n  debtChange: Wei;\n}) => {\n  const [txnState, dispatch] = useReducer(reducer, initialState);\n  const { data: CoreProxy } = useCoreProxy();\n  const { data: UsdProxy } = useUSDProxy();\n  const { data: collateralPriceIds } = useAllCollateralPriceIds();\n\n  const signer = useSigner();\n  const network = useNetwork();\n  const { gasSpeed } = useGasSpeed();\n  const provider = useProvider();\n\n  const mutation = useMutation({\n    mutationFn: async () => {\n      if (!signer) return;\n      if (\n        !(\n          CoreProxy &&\n          poolId &&\n          accountId &&\n          collateralTypeAddress &&\n          UsdProxy &&\n          collateralPriceIds\n        )\n      ) {\n        return;\n      }\n      if (!balance) return;\n      if (!availableUSDCollateral) return;\n      if (debtChange.eq(0)) return;\n      const debtChangeAbs = debtChange.abs();\n      const amountToDeposit = debtChangeAbs.sub(availableUSDCollateral);\n\n      try {\n        dispatch({ type: 'prompting' });\n\n        // Only deposit if user doesn't have enough sUSD collateral\n        const deposit = amountToDeposit.lte(0)\n          ? undefined\n          : CoreProxy.populateTransaction.deposit(\n              BigNumber.from(accountId),\n              UsdProxy.address,\n              amountToDeposit.toBN() // only deposit what's needed\n            );\n\n        const burn = CoreProxy.populateTransaction.burnUsd(\n          BigNumber.from(accountId),\n          BigNumber.from(poolId),\n          collateralTypeAddress,\n          debtChangeAbs.toBN()\n        );\n\n        const callsPromise = Promise.all([deposit, burn].filter(notNil));\n        const walletAddress = await signer.getAddress();\n        const collateralPriceCallsPromise = fetchPriceUpdates(\n          collateralPriceIds,\n          network.isTestnet\n        ).then((signedData) =>\n          priceUpdatesToPopulatedTx(walletAddress, collateralPriceIds, signedData)\n        );\n\n        const [calls, gasPrices, collateralPriceCalls] = await Promise.all([\n          callsPromise,\n          getGasPrice({ provider }),\n          collateralPriceCallsPromise,\n        ]);\n        const allCalls = collateralPriceCalls.concat(calls);\n\n        const erc7412Tx = await withERC7412(provider, allCalls, 'useRepay');\n\n        const gasOptionsForTransaction = formatGasPriceForTransaction({\n          gasLimit: erc7412Tx.gasLimit,\n          gasPrices,\n          gasSpeed,\n        });\n\n        const txn = await signer.sendTransaction({ ...erc7412Tx, ...gasOptionsForTransaction });\n        dispatch({ type: 'pending', payload: { txnHash: txn.hash } });\n\n        await txn.wait();\n        dispatch({ type: 'success' });\n      } catch (error: any) {\n        dispatch({ type: 'error', payload: { error } });\n        throw error;\n      }\n    },\n  });\n  return {\n    mutation,\n    txnState,\n    settle: () => dispatch({ type: 'settled' }),\n    isLoading: mutation.isLoading,\n    exec: mutation.mutateAsync,\n  };\n};\n","import { RepayModal } from './RepayModal';\nexport * from './RepayModal';\nexport default RepayModal;\n"],"names":["Events","State","FailedSteps","ServiceNames","initialContext","error","requireApproval","infiniteApproval","RepayMachine","createMachine","id","initial","predictableActionArguments","context","on","target","actions","assign","_","_context","event","states","cond","invoke","src","onDone","onError","data","step","approve","repay","c","RepayModalUi","onClose","isOpen","debtChange","state","onSubmit","setInfiniteApproval","isProcessing","matches","_jsxs","Modal","size","closeOnOverlayClick","children","_jsx","ModalOverlay","ModalContent","bg","color","ModalHeader","ModalCloseButton","ModalBody","Multistep","title","status","failed","success","loading","checkboxLabel","checkboxProps","isChecked","onChange","e","checked","subtitle","Text","Amount","value","abs","suffix","Button","isDisabled","onClick","width","my","Boolean","RepayModal","availableCollateral","useContext","ManagePositionContext","params","useParams","network","useNetwork","queryClient","useQueryClient","USDProxy","useUSDProxy","collateralType","useCollateralType","collateralSymbol","balance","useTokenBalance","address","exec","execRepay","settle","settleRepay","useRepay","accountId","poolId","collateralTypeAddress","availableUSDCollateral","txnState","dispatch","useReducer","reducer","initialState","CoreProxy","useCoreProxy","UsdProxy","collateralPriceIds","useAllCollateralPriceIds","signer","useSigner","gasSpeed","useGasSpeed","provider","useProvider","mutation","useMutation","mutationFn","async","eq","debtChangeAbs","amountToDeposit","sub","type","deposit","lte","undefined","populateTransaction","BigNumber","from","toBN","burn","burnUsd","callsPromise","Promise","all","filter","notNil","walletAddress","getAddress","collateralPriceCallsPromise","fetchPriceUpdates","isTestnet","then","signedData","priceUpdatesToPopulatedTx","calls","gasPrices","collateralPriceCalls","getGasPrice","allCalls","concat","erc7412Tx","withERC7412","gasOptionsForTransaction","formatGasPriceForTransaction","gasLimit","txn","sendTransaction","payload","txnHash","hash","wait","isLoading","mutateAsync","tokenAddress","toast","useToast","isClosable","duration","errorParserCoreProxy","useContractErrorParser","useApprove","contractAddress","amount","spender","send","useMachine","services","description","contractError","console","Error","name","closeAll","ContractError","cause","invalidateQueries","queryKey","needToDeposit","gt","useEffect","useCallback"],"sourceRoot":""}